
-    Preface
    -   Intended Audience
    -   Fourth Edition
    -   Third Edition
    -   Second Edition (2004)
    -   First Edition (2001)
    -   Organization of This Book
    -   Conventions used in this book
    -   Acknowledgments
-    Part I. Getting Started
-    Chapter 1. Introduction
    -   1.1. Synopsis
    -   1.2. Welcome to FreeBSD!
    -   1.3. About the FreeBSD Project
-    Chapter 2. Installing FreeBSD
    -   2.1. Synopsis
    -   2.2. Minimum Hardware Requirements
    -   2.3. Pre-Installation Tasks
    -   2.4. Starting the Installation
    -   2.5. Using bsdinstall
    -   2.6. Allocating Disk Space
    -   2.7. Fetching Distribution Files
    -   2.8. Network Interfaces, Accounts, Time Zone, Services and
        Hardening
    -   2.9. Troubleshooting
    -   2.10. Using the Live CD
-    Chapter 3. FreeBSD Basics
    -   3.1. Synopsis
    -   3.2. Virtual Consoles and Terminals
    -   3.3. Users and Basic Account Management
    -   3.4. Permissions
    -   3.5. Directory Structure
    -   3.6. Disk Organization
    -   3.7. Mounting and Unmounting File Systems
    -   3.8. Processes and Daemons
    -   3.9. Shells
    -   3.10. Text Editors
    -   3.11. Devices and Device Nodes
    -   3.12. Manual Pages
-    Chapter 4. Installing Applications: Packages and Ports
    -   4.1. Synopsis
    -   4.2. Overview of Software Installation
    -   4.3. Finding Software
    -   4.4. Using pkg for Binary Package Management
    -   4.5. Using the Ports Collection
    -   4.6. Building Packages with Poudriere
    -   4.7. Post-Installation Considerations
    -   4.8. Dealing with Broken Ports
-    Chapter 5. The X Window System
    -   5.1. Synopsis
    -   5.2. Installing Xorg
    -   5.3. Graphic card drivers
    -   5.4. Xorg Configuration
    -   5.5. Using Fonts in Xorg
-    Chapter 6. Wayland
    -   6.1. Wayland Synopsis
    -   6.2. The Wayfire Compositor
    -   6.3. The Hikari Compositor
    -   6.4. The Sway Compositor
    -   6.5. Using Xwayland
    -   6.6. Remote Desktop Using VNC
    -   6.7. Wayland Login Manager
    -   6.8. Useful Utilities
-    Chapter 7. Network
    -   7.1. Synopsis
    -   7.2. Setting up the Network
    -   7.3. Wired Networks
    -   7.4. Wireless Networks
    -   7.5. Hostname
    -   7.6. DNS
    -   7.7. Troubleshooting
-    Part II. Common Tasks
-    Chapter 8. Desktop Environments
    -   8.1. Synopsis
    -   8.2. Desktop Environments
    -   8.3. Browsers
    -   8.4. Development tools
    -   8.5. Desktop office productivity
    -   8.6. Document Viewers
    -   8.7. Finance
-    Chapter 9. Multimedia
    -   9.1. Synopsis
    -   9.2. Setting Up the Sound Card
    -   9.3. Audio players
    -   9.4. Video players
    -   9.5. Conferencing and Meetings
    -   9.6. Image Scanners
-    Chapter 10. Configuring the FreeBSD Kernel
    -   10.1. Synopsis
    -   10.2. Why Build a Custom Kernel?
    -   10.3. Finding the System Hardware
    -   10.4. The Configuration File
    -   10.5. Building and Installing a Custom Kernel
    -   10.6. If Something Goes Wrong
-    Chapter 11. Printing
    -   11.1. Quick Start
    -   11.2. Printer Connections
    -   11.3. Common Page Description Languages
    -   11.4. Direct Printing
    -   11.5. LPD (Line Printer Daemon)
    -   11.6. Other Printing Systems
-    Chapter 12. Linux Binary Compatibility
    -   12.1. Synopsis
    -   12.2. Configuring Linux Binary Compatibility
    -   12.3. Linux userlands
    -   12.4. Advanced Topics
-    Chapter 13. WINE
    -   13.1. Synopsis
    -   13.2. WINE Overview & Concepts
    -   13.3. Installing WINE on FreeBSD
    -   13.4. Running a First WINE Program on FreeBSD
    -   13.5. Configuring WINE Installation
    -   13.6. WINE Management GUIs
    -   13.7. WINE in Multi-User FreeBSD Installations
    -   13.8. WINE on FreeBSD FAQ
-    Part III. System Administration
-    Chapter 14. Configuration and Tuning
    -   14.1. Synopsis
    -   14.2. Starting Services
    -   14.3. Configuring cron(8)
    -   14.4. Managing Services in FreeBSD
    -   14.5. Configuring System Logging
    -   14.6. Configuration Files
    -   14.7. Tuning with sysctl(8)
    -   14.8. Tuning Disks
    -   14.9. Tuning Kernel Limits
    -   14.10. Adding Swap Space
    -   14.11. Power and Resource Management
-    Chapter 15. The FreeBSD Booting Process
    -   15.1. Synopsis
    -   15.2. FreeBSD Boot Process
    -   15.3. Device Hints
    -   15.4. Shutdown Sequence
-    Chapter 16. Security
    -   16.1. Synopsis
    -   16.2. Introduction
    -   16.3. One-time Passwords
    -   16.4. TCP Wrapper
    -   16.5. Kerberos
    -   16.6. OpenSSL
    -   16.7. VPN over IPsec
    -   16.8. OpenSSH
    -   16.9. Access Control Lists
    -   16.10. Monitoring Third Party Security Issues
    -   16.11. FreeBSD Security Advisories
    -   16.12. Process Accounting
    -   16.13. Resource Limits
    -   16.14. Shared Administration with Sudo
    -   16.15. Using doas as an alternative to sudo
-    Chapter 17. Jails
    -   17.1. Synopsis
    -   17.2. Terms Related to Jails
    -   17.3. Creating and Controlling Jails
    -   17.4. Fine Tuning and Administration
    -   17.5. Updating Multiple Jails
    -   17.6. Managing Jails with ezjail
-    Chapter 18. Mandatory Access Control
    -   18.1. Synopsis
    -   18.2. Key Terms
    -   18.3. Understanding MAC Labels
    -   18.4. Planning the Security Configuration
    -   18.5. Available MAC Policies
    -   18.6. User Lock Down
    -   18.7. Nagios in a MAC Jail
    -   18.8. Troubleshooting the MAC Framework
-    Chapter 19. Security Event Auditing
    -   19.1. Synopsis
    -   19.2. Key Terms
    -   19.3. Audit Configuration
    -   19.4. Working with Audit Trails
-    Chapter 20. Storage
    -   20.1. Synopsis
    -   20.2. Adding Disks
    -   20.3. Resizing and Growing Disks
    -   20.4. USB Storage Devices
    -   20.5. Creating and Using CD Media
    -   20.6. Creating and Using DVD Media
    -   20.7. Creating and Using Floppy Disks
    -   20.8. Using NTFS Disks
    -   20.9. Backup Basics
    -   20.10. Memory Disks
    -   20.11. File System Snapshots
    -   20.12. Disk Quotas
    -   20.13. Encrypting Disk Partitions
    -   20.14. Encrypting Swap
    -   20.15. Highly Available Storage (HAST)
-    Chapter 21. GEOM: Modular Disk Transformation Framework
    -   21.1. Synopsis
    -   21.2. RAID0 - Striping
    -   21.3. RAID1 - Mirroring
    -   21.4. RAID3 - Byte-level Striping with Dedicated Parity
    -   21.5. Software RAID Devices
    -   21.6. GEOM Gate Network
    -   21.7. Labeling Disk Devices
    -   21.8. UFS Journaling Through GEOM
-    Chapter 22. The Z File System (ZFS)
    -   22.1. What Makes ZFS Different
    -   22.2. Quick Start Guide
    -   22.3. zpool Administration
    -   22.4. zfs Administration
    -   22.5. Delegated Administration
    -   22.6. Advanced Topics
<<<<<<< HEAD
=======
    -   22.7. Further Resources
    -   22.8. ZFS Features and Terminology
-    Chapter 23. Other File Systems
    -   23.1. Synopsis
    -   23.2. Linux® File Systems
-    Chapter 24. Virtualization
    -   24.1. Synopsis
    -   24.2. FreeBSD as a Guest on Parallels Desktop for macOS®
    -   24.3. FreeBSD as a Guest on VMware Fusion for macOS®
    -   24.4. FreeBSD as a Guest on VirtualBox™
    -   24.5. FreeBSD as a Host with VirtualBox™
    -   24.6. FreeBSD as a Host with bhyve
    -   24.7. FreeBSD as a Xen™-Host
-    Chapter 25. Localization - i18n/L10n Usage and Setup
    -   25.1. Synopsis
    -   25.2. Using Localization
    -   25.3. Finding i18n Applications
    -   25.4. Locale Configuration for Specific Languages
-    Chapter 26. Updating and Upgrading FreeBSD
    -   26.1. Synopsis
    -   26.2. FreeBSD Update
    -   26.3. Updating Bootcode
    -   26.4. Updating the Documentation Set
    -   26.5. Tracking a Development Branch
    -   26.6. Updating FreeBSD from Source
    -   26.7. Tracking for Multiple Machines
-    Chapter 27. DTrace
    -   27.1. Synopsis
    -   27.2. Implementation Differences
    -   27.3. Enabling DTrace Support
    -   27.4. Using DTrace
-    Chapter 28. USB Device Mode / USB OTG
    -   28.1. Synopsis
    -   28.2. USB Virtual Serial Ports
    -   28.3. USB Device Mode Network Interfaces
    -   28.4. USB Virtual Storage Device
-    Part IV. Network Communication
-    Chapter 29. Serial Communications
    -   29.1. Synopsis
    -   29.2. Serial Terminology and Hardware
    -   29.3. Terminals
    -   29.4. Dial-in Service
    -   29.5. Dial-out Service
    -   29.6. Setting Up the Serial Console
-    Chapter 30. PPP
    -   30.1. Synopsis
    -   30.2. Configuring PPP
    -   30.3. Troubleshooting PPP Connections
    -   30.4. Using PPP over Ethernet (PPPoE)
    -   30.5. Using PPP over ATM (PPPoA)
-    Chapter 31. Electronic Mail
    -   31.1. Synopsis
    -   31.2. Mail Components
    -   31.3. Sendmail Configuration Files
    -   31.4. Changing the Mail Transfer Agent
    -   31.5. Troubleshooting
    -   31.6. Advanced Topics
    -   31.7. Setting Up to Send Only
    -   31.8. Using Mail with a Dialup Connection
    -   31.9. SMTP Authentication
    -   31.10. Mail User Agents
    -   31.11. Using fetchmail
    -   31.12. Using procmail
-    Chapter 32. Network Servers
    -   32.1. Synopsis
    -   32.2. The inetd Super-Server
    -   32.3. Network File System (NFS)
    -   32.4. Network Information System (NIS)
    -   32.5. Lightweight Directory Access Protocol (LDAP)
    -   32.6. Dynamic Host Configuration Protocol (DHCP)
    -   32.7. Domain Name System (DNS)
    -   32.8. Apache HTTP Server
    -   32.9. File Transfer Protocol (FTP)
    -   32.10. File and Print Services for Microsoft® Windows® Clients
        (Samba)
    -   32.11. Clock Synchronization with NTP
    -   32.12. iSCSI Initiator and Target Configuration
-    Chapter 33. Firewalls
    -   33.1. Synopsis
    -   33.2. Firewall Concepts
    -   33.3. PF
    -   33.4. IPFW
    -   33.5. IPFILTER (IPF)
    -   33.6. Blacklistd
-    Chapter 34. Advanced Networking
    -   34.1. Synopsis
    -   34.2. Gateways and Routes
    -   34.3. Virtual Hosts
    -   34.4. Wireless Advanced Authentication
    -   34.5. Wireless Ad-hoc Mode
    -   34.6. USB Tethering
    -   34.7. Bluetooth
    -   34.8. Bridging
    -   34.9. Link Aggregation and Failover
    -   34.10. Diskless Operation with PXE
    -   34.11. Common Address Redundancy Protocol (CARP)
    -   34.12. VLANs
-    Part V. Appendices
-    Appendix A. Obtaining FreeBSD
    -   A.1. Mirrors
    -   A.2. Using Git
    -   A.3. Using Subversion
    -   A.4. CD and DVD Sets
-    Appendix B. Bibliography
    -   B.1. FreeBSD Bibliography
    -   B.2. Security Reference
    -   B.3. UNIX® History
    -   B.4. Periodicals, Journals, and Magazines
-    Appendix C. Resources on the Internet
    -   C.1. Websites
    -   C.2. Mailing Lists
    -   C.3. Usenet Newsgroups
-    Appendix D. OpenPGP Keys
    -   D.1. Officers
-    FreeBSD Glossary
-    Colophon
-   
-   

Book menu

Chapter 13. WINE

Table of Contents

-   13.1. Synopsis
-   13.2. WINE Overview & Concepts
-   13.3. Installing WINE on FreeBSD
-   13.4. Running a First WINE Program on FreeBSD
-   13.5. Configuring WINE Installation
-   13.6. WINE Management GUIs
-   13.7. WINE in Multi-User FreeBSD Installations
-   13.8. WINE on FreeBSD FAQ

13.1. Synopsis

WINE, which stands for Wine Is Not an Emulator, is technically a
software translation layer. It enables to install and run some software
written for Windows® on FreeBSD (and other) systems.

It operates by intercepting system calls, or requests from the software
to the operating system, and translating them from Windows® calls to
calls that FreeBSD understands. It will also translate any responses as
needed into what the Windows® software is expecting. So in some ways, it
emulates a Windows® environment, in that it provides many of the
resources Windows® applications are expecting.

However, it is not an emulator in the traditional sense. Many of these
solutions operate by constructing an entire other computer using
software processes in place of hardware. Virtualization (such as that
provided by the emulators/qemu port) operates in this way. One of the
benefits of this approach is the ability to install a full version of
the OS in question to the emulator. It means that the environment will
not look any different to applications than a real machine, and chances
are good that everything will work on it. The downside to this approach
is the fact that software acting as hardware is inherently slower than
actual hardware. The computer built in software (called the guest)
requires resources from the real machine (the host), and holds on to
those resources for as long as it is running.

The WINE Project, on the other hand, is much lighter on system’s
resources. It will translate system calls on the fly, so while it is
difficult to be as fast as a real Windows® computer, it can come very
close. On the other hand, WINE is trying to keep up with a moving target
in terms of all the different system calls and other functionality it
needs to support. As a result there may be applications that do not work
as expected on WINE, will not work at all, or will not even install to
begin with.

At the end of the day, WINE provides another option to try to get a
particular Windows® software program running on FreeBSD. It can always
serve as the first option which, if successful, offers a good experience
without unnecessarily depleting the host FreeBSD system’s resources.

This chapter will describe:

-   How to install WINE on a FreeBSD system.

-   How WINE operates, and how it is different from other alternatives
    like virtualizaton.

-   How to fine-tune WINE to the specific needs of some applications.

-   How to install GUI helpers for WINE.

-   Common tips and solutions for on FreeBSD.

-   Considerations for WINE on FreeBSD in terms of the multi-user
    environment.

Before reading this chapter, it will be useful to:

-   Understand the basics of UNIX® and FreeBSD.

-   Know how to install FreeBSD.

-   Know how to set up a network connection.

-   Know how to install additional third-party software.

13.2. WINE Overview & Concepts

WINE is a complex system, so before running it on a FreeBSD system it is
worth gaining an understanding of what it is and how it works.

13.2.1. What is WINE?

As mentioned in the Synopsis for this chapter, WINE is a compatibility
layer that allows Windows® applications to run on other operating
systems. In theory, it means these programs should run on systems like
FreeBSD, macOS, and Android.

When WINE runs a Windows® executable, two things occur:

-   Firstly, WINE implements an environment that mimics that of various
    versions of Windows®. For example, if an application requests access
    to a resource such as RAM, WINE has a memory interface that looks
    and acts (as far as the application is concerned) like Windows®.

-   Then, once that application makes use of that interface, WINE takes
    the incoming request for space in memory and translates it to
    something compatible with the host system. In the same way when the
    application retrieves that data, WINE facilitates fetching it from
    the host system and passing it back to the Windows® application.

13.2.2. WINE and the FreeBSD System

Installing WINE on a FreeBSD system will entail a few different
components:

-   FreeBSD applications for tasks such as running the Windows®
    executables, configuring the WINE sub-system, or compiling programs
    with WINE support.

-   A large number of libraries that implement the core functions of
    Windows® (for example /lib/wine/api-ms-core-memory-l1-1-1.dll.so,
    which is part of the aforementioned memory interface).

-   A number of Windows® executables, which are (or mimic) common
    utilities (such as /lib/wine/notepad.exe.so, which provides the
    standard Windows® text editor).

-   Additional Windows® assets, in particular fonts (like the Tahoma
    font, which is stored in share/wine/fonts/tahoma.ttf in the install
    root).

13.2.3. Graphical Versus Text Mode/Terminal Programs in WINE

As an operating system where terminal utilities are "first-class
citizens," it is natural to assume that WINE will contain extensive
support for text-mode program. However, the majority of applications for
Windows®, especially the most popular ones, are designed with a
graphical user interface (GUI) in mind. Therefore, WINE’s utilities are
designed by default to launch graphical programs.

However, there are three methods available to run these so-called
Console User Interface (CUI) programs:

-   The Bare Streams approach will display the output directly to
    standard output.

-   The wineconsole utility can be used with either the user or curses
    backed to utilize some of the enhancements the WINE system provides
    for CUI applications.

These approaches are described in greater detail on the WINE Wiki.

13.2.4. WINE Derivative Projects

WINE itself is a mature open source project, so it is little surprise it
is used as the foundation of more complex solutions.

13.2.4.1. Commercial WINE Implementations

A number of companies have taken WINE and made it a core of their own,
proprietary products (WINE’s LGPL license permits this). Two of the most
famous of these are as follows:

-   Codeweavers CrossOver

This solution provides a simplified "one-click" installation of WINE,
which contains additional enhancements and optimizations (although the
company contributes many of these back upstream to the WINE project).
One area of focus for Codeweavers is to make the most popular
applications install and run smoothly.

While the company once produced a native FreeBSD version of their
CrossOver solution, it appears to have long been abandoned. While some
resources (such as a dedicated forum) are still present, they also have
seen no activity for some time.

-   Steam Proton

Gaming company Steam also uses WINE to enable Windows® games to install
and run on other systems. it is primary target is Linux-based systems,
though some support exists for macOS as well.

While Steam does not offer a native FreeBSD client,there are several
options for using the Linux® client using FreeBSD’s Linux Compatibility
Layer.

13.2.4.2. WINE Companion Programs

In addition to proprietary offerings, other projects have released
applications designed to work in tandem with the standard, open source
version of WINE. The goals for these can range from making installation
easier to offering easy ways to get popular software installed.

These solutions are covered in greater detail in the later section on
GUI frontends, and include the following:

-   winetricks

-   Homura

13.2.5. Alternatives to WINE

For FreeBSD users, some alternatives to using WINE are as follows:

-   Dual-Booting: A straightforward option is to run desired Windows®
    applications natively on that OS. This of course means exiting
    FreeBSD in order to boot Windows®, so this method is not feasible if
    access to programs in both systems is required simultaneously.

-   Virtual Machines: Virtual Machines (VMs), as mentioned earlier in
    this chapter, are software processes that emulate full sets of
    hardware, on which additional operating systems (including Windows®)
    can be installed and run. Modern tools make VMs easy to create and
    manage, but this method comes at a cost. A good portion of the host
    systems resources must be allocated to each VM, and those resources
    cannot be reclaimed by the host as long as the VM is running. A few
    examples of VM managers include the open source solutions qemu,
    bhyve, and VirtualBox. See the chapter on Virtualization for more
    detail.

-   Remote Access: Like many other UNIX®-like systems, FreeBSD can run a
    variety of applications enabling users to remotely access Windows®
    computers and use their programs or data. In addtion to clients such
    as xrdp that connect to the standard Windows® Remote Desktop
    Protocol, other open source standards such as vnc can also be used
    (provided a compatible server is present on the other side).

13.3. Installing WINE on FreeBSD

WINE can be installed via the pkg tool, or by compiling the port(s).

13.3.1. WINE Prerequistes

Before installing WINE itself, it is useful to have the following
pre-requisites installed.

-   A GUI

Most Windows® programs are expecting to have a graphical user interface
available. If WINE is installed without one present, its dependencies
will include the Wayland compositor, and so a GUI will be installed
along with WINE. But it is useful to have the GUI of choice installed,
configured, and working correctly before installing WINE.

-   wine-gecko

The Windows® operating system has for some time had a default web
browser pre-installed: Internet Explorer. As a result, some applications
work under the assumption that there will always be something capable of
displaying web pages. In order to provide this functionality, the WINE
layer includes a web browser component using the Mozilla project’s Gecko
engine. When WINE is first launched it will offer to download and
install this, and there are reasons users might want it do so (these
will be covered in a later chapter). But they can also install it prior
to installing WINE, or alongside the install of WINE proper.

Install this package with the following:

    # pkg install wine-gecko

Alternately, compile the port with the following:

    # cd /usr/ports/emulator/wine-gecko
    # make install

-   wine-mono

This port installs the MONO framework, an open source implementation of
Microsoft’s .NET. Including this with the WINE installation will make it
that much more likely that any applications written in .NET will install
and run on the system.

To install the package:

    # pkg install wine-mono

To compile from the ports collection:

    # cd /usr/ports/emulator/wine-mono
    # make install

13.3.2. Installing WINE via FreeBSD Package Repositories

With the pre-requisites in place, install WINE via package with the
following command:

    # pkg install wine

Alternately compile the WINE sub-system from source with the following:

    # cd /usr/ports/emulator/wine
    # make install

13.3.3. Concerns of 32- Versus 64-Bit in WINE Installations

Like most software, Windows® applications made the upgrade from the
older 32-bit architecture to 64 bits. And most recent software is
written for 64-bit operating systems, although modern OSes can sometimes
continue to run older 32-bit programs as well. FreeBSD is no different,
having had support for 64-bit since the 5.x series.

However, using old software no longer supported by default is a common
use for emulators, and users commonly turn to WINE to play games and use
other programs that do not run properly on modern hardware. Fortunately,
FreeBSD can support all three scenarios:

-   On modern, 64-bit machine and want to run 64-bit Windows® software,
    simply install the ports mentioned in the above sections. The ports
    system will automatically install the 64-bit version.

-   Alternately, users might have an older 32-bit machine that they do
    not want to run with its original, now non-supported software. They
    can install the 32-bit (i386) version of FreeBSD, then install the
    ports in the above sections.

13.4. Running a First WINE Program on FreeBSD

Now that WINE is installed, the next step is to try it out by running a
simple program. An easy way to do this is to download a self-contained
application, i.e., one can simply unpack and run without any complex
installation process.

So-called "portable" versions of applications are good choices for this
test, as are programs that run with only a single executable file.

13.4.1. Running a Program from the Command Line

There are two different methods to launch a Windows program from the
terminal. The first, and most straightforward is to navigate to the
directory containing the program’s executable (.EXE) and issue the
following:

    % wine program.exe

For applications that take command-line arguments, add them after the
executable as usual:

    % wine program2.exe -file file.txt

Alternately, supply the full path to the executable to use it in a
script, for example:

    % wine /home/user/bin/program.exe

13.4.2. Running a Program from a GUI

After installation graphical shells should be updated with new
associations for Windows executable (.EXE) files. It will now be
possible to browse the system using a file manager, and launch the
Windows application in the same way as other files and programs (either
a single- or double-click, depending on the desktop’s settings).

On most desktops, check to make sure this association is correct by
right-clicking on the file, and looking for an entry in the context menu
to open the file. One of the options (hopefully the default one) will be
with the Wine Windows Program Loader, as shown in the below screenshot:

[wine run np++ 1]

In the event the program does not run as expected, try launching it from
the command line and review any messages displayed in the terminal to
troubleshoot.

In the event WINE is not the default application for .EXE files after
install, check the MIME associate for this extension in the current
desktop environment, graphical shell, or file manager.

13.5. Configuring WINE Installation

With an understanding of what WINE is and how it works at a high level,
the next step to effectively using it on FreeBSD is becoming familiar
with its configuration. The following sections will describe the key
concept of the WINE prefix, and illustrate how it is used to control the
behavior of applications run through WINE.

13.5.1. WINE Prefixes

A WINE prefix is a directory, usually located beneath the default
location of $HOME/.wine though it can be located elsewhere. The prefix
is a set of configurations and support files used by the wine to
configure and run the Windows® environment a given application needs. By
default, a brand new WINE installation will create the following
structure when first launched by a user:

-   .update-timestamp: contains the last modified date of file
    /usr/share/wine/wine.inf. It is used by WINE to determine if a
    prefix is out of date, and automatically update it if needed.

-   dosdevices/: contains information on mappings of Windows® resources
    to resources on the host FreeBSD system. For example, after a new
    WINE installation, this should contain at least two entries which
    enable access to the FreeBSD filesystem using Windows®-style drive
    letters:

    -   c:@: A link to drive_c described below.

    -   z:@: A link to the root directory of the system.

-   drive_c/: emulates the main (i.e., C:) drive of a Windows® system.
    It contains a directory structure and associated files mirroring
    that of standard Windows® systems. A fresh WINE prefix will contain
    Windows® 10 directories such as Users and Windows that holds the OS
    itself. Furthermore, applications installed within a prefix will be
    located in either Program Files or Program Files (x86), depending on
    their architecture.

-   system.reg: This Registry file contains information on the Windows®
    installation, which in the case of WINE is the environment in
    drive_c.

-   user.reg: This Registry file contains the current user’s personal
    configurations, made either by varous software or through the use of
    the Registry Editor.

-   userdef.reg: This Registry file is a default set of configurations
    for newly-created users.

13.5.2. Creating and Using WINE Prefixes

While WINE will create a default prefix in the user’s $HOME/.wine/, it
is possible to set up multiple prefixes. There are a few reasons to do
this:

-   The most common reason is to emulate different versions of Windows®,
    according to the compatibility needs of the software in question.

-   In addition, it is common to encounter software that does not work
    correctly in the default environment, and requires special
    configuration. it is useful to isolate these in their own, custom
    prefixes, so the changes do not impact other applications.

-   Similarly, copying the default or "main" prefix into a separate
    "testing" one in order to evaluate an application’s compatibility
    can reduce the chance of corruption.

Creating a prefix from the terminal requires the following command:

    % WINEPREFIX="/home/username/.wine-new" winecfg

This will run the winecfg program, which can be used to configure wine
prefixes (more on this in a later section). But by providing a directory
path value for the WINEPREFIX environment variable, a new prefix is
created at that location if one does not already exist.

Supplying the same variable to the wine program will similarly cause the
selected program to be run with the specified prefix:

    % WINEPREFIX="/home/username/.wine-new" wine program.exe

13.5.3. Configuring WINE Prefixes with winecfg

As described above WINE includes a tool called winecfg to configure
prefixes from within a GUI. It contains a variety of functions, which
are detailed in the sections below. When winecfg is run from within a
prefix, or provided the location of a prefix within the WINEPREFIX
variable, it enables the configuration of the selected prefix as
described in the below sections.

Selections made on the Applications tab will affect the scope of changes
made in the Libraries and Graphics tabs, which will be limited to the
application selected. See the section on Using Winecfg in the WINE Wiki
for more details.

13.5.3.1. Applications

[wine config 1]

The Applications contains controls enabling the association of programs
with a particular version of Windows®. On first start-up the Application
settings section will contain a single entry: Default Settings. This
corresponds to all the default configurations of the prefix, which (as
the disabled Remove application button implies) cannot be deleted.

But additional applications can be added with the following process:

1.  Click the Add application button.

2.  Use the provided dialog to select the desired program’s executable.

3.  Select the version of Windows® to be used with the selected program.

13.5.3.2. Libraries

[wine config 2]

WINE provides a set of open source library files as part of its
distribution that provide the same functions as their Windows®
counterparts. However, as noted earlier in this chapter, the WINE
project is always trying to keep pace with new updates to these
libraries. As a result, the versions that ship with WINE may be missing
functionality that the latest Windows® programs are expecting.

However, winecfg makes it possible specify overrides for the built-in
libraries, particularly there is a version of Windows® available on the
same machine as the host FreeBSD installation. For each library to be
overridden, do the following:

1.  Open the New override for library drop-down and select the library
    to be replaced.

2.  Click the Add button.

3.  The new override will appear in the Existing overrides list, notice
    the native, builtin designation in parentheses.

4.  Click to select the library.

5.  Click the Edit button.

6.  Use the provided dialog to select a corresponding library to be used
    in place of the built-in one.

Be sure to select a file that is truly the corresponding version of the
built-in one, otherwise there may be unexpected behavior.

13.5.3.3. Graphics

[wine config 3]

The Graphics tab provides some options to make the windows of programs
run via WINE operate smoothly with FreeBSD:

-   Automatic mouse capture when windows are full-screen.

-   Allowing the FreeBSD window manager to decorate the windows, such as
    their title bars, for programs running via WINE.

-   Allowing the window manager to control windows for programs running
    via WINE, such as running resizing functions on them.

-   Create an emulated virtual desktop, within which all WINE programs
    will run. If this item is selected, the size of the virtual desktop
    can be specified using the Desktop size input boxes.

-   Setting the screen resolution for programs running via WINE.

13.5.3.4. Desktop Integration

[wine config 4]

This tab allows configuration of the following items:

-   The theme and related visual settings to be used for programs
    running via WINE.

-   Whether the WINE sub-system should manage MIME types (used to
    determine which application opens a particular file type)
    internally.

-   Mappings of directories in the host FreeBSD system to useful folders
    within the Windows® environment. To change an existing association,
    select the desired item and click Browse, then use the provided
    dialog to select a directory.

13.5.3.5. Drives

[wine config 5]

The Drives tab allows linking of directories in the host FreeBSD system
to drive letters in the Windows® environment. The default values in this
tab should look familiar, as they are displaying the contents of
dosdevices/ in the current WINE prefix. Changes made via this dialog
will reflect in dosdevices, and properly-formatted links created in that
directory will display in this tab.

To create a new entry, such as for a CD-ROM (mounted at /mnt/cdrom),
take the following steps:

1.  Click the _Add _ button.

2.  In the provided dialog, choose a free drive letter.

3.  Click OK.

4.  Fill in the Path input box by either typing the path to the
    resource, or click _Browse _ and use the provided dialog to select
    it.

By default WINE will autodetect the type of resource linked, but this
can be manually overridden. See the section in the WINE Wiki for more
detail on advanced options.

13.5.3.6. Audio

[wine config 6]

This tab contains some configurable options for routing sound from
Windows® programs to the native FreeBSD sound system, including:

-   Driver selection

-   Default device selection

-   Sound test

13.5.3.7. About

[wine config 7]

The final tab contains information on the WINE project, including a link
to the website. It also allows entry of (entirely optional) user
information, although this is not sent anywhere as it is in other
operating systems.

13.6. WINE Management GUIs

While the base install of WINE comes with a GUI configuration tool in
winecfg, it is main purpose is just that: strictly configuring an
existing WINE prefix. There are, however, more advanced applications
that will assist in the initial installation of applications as well as
optimizing their WINE environments. The below sections include a
selection of the most popular.

13.6.1. Winetricks

The winetricks tool is a cross-platform, general purpose helper program
for WINE. It is not developed by the WINE project proper, but rather
maintained on Github by a group of contributors. It contains some
automated "recipes" for getting common applications to work on WINE,
both by optimizing the settings as well as acquiring some DLL libraries
automatically.

13.6.1.1. Installing winetricks

To install winetricks on a FreeBSD using binary packages, use the
following commands (note winetricks requires either the i386-wine or
i386-wine-devel package, and is therefore not installed automatically
with other dependencies):

    # pkg install i386-wine winetricks

To compile it from source, issue the following in the terminal:

    # cd /usr/ports/emulators/i386-wine
    # make install
    # cd /usr/ports/emulators/winetricks
    # make install

If a manual installation is required, refer to the Github account for
instructions.

13.6.1.2. Using winetricks

Run winetricks with the following command:

    % winetricks

Note: this should be in a 32-bit prefix to run winetricks. Launching
winetricks displays a window with a number of choices, as follows:

[winetricks run 1]

Selecting either Install an application, Install a benchmark, or Install
a game shows a list with supported options, such as the one below for
applications:

[winetricks run 2]

Selecting one or more items and clicking OK will start their
installation process(es). Initially, some messages that appear to be
errors may show up, but they’re actually informational alerts as
winetricks configures the WINE environment to get around known issues
for the application:

[winetricks app install 1]

Once these are circumvented, the actual installer for the application
will be run:

[winetricks app install 2]

Once the installation completes, the new Windows application should be
available from the desktop environment’s standard menu (shown in the
screenshot below for the LXQT desktop environment):

[winetricks menu 1]

In order to remove the application, run winetricks again, and select Run
an uninstaller.

[winetricks uninstall 1]

A Windows®-style dialog will appear with a list of installed programs
and components. Select the application to be removed, then click the
Modify/Remove button.

[winetricks uninstall 2]

This will run the applications built-in installer, which should also
have the option to uninstall.

[winetricks uninstall 3]

13.6.2. Homura

Homura is an application similar to winetricks, although it was inspired
by the Lutris gaming system for Linux. But while it is focused on games,
there are also non-gaming applications available for install through
Homura.

13.6.2.1. Installing Homura

To install Homura’s binary package, issue the following command:

    # pkg install homura

Homura is available in the FreeBSD Ports system. However, than the
emulators section of Ports or binary packages, look for it in the games
section.

    # cd /usr/ports/games/homura
    # make install

13.6.2.2. Using Homura

Homura’s usage is quite similar to that of winetricks. When using it for
the first time, launch it from the command line (or a desktop
environment runner applet) with:

    % Homura

This should result in a friendly welcome message. Click OK to continue.

[homura launch 1]

The program will also offer to place a link in the application menu of
compatible environments:

[homura run 2]

Depending on the setup of the FreeBSD machine, Homura may display a
message urging the install of native graphics drivers.

[homura run 3]

The application’s window should then appear, which amounts to a "main
menu" with all its options. Many of the items are the same as
winetricks, although Homura offers some additional, helpful options such
as opening its data folder (Open Homura Folder) or running a specified
program (Run a executable in prefix).

[homura install 1]

To select one of Homura’s supported applications to install, select
Installation, and click OK. This will display a list of applications
Homura can install automatically. Select one, and click OK to start the
process.

[homura install 2]

As a first step Homura will download the selected program. A
notification may appear in supported desktop environments.

[homura install 3]

The program will also create a new prefix for the application. A
standard WINE dialog with this message will display.

[homura install 4]

Next, Homura will install any prerequisites for the selected program.
This may involve downloading and extracting a fair number of files, the
details of which will show in dialogs.

[homura install 5]

Downloaded packages are automatically opened and run as required.

[homura install 6]

The installation may end with a simple desktop notification or message
in the terminal, depending on how Homura was launched. But in either
case Homura should return to the main screen. To confirm the
installation was successful, select Launcher, and click OK.

[homura install 7]

This will display a list of installed applications.

[homura install 8]

To run the new program, select it from the list, and click OK. To
uninstall the application, select Uninstallation from the main screen,
which will display a similar list. Select the program to be removed, and
click OK.

[homura uninstall 1]

13.6.3. Running Multiple Management GUIs

it is worth noting that the above solutions are not mutually exclusive.
it is perfectly acceptable, even advantageous, to have both installed at
the same time, as they support a different set of programs.

However, it is wise to ensure that they do not access any of the same
WINE prefixes. Each of these solutions applies workarounds and makes
changes to the registries based on known workarounds to existing WINE
issues in order to make a given application run smoothly. Allowing both
winetricks and Homura to access the same prefix could lead to some of
these being overwritten, with the result being some or all applications
do not work as expected.

13.7. WINE in Multi-User FreeBSD Installations

13.7.1. Issues with Using a Common WINE Prefix

Like most UNIX®-like operating systems, FreeBSD is designed for multiple
users to be logged in and working at the same time. On the other hand,
Windows® is multi-user in the sense that there can be multiple user
accounts set up on one system. But the expectation is that only one will
be using the physical machine (a desktop or laptop PC) at any given
moment.

More recent consumer versions of Windows® have taken some steps to
improve the OS in multi-user scenarios. But it is still largely
structured around a single-user experience. Furthermore, the measures
the WINE project has taken to create a compatible environment means,
unlike FreeBSD applications (including WINE itself), it will resemble
this single-user environment.

So it follows that each user will have to maintain their own set of
configurations, which is potentially good. Yet it is advantageous to
install applications, particularly large ones like office suites or
games, only once. Two examples of reasons to do this are maintenance
(software updates need only be applied once) and efficiency in storage
(no duplicated files).

There are two strategies to minimize the impact of multiple WINE users
in the system.

13.7.2. Installing Applications to a Common Drive

As shown in the section on WINE Configuration, WINE provides the ability
to attach additional drives to a given prefix. In this way, applications
can be installed to a common location, while each user will still have
an prefix where individual settings may be kept (depending on the
program). This is a good setup if there are relatively few applications
to be shared between users, and they are programs that require few
custom tweaks changes to the prefix in order to function.

The steps to make install applications in this way are as follows:

1.  First, set up a shared location on the system where the files will
    be stored, such as /mnt/windows-drive_d/. Creating new directories
    is described in the mkdir(1) manual page.

2.  Next, set permissions for this new directory to allow only desired
    users to access it. One approach to this is to create a new group
    such as "windows," add the desired users to that group (see the
    sub-section on groups in the Users and Basic Account Management
    section), and set to the permissions on the directory to 770 (the
    section on Permissions illustrates this process).

3.  Finally, add the location as a drive to the user’s prefix using the
    winecfg as described in the above section on WINE Configuration in
    this chapter.

Once complete, applications can be installed to this location, and
subsequently run using the assigned drive letter (or the standard
UNIX®-style directory path). However, as noted above, only one user
should be running these applications (which may be accessing files
within their installation directory) at the same time. Some applications
may also exhibit unexpected behavior when run by a user who is not the
owner, despite being a member of the group that should have full
"read/write/execute" permissions for the entire directory.

13.7.3. Using a Common Installation of WINE

If, on the other hand, there are many applications to be shared, or they
require specific tuning in order to work correctly, a different approach
may be required. In this method, a completely separate user is created
specifically for the purposes of storing the WINE prefix and all its
installed applications. Individual users are then granted permission to
run programs as this user using the sudo(8) command. The result is that
these users can launch a WINE application as they normally would, only
it will act as though launched by the newly-created user, and therefore
use the centrally-maintained prefix containing both settings and
programs. To accomplish this, take the following steps:

Create a new user with the following command (as root), which will step
through the required details:

    # adduser

Enter the username (e.g., windows) and Full name ("Microsoft Windows").
Then accept the defaults for the remainder of the questions. Next,
install the sudo utility using binary packages with the following:

    # pkg install sudo

Once installed, edit /etc/sudoers as follows:

    # User alias specification

    # define which users can run the wine/windows programs
    User_Alias WINDOWS_USERS = user1,user2

    # define which users can administrate (become root)
    User_Alias ADMIN = user1

    # Cmnd alias specification

    # define which commands the WINDOWS_USERS may run
    Cmnd_Alias WINDOWS = /usr/bin/wine,/usr/bin/winecfg

    # Defaults
    Defaults:WINDOWS_USERS env_reset
    Defaults:WINDOWS_USERS env_keep += DISPLAY
    Defaults:WINDOWS_USERS env_keep += XAUTHORITY
    Defaults    !lecture,tty_tickets,!fqdn

    # User privilege specification
    root    ALL=(ALL) ALL

    # Members of the admin user_alias, defined above, may gain root privileges
    ADMIN ALL=(ALL) ALL

    # The WINDOWS_USERS may run WINDOWS programs as user windows without a password
    WINDOWS_USERS ALL = (windows) NOPASSWD: WINDOWS

The result of these changes is the users named in the User_Alias section
are permitted to run the programs listed in the Cmnd Alias section using
the resources listed in the Defaults section (the current display) as if
they were the user listed in the final line of the file. In other words,
users designates as WINDOWS_USERS can run the WINE and winecfg
applications as user windows. As a bonus, the configuration here means
they will not be required to enter the password for the windows user.

Next provide access to the display back to the windows user, as whom the
WINE programs will be running:

    % xhost +local:windows

This should be added to the list of commands run either at login or when
the default graphical environment starts. Once all the above are
complete, a user configured as one of the WINDOW_USERS in sudoers can
run programs using the shared prefix with the following command:

    % sudo -u windows wine program.exe

it is worth noting that multiple users accessing this shared environment
at the same time is still risky. However, consider also that the shared
environment can itself contain multiple prefixes. In this way an
administrator can create a tested and verified set of programs, each
with its own prefix. At the same time, one user can play a game while
another works with office programs without the need for redundant
software installations.

13.8. WINE on FreeBSD FAQ

The following section describes some frequently asked questions,
tips/tricks, or common issues in running WINE on FreeBSD, along with
their respective answers.

13.8.1. Basic Installation and Usage

13.8.1.1. How to Install 32-bit and 64-bit WINE on the Same System?

As described earlier in this section, the wine and i386-wine packages
conflict with one another, and therefore cannot be installed on the same
system in the normal way. However, multiple installs can be achieved
using mechanisms like chroots/jails, or by building WINE from source
(note this does not mean building the port).

13.8.1.2. Can DOS Programs Be Run on WINE?

They can, as "Console User Interface" applications as mentioned earlier
in this section. However, there is an arguably better method for running
DOS software: DOSBox. On the other hand, there is little reason not to
at least try it. Simply create a new prefix, install the software, and
if it does not work delete the prefix.

13.8.1.3. Should the emulators/wine-devel Package/Port be Installed to Use the Development Version of WINE Instead of Stable?

Yes, installing this version will install the "development" version of
WINE. As with the 32- and 64-bit versions, they cannot be installed
together with the stable versions unless additional measures are taken.

Note that WINE also has a "Staging" version, which contains the most
recent updates. This was at one time available as a FreeBSD port;
however, it has since been removed. It can be compiled directly from
source however.

13.8.2. Install Optimization

13.8.2.1. How Should Windows® Hardware (e.g., Graphics) Drivers be Handled?

Operating system drivers transfer commands between applications and
hardware. WINE emulates a Windows® environment, including the drivers,
which in turn use FreeBSD’s native drivers for this transfer. it is not
advisable to install Windows® drivers, as the WINE system is designed to
use the host systems drivers. If, for example, a graphics card that
benefits from dedicated drivers, install them using the standard FreeBSD
methods, not Windows® installers.

13.8.2.2. Is There a way to Make Windows® Fonts Look Better?

A user on the FreeBSD forums suggests this configuration to fix
out-of-the-box look of WINE fonts, which can be slightly pixelated.

According to a post in the FreeBSD Forums, adding the following to
.config/fontconfig/fonts.conf will add anti-aliasing and make text more
readable.

    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd>"

    <fontconfig>

      <!-- antialias all fonts -->
      <match target="font">
        <edit name="antialias" mode="assign"><bool>true</bool></edit>>
        <edit name="hinting" mode="assign"><bool>true</bool></edit>>
        <edit name="hintstyle" mode="assign"><const>hintslight</const></edit>>
        <edit name="rgba" mode="assign"><const>rgb</const></edit>>
      </match>
    </fontconfig>

13.8.2.3. Does Having Windows® Installed Elsewhere on a System Help WINE Operate?

It may, depending on the application being run. As mentioned in the
section describing winecfg, some built-in WINE DLLs and other libraries
can be overridden by providing a path to an alternate version. Provided
the Windows® partition or drive is mounted to the FreeBSD system and
accessible to the user, configuring some of these overrides will use
native Windows® libraries and may decrease the chance of unexpected
behavior.

13.8.3. Application-Specific

13.8.3.1. Where is the Best Place to see if Application X Works on WINE?

The first step in determining compatibility should be the WINE AppDB.
This is a compilation of reports of programs working (or not) on all
supported platforms, although (as previously mentioned), solutions for
one platform are often applicable to others.

13.8.3.2. Is There Anything That Will Help Games Run Better?

Perhaps. Many Windows® games rely on DirectX, a proprietary Microsoft
graphics layer. However there are projects in the open source community
attempting to implement support for this technology.

The dxvk project, which is an attempt to implement DirectX using the
FreeBSD-compatible Vulkan graphics sub-system, is one such. Although its
primary target is WINE on Linux, some FreeBSD users report compiling and
using dxvk.

In addition, work is under way on a wine-proton port. This will bring
the work of Valve, developer of the Steam gaming platform, to FreeBSD.
Proton is a distribution of WINE designed to allow many Windows® games
to run on other operating systems with minimal setup.

13.8.3.3. Is There Anywhere FreeBSD WINE Users Gather to Exchange Tips and Tricks?

There are plenty of places FreeBSD users discuss issues related to WINE
that can be searched for solutions:

-   The FreeBSD forums, particularly the Installation and Maintenance of
    Ports or Packages or Emulation and virtualization forums.

-   FreeBSD IRC channels including #freebsd (for general support),
    #freebsd-games, and others.

-   The BSD World Discord server’s channels including bsd-desktop,
    bsd-gaming, bsd-wine, and others.

13.8.4. Other OS Resources

There are a number of resources focused on other operating systems that
may be useful for FreeBSD users:

-   The WINE Wiki has a wealth of information on using WINE, much of
    which is applicable across many of WINE’s supported operating
    systems.

-   Similarly, the documentation available from other OS projects can
    also be of good value. The WINE page on the Arch Linux Wiki is a
    particularly good example, although some of the "Third-party
    applications" (i.e., "companion applications") are obviously not
    available on FreeBSD.

-   Finally, Codeweavers (a developer of a commercial version of WINE)
    is an active upstream contributor. Oftentimes answers to questions
    in their support forum can be of aid in troubleshooting problems
    with the open source version of WINE.

------------------------------------------------------------------------

Last modified on: July 6, 2023 by Sergio Carlavilla Delgado

Prev

Home

Next

Table of Contents

-   13.1. Synopsis
-   13.2. WINE Overview & Concepts
-   13.3. Installing WINE on FreeBSD
-   13.4. Running a First WINE Program on FreeBSD
-   13.5. Configuring WINE Installation
-   13.6. WINE Management GUIs
-   13.7. WINE in Multi-User FreeBSD Installations
-   13.8. WINE on FreeBSD FAQ

------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

