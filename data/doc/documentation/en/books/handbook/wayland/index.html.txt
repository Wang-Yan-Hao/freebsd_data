
-    Preface
    -   Intended Audience
    -   Fourth Edition
    -   Third Edition
    -   Second Edition (2004)
    -   First Edition (2001)
    -   Organization of This Book
    -   Conventions used in this book
    -   Acknowledgments
-    Part I. Getting Started
-    Chapter 1. Introduction
    -   1.1. Synopsis
    -   1.2. Welcome to FreeBSD!
    -   1.3. About the FreeBSD Project
-    Chapter 2. Installing FreeBSD
    -   2.1. Synopsis
    -   2.2. Minimum Hardware Requirements
    -   2.3. Pre-Installation Tasks
    -   2.4. Starting the Installation
    -   2.5. Using bsdinstall
    -   2.6. Allocating Disk Space
    -   2.7. Fetching Distribution Files
    -   2.8. Network Interfaces, Accounts, Time Zone, Services and
        Hardening
    -   2.9. Troubleshooting
    -   2.10. Using the Live CD
-    Chapter 3. FreeBSD Basics
    -   3.1. Synopsis
    -   3.2. Virtual Consoles and Terminals
    -   3.3. Users and Basic Account Management
    -   3.4. Permissions
    -   3.5. Directory Structure
    -   3.6. Disk Organization
    -   3.7. Mounting and Unmounting File Systems
    -   3.8. Processes and Daemons
    -   3.9. Shells
    -   3.10. Text Editors
    -   3.11. Devices and Device Nodes
    -   3.12. Manual Pages
-    Chapter 4. Installing Applications: Packages and Ports
    -   4.1. Synopsis
    -   4.2. Overview of Software Installation
    -   4.3. Finding Software
    -   4.4. Using pkg for Binary Package Management
    -   4.5. Using the Ports Collection
    -   4.6. Building Packages with Poudriere
    -   4.7. Post-Installation Considerations
    -   4.8. Dealing with Broken Ports
-    Chapter 5. The X Window System
    -   5.1. Synopsis
    -   5.2. Installing Xorg
    -   5.3. Graphic card drivers
    -   5.4. Xorg Configuration
    -   5.5. Using Fonts in Xorg
-    Chapter 6. Wayland
    -   6.1. Wayland Synopsis
    -   6.2. The Wayfire Compositor
    -   6.3. The Hikari Compositor
    -   6.4. The Sway Compositor
    -   6.5. Using Xwayland
    -   6.6. Remote Desktop Using VNC
    -   6.7. Wayland Login Manager
    -   6.8. Useful Utilities
-    Chapter 7. Network
    -   7.1. Synopsis
    -   7.2. Setting up the Network
    -   7.3. Wired Networks
    -   7.4. Wireless Networks
    -   7.5. Hostname
    -   7.6. DNS
    -   7.7. Troubleshooting
-    Part II. Common Tasks
-    Chapter 8. Desktop Environments
    -   8.1. Synopsis
    -   8.2. Desktop Environments
    -   8.3. Browsers
    -   8.4. Development tools
    -   8.5. Desktop office productivity
    -   8.6. Document Viewers
    -   8.7. Finance
-    Chapter 9. Multimedia
    -   9.1. Synopsis
    -   9.2. Setting Up the Sound Card
    -   9.3. Audio players
    -   9.4. Video players
    -   9.5. Conferencing and Meetings
    -   9.6. Image Scanners
-    Chapter 10. Configuring the FreeBSD Kernel
    -   10.1. Synopsis
    -   10.2. Why Build a Custom Kernel?
    -   10.3. Finding the System Hardware
    -   10.4. The Configuration File
    -   10.5. Building and Installing a Custom Kernel
    -   10.6. If Something Goes Wrong
-    Chapter 11. Printing
    -   11.1. Quick Start
    -   11.2. Printer Connections
    -   11.3. Common Page Description Languages
    -   11.4. Direct Printing
    -   11.5. LPD (Line Printer Daemon)
    -   11.6. Other Printing Systems
-    Chapter 12. Linux Binary Compatibility
    -   12.1. Synopsis
    -   12.2. Configuring Linux Binary Compatibility
    -   12.3. Linux userlands
    -   12.4. Advanced Topics
-    Chapter 13. WINE
    -   13.1. Synopsis
    -   13.2. WINE Overview & Concepts
    -   13.3. Installing WINE on FreeBSD
    -   13.4. Running a First WINE Program on FreeBSD
    -   13.5. Configuring WINE Installation
    -   13.6. WINE Management GUIs
    -   13.7. WINE in Multi-User FreeBSD Installations
    -   13.8. WINE on FreeBSD FAQ
-    Part III. System Administration
-    Chapter 14. Configuration and Tuning
    -   14.1. Synopsis
    -   14.2. Starting Services
    -   14.3. Configuring cron(8)
    -   14.4. Managing Services in FreeBSD
    -   14.5. Configuring System Logging
    -   14.6. Configuration Files
    -   14.7. Tuning with sysctl(8)
    -   14.8. Tuning Disks
    -   14.9. Tuning Kernel Limits
    -   14.10. Adding Swap Space
    -   14.11. Power and Resource Management
-    Chapter 15. The FreeBSD Booting Process
    -   15.1. Synopsis
    -   15.2. FreeBSD Boot Process
    -   15.3. Device Hints
    -   15.4. Shutdown Sequence
-    Chapter 16. Security
    -   16.1. Synopsis
    -   16.2. Introduction
    -   16.3. One-time Passwords
    -   16.4. TCP Wrapper
    -   16.5. Kerberos
    -   16.6. OpenSSL
    -   16.7. VPN over IPsec
    -   16.8. OpenSSH
    -   16.9. Access Control Lists
    -   16.10. Monitoring Third Party Security Issues
    -   16.11. FreeBSD Security Advisories
    -   16.12. Process Accounting
    -   16.13. Resource Limits
    -   16.14. Shared Administration with Sudo
    -   16.15. Using doas as an alternative to sudo
-    Chapter 17. Jails
    -   17.1. Synopsis
    -   17.2. Terms Related to Jails
    -   17.3. Creating and Controlling Jails
    -   17.4. Fine Tuning and Administration
    -   17.5. Updating Multiple Jails
    -   17.6. Managing Jails with ezjail
-    Chapter 18. Mandatory Access Control
    -   18.1. Synopsis
    -   18.2. Key Terms
    -   18.3. Understanding MAC Labels
    -   18.4. Planning the Security Configuration
    -   18.5. Available MAC Policies
    -   18.6. User Lock Down
    -   18.7. Nagios in a MAC Jail
    -   18.8. Troubleshooting the MAC Framework
-    Chapter 19. Security Event Auditing
    -   19.1. Synopsis
    -   19.2. Key Terms
    -   19.3. Audit Configuration
    -   19.4. Working with Audit Trails
-    Chapter 20. Storage
    -   20.1. Synopsis
    -   20.2. Adding Disks
    -   20.3. Resizing and Growing Disks
    -   20.4. USB Storage Devices
    -   20.5. Creating and Using CD Media
    -   20.6. Creating and Using DVD Media
    -   20.7. Creating and Using Floppy Disks
    -   20.8. Using NTFS Disks
    -   20.9. Backup Basics
    -   20.10. Memory Disks
    -   20.11. File System Snapshots
    -   20.12. Disk Quotas
    -   20.13. Encrypting Disk Partitions
    -   20.14. Encrypting Swap
    -   20.15. Highly Available Storage (HAST)
-    Chapter 21. GEOM: Modular Disk Transformation Framework
    -   21.1. Synopsis
    -   21.2. RAID0 - Striping
    -   21.3. RAID1 - Mirroring
    -   21.4. RAID3 - Byte-level Striping with Dedicated Parity
    -   21.5. Software RAID Devices
    -   21.6. GEOM Gate Network
    -   21.7. Labeling Disk Devices
    -   21.8. UFS Journaling Through GEOM
-    Chapter 22. The Z File System (ZFS)
    -   22.1. What Makes ZFS Different
    -   22.2. Quick Start Guide
    -   22.3. zpool Administration
    -   22.4. zfs Administration
    -   22.5. Delegated Administration
    -   22.6. Advanced Topics
<<<<<<< HEAD
=======
    -   22.7. Further Resources
    -   22.8. ZFS Features and Terminology
-    Chapter 23. Other File Systems
    -   23.1. Synopsis
    -   23.2. Linux® File Systems
-    Chapter 24. Virtualization
    -   24.1. Synopsis
    -   24.2. FreeBSD as a Guest on Parallels Desktop for macOS®
    -   24.3. FreeBSD as a Guest on VMware Fusion for macOS®
    -   24.4. FreeBSD as a Guest on VirtualBox™
    -   24.5. FreeBSD as a Host with VirtualBox™
    -   24.6. FreeBSD as a Host with bhyve
    -   24.7. FreeBSD as a Xen™-Host
-    Chapter 25. Localization - i18n/L10n Usage and Setup
    -   25.1. Synopsis
    -   25.2. Using Localization
    -   25.3. Finding i18n Applications
    -   25.4. Locale Configuration for Specific Languages
-    Chapter 26. Updating and Upgrading FreeBSD
    -   26.1. Synopsis
    -   26.2. FreeBSD Update
    -   26.3. Updating Bootcode
    -   26.4. Updating the Documentation Set
    -   26.5. Tracking a Development Branch
    -   26.6. Updating FreeBSD from Source
    -   26.7. Tracking for Multiple Machines
-    Chapter 27. DTrace
    -   27.1. Synopsis
    -   27.2. Implementation Differences
    -   27.3. Enabling DTrace Support
    -   27.4. Using DTrace
-    Chapter 28. USB Device Mode / USB OTG
    -   28.1. Synopsis
    -   28.2. USB Virtual Serial Ports
    -   28.3. USB Device Mode Network Interfaces
    -   28.4. USB Virtual Storage Device
-    Part IV. Network Communication
-    Chapter 29. Serial Communications
    -   29.1. Synopsis
    -   29.2. Serial Terminology and Hardware
    -   29.3. Terminals
    -   29.4. Dial-in Service
    -   29.5. Dial-out Service
    -   29.6. Setting Up the Serial Console
-    Chapter 30. PPP
    -   30.1. Synopsis
    -   30.2. Configuring PPP
    -   30.3. Troubleshooting PPP Connections
    -   30.4. Using PPP over Ethernet (PPPoE)
    -   30.5. Using PPP over ATM (PPPoA)
-    Chapter 31. Electronic Mail
    -   31.1. Synopsis
    -   31.2. Mail Components
    -   31.3. Sendmail Configuration Files
    -   31.4. Changing the Mail Transfer Agent
    -   31.5. Troubleshooting
    -   31.6. Advanced Topics
    -   31.7. Setting Up to Send Only
    -   31.8. Using Mail with a Dialup Connection
    -   31.9. SMTP Authentication
    -   31.10. Mail User Agents
    -   31.11. Using fetchmail
    -   31.12. Using procmail
-    Chapter 32. Network Servers
    -   32.1. Synopsis
    -   32.2. The inetd Super-Server
    -   32.3. Network File System (NFS)
    -   32.4. Network Information System (NIS)
    -   32.5. Lightweight Directory Access Protocol (LDAP)
    -   32.6. Dynamic Host Configuration Protocol (DHCP)
    -   32.7. Domain Name System (DNS)
    -   32.8. Apache HTTP Server
    -   32.9. File Transfer Protocol (FTP)
    -   32.10. File and Print Services for Microsoft® Windows® Clients
        (Samba)
    -   32.11. Clock Synchronization with NTP
    -   32.12. iSCSI Initiator and Target Configuration
-    Chapter 33. Firewalls
    -   33.1. Synopsis
    -   33.2. Firewall Concepts
    -   33.3. PF
    -   33.4. IPFW
    -   33.5. IPFILTER (IPF)
    -   33.6. Blacklistd
-    Chapter 34. Advanced Networking
    -   34.1. Synopsis
    -   34.2. Gateways and Routes
    -   34.3. Virtual Hosts
    -   34.4. Wireless Advanced Authentication
    -   34.5. Wireless Ad-hoc Mode
    -   34.6. USB Tethering
    -   34.7. Bluetooth
    -   34.8. Bridging
    -   34.9. Link Aggregation and Failover
    -   34.10. Diskless Operation with PXE
    -   34.11. Common Address Redundancy Protocol (CARP)
    -   34.12. VLANs
-    Part V. Appendices
-    Appendix A. Obtaining FreeBSD
    -   A.1. Mirrors
    -   A.2. Using Git
    -   A.3. Using Subversion
    -   A.4. CD and DVD Sets
-    Appendix B. Bibliography
    -   B.1. FreeBSD Bibliography
    -   B.2. Security Reference
    -   B.3. UNIX® History
    -   B.4. Periodicals, Journals, and Magazines
-    Appendix C. Resources on the Internet
    -   C.1. Websites
    -   C.2. Mailing Lists
    -   C.3. Usenet Newsgroups
-    Appendix D. OpenPGP Keys
    -   D.1. Officers
-    FreeBSD Glossary
-    Colophon
-   
-   

Book menu

Chapter 6. Wayland

Table of Contents

-   6.1. Wayland Synopsis
-   6.2. The Wayfire Compositor
-   6.3. The Hikari Compositor
-   6.4. The Sway Compositor
-   6.5. Using Xwayland
-   6.6. Remote Desktop Using VNC
-   6.7. Wayland Login Manager
-   6.8. Useful Utilities

6.1. Wayland Synopsis

Wayland is a new display server, but it differs from Xorg in several
important ways. First, Wayland is only a protocol that acts as an
intermediary between clients using a different mechanism which removes
the dependency on an X server. Xorg includes both the X11 protocol, used
to run remote displays and the X server will accept connections and
display windows. Under Wayland, the compositor or window manager
provides the display server instead of a traditional X server.

Since Wayland is not an X server, traditional X screen connections will
need to utilize other methods such as VNC or RDP for remote desktop
management. Second, Wayland can manage composite communications between
clients and a compositor as a separate entity which does not need to
support the X protocols.

Wayland is relatively new, and not all software has been updated to run
natively without Xwayland support. Because Wayland does not provide the
X server, and expects compositors to provide that support, X11 window
managers that do not yet support Wayland will require that Xwayland is
not started with the -rootless parameter. The -rootless parameter, when
removed, will restore X11 window manager support.

+-----------------------------------+-----------------------------------+
|                                   | The current NVidia driver should  |
|                                   | work with most wl-roots           |
|                                   | compositors, but it may be a      |
|                                   | little unstable and not support   |
|                                   | all features at this time.        |
|                                   | Volunteers to help work on the    |
|                                   | NVidia DRM are requested.         |
+-----------------------------------+-----------------------------------+

Currently, a lot of software will function with minimal issues on
Wayland, including Firefox. And a few desktops are also available, such
as the Compiz Fusion replacement, known as Wayfire, and the i3 window
manager replacement, Sway.

+-----------------------------------+-----------------------------------+
|                                   | As of May, 2021, plasma5-kwin     |
|                                   | does support Wayland on FreeBSD.  |
|                                   | To use Plasma under Wayland, use  |
|                                   | the startplasma-wayland parameter |
|                                   | to ck-launch-session and tie in   |
|                                   | dbus with:                        |
|                                   | ck-launch-session dbu             |
|                                   | s-run-session startplasma-wayland |
|                                   | to get it working.                |
+-----------------------------------+-----------------------------------+

For compositors, a kernel supporting the evdev(4) driver must exist to
utilize the keybinding functionality. This is built into the GENERIC
kernel by default; however, if it has been customized and evdev(4)
support was stripped out, the evdev(4) module will need to be loaded. In
addition, users of Wayland will need to be members of the video group.
To quickly make this change, use the pw command:

    pw groupmod video -m user

Installing Wayland is simple; there is not a great deal of configuration
for the protocol itself. Most of the composition will depend on the
chosen compositor. By installing seatd now, a step is skipped as part of
the compositor installation and configuration as seatd is needed to
provide non-root access to certain devices.

All of the compositors described here should work with graphics/drm-kmod
open source drivers; however, the NVidia graphics cards may have issues
when using the proprietary drivers. Begin by installing the following
packages:

    # pkg install wayland seatd

Once the protocol and supporting packages have been installed, a
compositor must create the user interface. Several compositors will be
covered in the following sections. All compositors using Wayland will
need a runtime directory defined in the environment, which can be
achieved with the following command in the bourne shell:

    % export XDG_RUNTIME_DIR=/var/run/user/`id -u`

It is important to note that most compositors will search the
XDG_RUNTIME_DIR directory for the configuration files. In the examples
included here, a parameter will be used to specify a configuration file
in ~/.config to keep temporary files and configuration files separate.
It is recommended that an alias be configured for each compositor to
load the designated configuration file.

+-----------------------------------+-----------------------------------+
|                                   | It has been reported that ZFS     |
|                                   | users may experience issues with  |
|                                   | some Wayland clients because they |
|                                   | need access to posix_fallocate()  |
|                                   | in the runtime directory. While   |
|                                   | the author could not reproduce    |
|                                   | this issue on their ZFS system, a |
|                                   | recommended workaround is not to  |
|                                   | use ZFS for the runtime directory |
|                                   | and instead use tmpfs for the     |
|                                   | /var/run directory. In this case, |
|                                   | the tmpfs file system is used for |
|                                   | /var/run and mounted through the  |
|                                   | command                           |
|                                   | mount -t tmpfs tmpfs /var/run     |
|                                   | command and then make this change |
|                                   | persist across reboots through    |
|                                   | /etc/fstab. The XDG_RUNTIME_DIR   |
|                                   | environment variable could be     |
|                                   | configured to use                 |
|                                   | /var/run/user/$UID and avoid      |
|                                   | potential pitfalls with ZFS.      |
|                                   | Consider that scenario when       |
|                                   | reviewing the configuration       |
|                                   | examples in the following         |
|                                   | sections.                         |
+-----------------------------------+-----------------------------------+

The seatd daemon helps manage access to shared system devices for
non-root users in compositors; this includes graphics cards. For
traditional X11 managers, seatd is not needed, such as both Plasma and
GNOME, but for the Wayland compositors discussed here, it will need
enabled on the system and be running before starting a compositor
environment. To enable and start the seatd daemon now, and on system
initialization:

    # sysrc seatd_enable=”YES”
    # service seatd start

Afterward, a compositor, which is similar to an X11 desktop, will need
to be installed for the GUI environment. Three are discussed here,
including basic configuration options, setting up a screen lock, and
recommendations for more information.

6.2. The Wayfire Compositor

Wayfire is a compositor that aims to be lightweight and customizable.
Several features are available, and it brings back several elements from
the previously released Compiz Fusion desktop. All of the parts look
beautiful on modern hardware. To get Wayfire up and running, begin by
installing the required packages:

    # pkg install wayfire wf-shell alacritty swaylock-effects swayidle wlogout kanshi mako wlsunset

The alacritty package provides a terminal emulator. Still, it is not
completely required as other terminal emulators such as kitty, and
XFCE-4 Terminal have been tested and verified to work under the Wayfire
compositor. Wayfire configuration is relatively simple; it uses a file
that should be reviewed for any customizations. To begin, copy the
example file over to the runtime environment configuration directory and
then edit the file:

    % mkdir ~/.config/wayfire
    % cp /usr/local/share/examples/wayfire/wayfire.ini ~/.config/wayfire

The defaults for most users should be fine. Within the configuration
file, items like the famous cube are pre-configured, and there are
instructions to help with the available settings. A few primary settings
of note include:

    [output]
    mode = 1920x1080@60000
    position = 0,0
    transform = normal
    scale = 1.000000

In this example, from the configuration file, the screen’s output should
be the listed mode at the listed hertz. For example, the mode should be
set to widthxheight@refresh_rate. The position places the output at a
specific pixel location specified. The default should be fine for most
users. Finally, transform sets a background transform, and scale will
scale the output to the specified scale factor. The defaults for these
options are generally acceptable; for more information, see the
documentation.

As mentioned, Wayland is new, and not all applications work with the
protocol yet. At this time, sddm does not appear to support starting and
managing compositors in Wayland. The swaylock utility has been used
instead in these examples. The configuration file contains options to
run swayidle and swaylock for idle and locking of the screen.

This option to define the action to take when the system is idle is
listed as:

    idle = swaylock

And the lock timeout is configured using the following lines:

    [idle]
    toggle = <super> KEY_Z
    screensaver_timeout = 300
    dpms_timeout = 600

The first option will lock the screen after 300 seconds, and after
another 300, the screen will shut off through the dpms_timeout option.

One final thing to note is the <super> key. Most of the configuration
mentions this key, and it is the traditional Windows key on the
keyboard. Most keyboards have this super key available; however, it
should be remapped within this configuration file if it is not
available. For example, to lock the screen, press and hold the super
key, the shift key, and press the escape key. nless the mappings have
changed, this will execute the swaylock application. The default
configuration for swaylock will show a grey screen; however, the
application is highly customizable and well documented. In addition,
since the swaylock-effects is the version that was installed, there are
several options available such as the blur effect, which can be seen
using the following command:

    % swaylock --effect-blur 7x5

There is also the --clock parameter which will display a clock with the
date and time on the lock screen. When x11/swaylock-effects was
installed, a default pam.d configuration was included. It provides the
default options that should be fine for most users. More advanced
options are available; see the PAM documentation for more information.

At this point, it is time to test Wayfire and see if it can start up on
the system. Just type the following command:

    % wayfire -c ~/.config/wayfire/wayfire.ini

The compositor should now start and display a background image along
with a menu bar at the top of the screen. Wayfire will attempt to list
installed compatible applications for the desktop and present them in
this drop-down menu; for example, if the XFCE-4 file manager is
installed, it will show up in this drop-down menu. If a specific
application is compatible and valuable enough for a keyboard shortcut,
it may be mapped to a keyboard sequence using the wayfire.ini
configuration file. Wayfire also has a configuration tool named Wayfire
Config Manager. It is located in the drop-down menu bar but may also be
started through a terminal by issuing the following command:

    % wcm

Various Wayfire configuration options, including the composite special
effects, maybe enabled, disabled, or configured through this
application. In addition, for a more user-friendly experience, a
background manager, panel, and docking application may be enabled in the
configuration file:

    panel = wf-panel
    dock = wf-dock
    background = wf-background

+-----------------------------------+-----------------------------------+
|                                   | Changes made through wcm will     |
|                                   | overwrite custom changes in the   |
|                                   | wayfire.ini configuration file.   |
|                                   | The wayfire.ini file is highly    |
|                                   | recommended to be backed up so    |
|                                   | any essential changes may be      |
|                                   | restored.                         |
+-----------------------------------+-----------------------------------+

Finally, the default launcher listed in the wayfire.ini is x11/wf-shell
which may be replaced with other panels if desired by the user.

6.3. The Hikari Compositor

The Hikari compositor uses several concepts centered around
productivity, such as sheets, workspaces, and more. In that way, it
resembles a tiling window manager. Breaking this down, the compositor
starts with a single workspace, which is similar to virtual desktops.
Hikari uses a single workspace or virtual desktop for user interaction.
The workspace is made up of several views, which are the working windows
in the compositor grouped as either sheets or groups. Both sheets and
groups are made up of a collection of views; again, the windows that are
grouped together. When switching between sheets or groups, the active
sheet or group will become known collectively as the workspace. The
manual page will break this down into more information on the functions
of each but for this document, just consider a single workspace
utilizing a single sheet. Hikari installation will comprise of a single
package, x11-wm/hikari, and a terminal emulator alacritty:

    # pkg install hikari alacritty

+-----------------------------------+-----------------------------------+
|                                   | Other shells, such as kitty or    |
|                                   | the Plasma Terminal, will         |
|                                   | function under Wayland. Users     |
|                                   | should experiment with their      |
|                                   | favorite terminal editor to       |
|                                   | validate compatibility.           |
+-----------------------------------+-----------------------------------+

Hikari uses a configuration file, hikari.conf, which could either be
placed in the XDG_RUNTIME_DIR or specified on startup using the -c
parameter. An autostart configuration file is not required but may make
the migration to this compositor a little easier. Beginning the
configuration is to create the Hikari configuration directory and copy
over the configuration file for editing:

    % mkdir ~/.config/hikari
    % cp /usr/local/etc/hikari/hikari.conf ~/.config/hikari

The configuration is broken out into various stanzas such as ui,
outputs, layouts, and more. For most users, the defaults will function
fine; however, some important changes should be made. For example, the
$TERMINAL variable is normally not set within the user’s environment.
Changing this variable or altering the hikari.conf file to read:

    terminal = "/usr/local/bin/alacritty"

Will launch the alacritty terminal using the bound key press. While
going through the configuration file, it should be noted that the
capital letters are used to map keys out for the user. For example, the
L key for starting the terminal L+Return is actually the previously
discussed super key or Windows logo key. Therefore, holding the
L/super/Windows key and pressing Enter will open the specified terminal
emulator with the default configuration. Mapping other keys to
applications require an action definition to be created. For this, the
action item should be listed in the actions stanza, for example:

    actions {
      terminal = "/usr/local/bin/alacritty"
      browser = "/usr/local/bin/firefox"
    }

Then an action may be mapped under the keyboard stanza, which is defined
within the bindings stanza:

    bindings {
      keyboard {
    SNIP
        "L+Return" = action-terminal
        "L+b" = action-browser
    SNIP

After Hikari is restarted, holding the Windows logo button and pressing
the b key on the keyboard will start the web browser. The compositor
does not have a menu bar, and it is recommended the user set up, at
minimal, a terminal emulator before migration. The manual page contains
a great deal of documentation it should be read before performing a full
migration. Another positive aspect about Hikari is that, while migrating
to the compositor, Hikari can be started in the Plasma and GNOME desktop
environments, allowing for a test-drive before completely migrating.

Locking the screen in Hikari is easy because a default pam.d
configuration file and unlock utility are bundled with the package. The
key binding for locking the screen is L (Windows logo key)+ Shift +
Backspace. It should be noted that all views not marked public will be
hidden. These views will never accept input when locked but beware of
sensitive information being visible. For some users, it may be easier to
migrate to a different screen locking utility such as swaylock-effects,
discussed in this section. To start Hikari, use the following command:

    % hikari -c ~/.config/hikari/hikari.conf

6.4. The Sway Compositor

The Sway compositor is a tiling compositor that attempts to replace the
i3 windows manager. It should work with the user’s current i3
configuration; however, new features may require some additional setup.
In the forthcoming examples, a fresh installation without migrating any
i3 configuration will be assumed. To install Sway and valuable
components, issue the following command as the root user:

    # pkg install sway swayidle swaylock-effects alacritty dmenu-wayland dmenu

For a basic configuration file, issue the following commands and then
edit the configuration file after it is copied:

    % mkdir ~/.config/sway
    % cp /usr/local/etc/sway/config ~/.config/sway

The base configuration file has many defaults, which will be fine for
most users. Several important changes should be made like the following:

    # Logo key. Use Mod1 for Alt.
    input * xkb_rules evdev
    set $mod Mod4
    # Your preferred terminal emulator
    set $term alacritty
    set $lock swaylock -f -c 000000
    output "My Workstation" mode 1366x786@60Hz position 1366 0
    output * bg ~/wallpapers/mywallpaper.png stretch
    ### Idle configuration
    exec swayidle -w \
              timeout 300 'swaylock -f -c 000000' \
              timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
              before-sleep 'swaylock -f -c 000000'

In the previous example, the xkb rules for evdev(4) events are loaded,
and the $mod key is set to the Windows logo key for the key bindings.
Next, the terminal emulator was set to be alacritty, and a screen lock
command was defined; more on this later. The output keyword, the mode,
the position, a background wallpaper, and Sway is also told to stretch
this wallpaper to fill out the screen. Finally, swaylock is set to
daemonize and lock the screen after a timeout of 300 seconds, placing
the screen or monitor into sleep mode after 600 seconds. The locked
background color of 000000, which is black, is also defined here. Using
swaylock-effects, a clock may also be displayed with the --clock
parameter. See the manual page for more options. The sway-output(5)
manual page should also be reviewed; it includes a great deal of
information on customing the output options available.

While in Sway, to bring up a menu of applications, hold the Windows logo
key (mod) and press the d key. The menu may be navigated using the arrow
keys on the keyboard. There is also a method to manipulate the layout of
the bar and add a tray; read the sway-bar(5) manual page for more
information. The default configuration adds a date and time to the upper
right-hand corner. See the Bar stanza in the configuration file for an
example. By default, the configuration does not include locking the
screen outside of the example above, enabling a lockout timer. Creating
a lock key binding requires the following line to the Key bindings
section:

    # Lock the screen manually
    bindsym $mod+Shift+Return exec $lock

Now the screen may be locked using the combination of holding the
Windows logo key, pressing and holding shift, and finally pressing
return. When Sway is installed, whether from a package or the FreeBSD
Ports Collection, a default file for pam.d was installed. The default
configuration should be acceptable for most users, but more advanced
options are available. Read through the PAM documentation for more
information.

Finally, to exit Sway and return to the shell, hold the Windows logo
key, the shift key, and press the e key. A prompt will be displayed with
an option to exit Sway. During migration, Sway can be started through a
terminal emulator on an X11 desktop such as Plasma. This makes testing
different changes and key bindings a little easier prior to fully
migrating to this compositor. To start Sway, issue the following
command:

    % sway -c ~/.config/sway/config

6.5. Using Xwayland

When installing Wayland, the Xwayland binary should have been installed
unless Wayland was built without X11 support. If the
/usr/local/bin/Xwayland file does not exist, install it using the
following command:

    # pkg install xwayland-devel

+-----------------------------------+-----------------------------------+
|                                   | The development version of        |
|                                   | Xwayland is recommended and was   |
|                                   | most likely installed with the    |
|                                   | Wayland package. Each compositor  |
|                                   | has a method of enabling or       |
|                                   | disabling this feature.           |
+-----------------------------------+-----------------------------------+

Once Xwayland has been installed, configure it within the chosen
compositor. For Wayfire, the following line is required in the
wayfire.ini file:

    xwayland = true

For the Sway compositor, Xwayland should be enabled by default. Even so,
it is recommened to manually add a configuration line in the
~/.config/sway/config like the following:

    xwayland enable

Finally, for Hikari, no changes are needed. Support for Xwayland is
build in by default. To disable that support, rebuild the package from
the ports collection and disable Xwayland support at that time.

After these changes are made, start the compositor at the command line
and execute a terminal from the key bindings. Within this terminal,
issue the env command and search for the DISPLAY variables. If the
compositor was able to properly start the Xwayland X server, these
environment variables should look similar to the following:

    % env | grep DISPLAY

    WAYLAND_DISPLAY=wayland-1
    DISPLAY=:0

In this output, there is a default Wayland display and a display set for
the Xwayland server. Another method to verify that Xwayland is
functioning properly is to use install and test the small
package:[x11/eyes] and check the output. If the xeyes application starts
and the eyes follow the mouse pointer, Xwayland is functioning properly.
If an error such as the following is displayed, something happened
during the Xwayland intitialization and it may need reinstalled:

    Error: Cannot open display wayland-0

+-----------------------------------+-----------------------------------+
|                                   | A security feature of Wayland is  |
|                                   | that, without running an X        |
|                                   | server, there is not another      |
|                                   | network listener. Once Xwayland   |
|                                   | is enabled, this security feature |
|                                   | is no longer applicable to the    |
|                                   | system.                           |
+-----------------------------------+-----------------------------------+

For some compositors, such as Wayfire, Xwayland may not start properly.
As such, env will show the following information for the DISPLAY
environment variables:

    % env | grep DISPLAY

    DISPLAY=wayland-1
    WAYLAND_DISPLAY=wayland-1

Even though Xwayfire was installed and configured, X11 applications will
not start giving a display issue. To work around this, verify that there
is already an instance of Xwayland using a UNIX socket through these two
methods. First, check the output from sockstat and search for X11-unix:

    % sockstat | grep x11

There should be something similar to the following information:

    trhodes  Xwayland   2734  8  stream /tmp/.X11-unix/X0
    trhodes  Xwayland   2734  9  stream /tmp/.X11-unix/X0
    trhodes  Xwayland   2734  10 stream /tmp/.X11-unix/X0
    trhodes  Xwayland   2734  27 stream /tmp/.X11-unix/X0_
    trhodes  Xwayland   2734  28 stream /tmp/.X11-unix/X0

This suggests the existence of an X11 socket. This can be further
verified by attempting to execute Xwayland manually within a terminal
emulator running under the compositor:

    % Xwayland

If an X11 socket is already available, the following error should be
presented to the user:

    (EE)
    Fatal server error:
    (EE) Server is already active for display 0
        If this server is no longer running, remove /tmp/.X0-lock
        and start again.
    (EE)

Since there is an active X display available using display zero, the
environment variable was just set improperly, to fix this, change the
DISPLAY environment variable to :0 and attempt to execute the
application again. The following example uses mail/claws-mail as the
application which needs the Xwayland service:

    export DISPLAY=:0

After this change, the mail/claws-mail application should now start
using Xwayland and function as expected.

6.6. Remote Desktop Using VNC

Earlier in this document it was noted that Wayland does not provide the
same X server style access as Xorg provides. Instead, users are free to
pick and choose a remote desktop protocol such as RDP or VNC. The
FreeBSD Ports collection includes the wayvnc, which will support wlroots
based compositors such as the ones discussed here. This application may
be installed using:

    # pkg install wayvnc

Unlike some other packages, wayvnc does not come with a configuration
file. Thankfully, the manual page documents the important options and
they may be extrapolated into a simple configuration file:

    address=0.0.0.0
    enable_auth=true
    username=username
    password=password
    private_key_file=/path/to/key.pem
    certificate_file=/path/to/cert.pem

The key files will need to be generated, and it is highly recommended
they be used for increased security of the connection. When invoked,
wayvnc will search for the configuration file in
~/.config/wayvnc/config. This could be overwritten using the
-C configuration_file option when starting the server. Thus, to start
the wayvnc server, issue the following command:

    % wayvnc -C ~/.config/wayvnc/config

+-----------------------------------+-----------------------------------+
|                                   | At the time of this writing,      |
|                                   | there is no rc.d script to start  |
|                                   | wayvnc on system initialization.  |
|                                   | If that functionality is desired, |
|                                   | a local startup file will need to |
|                                   | be created. This is probably a    |
|                                   | feature request for the port      |
|                                   | maintainer.                       |
+-----------------------------------+-----------------------------------+

6.7. Wayland Login Manager

While several login managers exist and are slowly migrating to Wayland,
one option is the x11/ly text user interface (TUI) manager. Needing
minimal configuration, ly will start Sway, Wayfire, and others by
presenting a login window on system initialization. To install ly, issue
the following command:

    # pkg install ly

There will be some configuration hints presented, the import steps are
to add the following lines to /etc/gettytab:

    Ly:\
      :lo=/usr/local/bin/ly:\
      :al=root:

And then modify the ttyv1 line in /etc/ttys to match the following line:

    ttyv1 "/usr/libexec/getty Ly" xterm onifexists secure

After a system reboot, a login should appear. To configure specific
settings, such as language and edit /usr/local/etc/ly/config.ini. At
minimal, this file should have the designated tty that was previously
specified in /etc/ttys.

+-----------------------------------+-----------------------------------+
|                                   | If setting ttyv0 up as the login  |
|                                   | terminal, it may be required to   |
|                                   | press the alt and F1 keys to      |
|                                   | properly see the login window.    |
+-----------------------------------+-----------------------------------+

When the login window appears, using the left and right arrows will swap
through different, supported, window managers.

6.8. Useful Utilities

One useful Wayland utility which all compositors can make use of is the
waybar. While Wayfire does come with a launch menu, an easy-to-use and
fast taskbar is a good accessory for any compositor or desktop manager.
A Wayland compatible taskbar that is fast and easy to configure is
waybar. To install the package and a supporting audio control utility,
issue the following command:

    # pkg install pavucontrol waybar

To create the configuration directory and copy over a default
configuration file, execute the following commands:

    % mkdir ~/.config/waybar
    % cp /usr/local/etc/xdg/waybar/config ~/.config/waybar

The lavalauncher utility provides a launch bar for various applications.
There is no example configuration file provided with the package, so the
following actions must be taken:

    mkdir ~/.config/lavalauncher

An example configuration file that only includes Firefox, and is placed
on the right, is below:

    global-settings {
        watch-config-file = true;
    }

    bar {
        output            = eDP-1;
        position          = bottom;
        background-colour = "#202020";

        # Condition for the default configuration set.
        condition-resolution = wider-than-high;

        config {
            position = right;
        }

        button {
            image-path          =     /usr/local/lib/firefox/browser/chrome/icons/default/default48.png;
            command[mouse-left] =     /usr/local/bin/firefox;
        }
        button {
          image-path           =   /usr/local/share/pixmaps/thunderbird.png;
          command[mouse-left]  =   /usr/local/bin/thunderbird;
    }

------------------------------------------------------------------------

Last modified on: July 6, 2023 by Sergio Carlavilla Delgado

Prev

Home

Next

Table of Contents

-   6.1. Wayland Synopsis
-   6.2. The Wayfire Compositor
-   6.3. The Hikari Compositor
-   6.4. The Sway Compositor
-   6.5. Using Xwayland
-   6.6. Remote Desktop Using VNC
-   6.7. Wayland Login Manager
-   6.8. Useful Utilities

------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

