
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 9. pkg-*

Table of Contents

-   9.1. pkg-message
-   9.2. pkg-install, pkg-pre-install, and pkg-post-install
-   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
-   9.4. Changing the Names of pkg-*
-   9.5. Making Use of SUB_FILES and SUB_LIST

There are some tricks we have not mentioned yet about the pkg-* files
that come in handy sometimes.

9.1. pkg-message

To display a message when the package is installed, place the message in
pkg-message. This capability is often useful to display additional
installation steps to be taken after a pkg install or pkg upgrade.

+-----------------------------------+-----------------------------------+
|                                   | -   pkg-message must contain only |
|                                   |     information that is vital to  |
|                                   |     setup and operation on        |
|                                   |     FreeBSD, and that is unique   |
|                                   |     to the port in question.      |
|                                   |                                   |
|                                   | -   Setup information should only |
|                                   |     be shown on initial install.  |
|                                   |     Upgrade instructions should   |
|                                   |     be shown only when upgrading  |
|                                   |     from the relevant version.    |
|                                   |                                   |
|                                   | -   Do not surround the messages  |
|                                   |     with either whitespace or     |
|                                   |     lines of symbols (like        |
|                                   |     ----------, , or ==========). |
|                                   |     Leave the formatting to       |
|                                   |     pkg(8).                       |
|                                   |                                   |
|                                   | -   Committers have blanket       |
|                                   |     approval to constrain         |
|                                   |     existing messages to install  |
|                                   |     or upgrade ranges using the   |
|                                   |     UCL format specifications.    |
|                                   |                                   |
|                                   | -   Please be sure to refer to    |
|                                   |     the proper tools for handling |
|                                   |     services.                     |
|                                   |                                   |
|                                   |     -   Use service name start to |
|                                   |         start a service rather    |
|                                   |         than using                |
|                                   |                                   |
|                                   |    /usr/local/etc/rc.d/name start |
|                                   |                                   |
|                                   |     -   Use sysrc name_enable=YES |
|                                   |         to change options in      |
|                                   |         rc.conf                   |
+-----------------------------------+-----------------------------------+

pkg-message supports two formats:

raw

    A regular plain text file. Its message is only displayed on install.

UCL

    If the file starts with “[” then it is considered to be a UCL file.
    The UCL format is described on libucl’s GitHub page.

+-----------------------------------+-----------------------------------+
|                                   | Do not add an entry for           |
|                                   | pkg-message in pkg-plist.         |
+-----------------------------------+-----------------------------------+

9.1.1. UCL in pkg-message

The format is the following. It should be an array of objects. The
objects themselves can have these keywords:

message

    The actual message to be displayed. This keyword is mandatory.

type

    When the message should be displayed.

maximum_version

    Only if type is upgrade. Display if upgrading from a version
    strictly lower than the version specified.

minimum_version

    Only if type is upgrade. Display if upgrading from a version
    strictly greater than the version specified.

The maximum_version and minimum_version keywords can be combined.

The type keyword can have three values:

install

    The message should only be displayed when the package is installed.

remove

    The message should only be displayed when the package is removed.

upgrade

    the message should only be displayed during an upgrade of the
    package..

+-----------------------------------+-----------------------------------+
|                                   | To preserve the compatibility     |
|                                   | with non UCL pkg-message files,   |
|                                   | the first line of a UCL           |
|                                   | pkg-message MUST be a single “[”, |
|                                   | and the last line MUST be a       |
|                                   | single “]”.                       |
+-----------------------------------+-----------------------------------+

Example 1. UCL Short Strings

The message is delimited by double quotes ", this is used for simple
single line strings:

    [
    { type: install
      message: "Simple message"
    }
    ]

Example 2. UCL Multiline Strings

Multiline strings use the standard here document notation. The multiline
delimiter must start just after << symbols without any whitespace and it
must consist of capital letters only. To finish a multiline string, add
the delimiter string on a line of its own without any whitespace. The
message from UCL Short Strings can be written as:

    [
    { type: install
      message: <<EOM
    Simple message
    EOM
    }
    ]

Example 3. Display a Message on Install/Deinstall

When a message only needs to be displayed on installation or
uninstallation, set the type:

    [
    {
      type: remove
      message: "package being removed."
    }
    { type: install, message: "package being installed."}
    ]

Example 4. Display a Message on Upgrade

When a port is upgraded, the message displayed can be even more tailored
to the port’s needs.

    [
    {
      type: upgrade
      message: "Package is being upgraded."
    }
    {
      type: upgrade
      maximum_version: "1.0"
      message: "Upgrading from before 1.0 need to do this."
    }
    {
      type: upgrade
      minimum_version: "1.0"
      message: "Upgrading from after 1.0 should do that."
    }
    {
      type: upgrade
      maximum_version: "3.0"
      minimum_version: "1.0"
      message: "Upgrading from > 1.0 and < 3.0 remove that file."
    }
    ]

When displaying a message on upgrade, it is important to limit when it
is being shown to the user. Most of the time it is by using
maximum_version to limit its usage to upgrades from before a certain
version when something specific needs to be done.

9.2. pkg-install, pkg-pre-install, and pkg-post-install

If the port needs to execute commands when the binary package is
installed with pkg add or pkg install, use pkg-install. It is run twice
by pkg, the first time as ${SH} pkg-install ${PKGNAME} PRE-INSTALL
before the package is installed, and the second time as
${SH} pkg-install ${PKGNAME} POST-INSTALL after it has been installed.
$2 can be tested to determine which mode the script is being run in. The
PKG_PREFIX environment variable is set to the package installation
directory.

If using pkg-pre-install or pkg-post-install instead, the script is run
only once (before or after installing the package), with the single
argument ${PKGNAME}. Using pkg-pre-install.lua or pkg-post-install.lua
will run a lua script instead of a shell script. Lua scripts run by pkg
provide some extensions and a few restrictions, both explained in
pkg-lua-script(5).

+-----------------------------------+-----------------------------------+
|                                   | Using pkg-pre-install (or         |
|                                   | pkg-pre-install.lua) and          |
|                                   | pkg-post-install (or              |
|                                   | pkg-post-install.lua) is          |
|                                   | preferred to using pkg-install.   |
+-----------------------------------+-----------------------------------+

These scripts are automatically added to the packing list.

+-----------------------------------+-----------------------------------+
|                                   | These scripts are here to         |
|                                   | simplify package configuration    |
|                                   | after installation. They must not |
|                                   | be abused to start services, stop |
|                                   | services, or run any other        |
|                                   | commands that will modify the     |
|                                   | currently running system.         |
+-----------------------------------+-----------------------------------+

9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall

These scripts execute when a package is removed.

The pkg-deinstall script is run twice by pkg delete. The first time as
${SH} pkg-deinstall ${PKGNAME} DEINSTALL before the port is de-installed
and the second time as ${SH} pkg-deinstall ${PKGNAME} POST-DEINSTALL
after the port has been de-installed. $2 can be tested to determine
which mode the script is being run in. The PKG_PREFIX environment
variable is set to the package installation directory.

If using pkg-pre-deinstall or pkg-post-deinstall instead, the script is
run only once (before or after deinstalling the package), with the
single argument ${PKGNAME}. Using pkg-pre-deinstall.lua or
pkg-post-deinstall.lua will run a lua script instead of a shell script.
Lua scripts run by pkg provide some extensions and a few restrictions,
both explained in pkg-lua-script(5).

+-----------------------------------+-----------------------------------+
|                                   | Using pkg-pre-deinstall (or       |
|                                   | pkg-pre-deinstall.lua) and        |
|                                   | pkg-post-deinstall (or            |
|                                   | pkg-post-deinstall.lua) is        |
|                                   | preferred to using pkg-deinstall. |
+-----------------------------------+-----------------------------------+

These scripts are automatically added to the packing list.

+-----------------------------------+-----------------------------------+
|                                   | These scripts are here to         |
|                                   | simplify cleanup after package    |
|                                   | deinstallation. They must not be  |
|                                   | abused to start services, stop    |
|                                   | services, or run any other        |
|                                   | commands that will modify the     |
|                                   | currently running system.         |
+-----------------------------------+-----------------------------------+

9.4. Changing the Names of pkg-*

All the names of pkg-* are defined using variables that can be changed
in the Makefile if needed. This is especially useful when sharing the
same pkg-* files among several ports or when it is necessary to write to
one of these files. See writing to places other than WRKDIR for why it
is a bad idea to write directly into the directory containing the pkg-*
files.

Here is a list of variable names and their default values. (PKGDIR
defaults to ${MASTERDIR}.)

+-----------------------------------+-----------------------------------+
| Variable                          | Default value                     |
+===================================+===================================+
| DESCR                             | ${PKGDIR}/pkg-descr               |
+-----------------------------------+-----------------------------------+
| PLIST                             | ${PKGDIR}/pkg-plist               |
+-----------------------------------+-----------------------------------+
| PKGINSTALL                        | ${PKGDIR}/pkg-install             |
+-----------------------------------+-----------------------------------+
| PKGPREINSTALL                     | ${PKGDIR}/pkg-pre-install         |
+-----------------------------------+-----------------------------------+
| PKGPOSTINSTALL                    | ${PKGDIR}/pkg-post-install        |
+-----------------------------------+-----------------------------------+
| PKGDEINSTALL                      | ${PKGDIR}/pkg-deinstall           |
+-----------------------------------+-----------------------------------+
| PKGPREDEINSTALL                   | ${PKGDIR}/pkg-pre-deinstall       |
+-----------------------------------+-----------------------------------+
| PKGPOSTDEINSTALL                  | ${PKGDIR}/pkg-post-deinstall      |
+-----------------------------------+-----------------------------------+
| PKGMESSAGE                        | ${PKGDIR}/pkg-message             |
+-----------------------------------+-----------------------------------+

9.5. Making Use of SUB_FILES and SUB_LIST

SUB_FILES and SUB_LIST are useful for dynamic values in port files, such
as the installation PREFIX in pkg-message.

SUB_FILES specifies a list of files to be automatically modified. Each
file in the SUB_FILES list must have a corresponding file.in present in
FILESDIR. A modified version will be created as ${WRKDIR}/file. Files
defined as a value of USE_RC_SUBR are automatically added to SUB_FILES.
For the files pkg-message, pkg-install, and pkg-deinstall, the
corresponding Makefile variable is automatically set to point to the
processed version.

SUB_LIST is a list of VAR=VALUE pairs. For each pair, %%VAR%% will be
replaced with VALUE in each file listed in SUB_FILES. Several common
pairs are automatically defined: PREFIX, LOCALBASE, DATADIR, DOCSDIR,
EXAMPLESDIR, WWWDIR, and ETCDIR. Any line beginning with @comment
followed by a space, will be deleted from resulting files after a
variable substitution.

This example replaces %%ARCH%% with the system architecture in a
pkg-message:

    SUB_FILES= pkg-message
    SUB_LIST=   ARCH=${ARCH}

Note that for this example, pkg-message.in must exist in FILESDIR.

Example of a good pkg-message.in:

    Now it is time to configure this package.
    Copy %%PREFIX%%/shared/examples/putsy/%%ARCH%%.conf into your home directory
    as .putsy.conf and edit it.

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: May 23, 2023 by Sven Ruediger

Prev

Home

Next

Table of Contents

-   9.1. pkg-message
-   9.2. pkg-install, pkg-pre-install, and pkg-post-install
-   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
-   9.4. Changing the Names of pkg-*
-   9.5. Making Use of SUB_FILES and SUB_LIST

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

