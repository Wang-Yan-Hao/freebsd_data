
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 11. Upgrading a Port

Table of Contents

-   11.1. Using Git to Make Patches
-   11.2. UPDATING and MOVED

When a port is not the most recent version available from the authors,
update the local working copy of /usr/ports. The port might have already
been updated to the new version.

When working with more than a few ports, it will probably be easier to
use Git to keep the whole ports collection up-to-date, as described in
the Handbook. This will have the added benefit of tracking all the
port’s dependencies.

The next step is to see if there is an update already pending. To do
this, there are two options. There is a searchable interface to the
FreeBSD Problem Report (PR) or bug database. Select Ports & Packages in
the Product multiple select menu, and enter the name of the port in the
Summary field.

If there is no pending PR, the next step is to send an email to the
port’s maintainer, as shown by make maintainer. That person may already
be working on an upgrade, or have a reason to not upgrade the port right
now (because of, for example, stability problems of the new version),
and there is no need to duplicate their work. Note that unmaintained
ports are listed with a maintainer of ports@FreeBSD.org, which is just
the general ports mailing list, so sending mail there probably will not
help in this case.

If the maintainer asks you to do the upgrade or there is no maintainer,
then help out FreeBSD by preparing the update! Please do this by using
the diff(1) command in the base system.

To create a suitable diff for a single patch, copy the file that needs
patching to something.orig, save the changes to something and then
create the patch:

    % diff -u something.orig something > something.diff

Otherwise, either use the git diff method (Using Git to Make Patches) or
copy the contents of the port to an entire different directory and use
the result of the recursive diff(1) output of the new and old ports
directories (for example, if the modified port directory is called
superedit and the original is in our tree as superedit.bak, then save
the result of diff -ruN superedit.bak superedit). Either unified or
context diff is fine, but port committers generally prefer unified
diffs. Note the use of the -N option-this is the accepted way to force
diff to properly deal with the case of new files being added or old
files being deleted. Before sending us the diff, please examine the
output to make sure all the changes make sense. (In particular, make
sure to first clean out the work directories with make clean).

+-----------------------------------+-----------------------------------+
|                                   | If some files have been added,    |
|                                   | copied, moved, or removed, add    |
|                                   | this information to the problem   |
|                                   | report so that the committer      |
|                                   | picking up the patch will know    |
|                                   | what git(1) commands to run.      |
+-----------------------------------+-----------------------------------+

To simplify common operations with patch files, use make makepatch as
described in Patching. Other tools exists, like
/usr/ports/Tools/scripts/patchtool.py. Before using it, please read
/usr/ports/Tools/scripts/README.patchtool.

If the port is unmaintained, and you are actively using it, please
consider volunteering to become its maintainer. FreeBSD has over 4000
ports without maintainers, and this is an area where more volunteers are
always needed. (For a detailed description of the responsibilities of
maintainers, refer to the section in the Developer’s Handbook.)

To submit the diff, use the bug submit form (product Ports & Packages,
component Individual Port(s)). Always include the category with the port
name, followed by colon, and brief descripton of the issue. Examples:
category/portname: add FOO option; category/portname: Update to X.Y.
Please mention any added or deleted files in the message, as they have
to be explicitly specified to git(1) when doing a commit. Do not
compress or encode the diff.

Before submitting the bug, review the Writing the problem report section
in the Problem Reports article. It contains far more information about
how to write useful problem reports.

+-----------------------------------+-----------------------------------+
|                                   | If the upgrade is motivated by    |
|                                   | security concerns or a serious    |
|                                   | fault in the currently committed  |
|                                   | port, please notify the Ports     |
|                                   | Management Team                   |
|                                   | <portmgr@FreeBSD.org> to request  |
|                                   | immediate rebuilding and          |
|                                   | redistribution of the port’s      |
|                                   | package. Unsuspecting users of    |
|                                   | pkg will otherwise continue to    |
|                                   | install the old version via       |
|                                   | pkg install for several weeks.    |
+-----------------------------------+-----------------------------------+

+-----------------------------------+-----------------------------------+
|                                   | Please use diff(1) or git diff to |
|                                   | create updates to existing ports. |
|                                   | Other formats include the whole   |
|                                   | file and make it impossible to    |
|                                   | see just what has changed. When   |
|                                   | diffs are not included, the       |
|                                   | entire update might be ignored.   |
+-----------------------------------+-----------------------------------+

Now that all of that is done, read about how to keep up-to-date in
Keeping Up.

11.1. Using Git to Make Patches

When possible, please submit a git(1) patch or diff. They are easier to
handle than diffs between "new and old" directories. It is easier to see
what has changed, and to update the diff if something was modified in
the Ports Collection since the work on it began, or if the committer
asks for something to be fixed. Also, a patch generated with
git-format-patch(1) or git-diff(1) can be easily applied with git-am(1)
or git-apply(1) and will save some time for the committer. Finally, the
git patch generated by git-format-patch(1) includes your author
information and commit messages. These will be recorded in the log of
the repository and this is the recommended way to submit your changes.

    % git clone https://git.FreeBSD.org/ports.git ~/my_wrkdir  (1) (2)
    % cd ~/my_wrkdir

  --- --------------------------------------------------------------------------------------------------------------
  1   This can be anywhere, of course. Building ports is not limited to within /usr/ports/.
  2   git.FreeBSD.org is the FreeBSD public Git server. See FreeBSD Git Repository URL Table for more information.
  --- --------------------------------------------------------------------------------------------------------------

While in the port directory, make any changes that are needed. If
adding, moving, or removing a file, use git to track these changes:

    % git add new_file
    % git mv old_name new_name
    % git rm deleted_file

Make sure to check the port using the checklist in Testing the Port and
Checking the Port with portlint.

Also, update the checksum reference in distinfo with make makesum.

Before making the patch, fetch the latest repository and rebase the
changes on top of it. Watch and follow the output carefully. If any of
the files failed to rebase, it means that the upstream files changed
while you were editing the same file, and the conflicts need to be
resolved manually.

    % git fetch origin main
    % git rebase origin/main

Check the changes staged for the patch:

    % git status
    % git diff --staged

The last step is to make an unified diff or patch of the changes:

To generate a patch with git-format-patch(1):

    % git checkout -b my_branch
    % git commit
    % git format-patch main

This will generate a patch named like 0001-foo.patch. This is the
preferred way as it would include author identity, and it is also easier
when you are making a series of changes that are not meant to be
squashed together.

Alternatively, to generate an unified diff with git-diff(1):

    % git diff --staged > ../`make -VPKGNAME`.diff

This will generate a diff named like foo-1.2.3.diff. Where foo is
replaced with the first line of the commit message, i.e., the subject of
the commit message.

After patch has been created, you can switch to the main branch for
starting other developments.

    % git checkout main

Once the patch is accepted and merged, you can delete the local
development branch if you want:

    % git branch -D my_branch

+-----------------------------------+-----------------------------------+
|                                   | If files have been added, moved,  |
|                                   | or removed, include the git(1)    |
|                                   | add, mv, and rm commands that     |
|                                   | were used. git mv must be run     |
|                                   | before the patch can be applied.  |
|                                   | git add or git rm must be run     |
|                                   | after the patch is applied.       |
+-----------------------------------+-----------------------------------+

Send the patch following the problem report submission guidelines.

11.2. UPDATING and MOVED

11.2.1. /usr/ports/UPDATING

If upgrading the port requires special steps like changing configuration
files or running a specific program, it must be documented in this file.
The format of an entry in this file is:

    YYYYMMDD:
      AFFECTS: users of portcategory/portname
      AUTHOR: Your name <Your email address>

      Special instructions

+-----------------------------------+-----------------------------------+
|                                   | When including exact portmaster,  |
|                                   | portupgrade, and/or pkg           |
|                                   | instructions, please make sure to |
|                                   | get the shell escaping right. For |
|                                   | example, do not use:              |
|                                   |                                   |
|                                   |     # pkg                         |
|                                   | delete -g -f docbook-xml* docbook |
|                                   | -sk* docbook[2345]??-* docbook-4* |
|                                   |                                   |
|                                   | As shown, the command will only   |
|                                   | work with bourne shells. Instead, |
|                                   | use the form shown below, which   |
|                                   | will work with both bourne shell  |
|                                   | and c-shell:                      |
|                                   |                                   |
|                                   |     # pkg delete -                |
|                                   | g -f docbook-xml\* docbook-sk\* d |
|                                   | ocbook\[2345\]\?\?-\* docbook-4\* |
+-----------------------------------+-----------------------------------+

+-----------------------------------+-----------------------------------+
|                                   | It is recommended that the        |
|                                   | AFFECTS line contains a glob      |
|                                   | matching all the ports affected   |
|                                   | by the entry so that automated    |
|                                   | tools can parse it as easily as   |
|                                   | possible. If an update concerns   |
|                                   | all the existing BIND 9 versions  |
|                                   | the AFFECTS content must be       |
|                                   | users of dns/bind9*, it must not  |
|                                   | be users of BIND 9                |
+-----------------------------------+-----------------------------------+

11.2.2. /usr/ports/MOVED

This file is used to list moved or removed ports. Each line in the file
is made up of the name of the port, where the port was moved, when, and
why. If the port was removed, the section detailing where it was moved
can be left blank. Each section must be separated by the | (pipe)
character, like so:

    old name|new name (blank for deleted)|date of move|reason

The date must be entered in the form YYYY-MM-DD. New entries are added
to the end of the list to keep it in chronological order, with the
oldest entry at the top of the list.

If a port was removed but has since been restored, delete the line in
this file that states that it was removed.

If a port was renamed and then renamed back to its original name, add a
new one with the intermediate name to the old name, and remove the old
entry as to not create a loop.

+-----------------------------------+-----------------------------------+
|                                   | Any changes must be validated     |
|                                   | with Tools/scripts/MOVEDlint.awk. |
|                                   |                                   |
|                                   | If using a ports directory other  |
|                                   | than /usr/ports, use:             |
|                                   |                                   |
|                                   |     % cd /home/user/ports         |
|                                   |     % env PORTSDIR                |
|                                   | =$PWD Tools/scripts/MOVEDlint.awk |
+-----------------------------------+-----------------------------------+

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: September 29, 2022 by Ricardo Fraile

Prev

Home

Next

Table of Contents

-   11.1. Using Git to Make Patches
-   11.2. UPDATING and MOVED

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

