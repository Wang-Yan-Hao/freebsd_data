
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 7. Flavors

Table of Contents

-   7.1. An Introduction to Flavors
-   7.2. Using FLAVORS
-   7.3. USES=php and Flavors
-   7.4. USES=python and Flavors
-   7.5. USES=lua and Flavors

7.1. An Introduction to Flavors

Flavors are a way to have multiple variations of a port. The port is
built multiple times, with variations.

For example, a port can have a normal version with many features and
quite a few dependencies, and a light "lite" version with only basic
features and minimal dependencies.

Another example could be, a port can have a GTK flavor and a QT flavor,
depending on which toolkit it uses.

7.2. Using FLAVORS

To declare a port having multiple flavors, add FLAVORS to its Makefile.
The first flavor in FLAVORS is the default flavor.

+-----------------------------------+-----------------------------------+
|                                   | It can help simplify the logic of |
|                                   | the Makefile to also define       |
|                                   | FLAVOR as:                        |
|                                   |                                   |
|                                   |     FLAVOR?= ${FLAVORS:[1]}       |
+-----------------------------------+-----------------------------------+

+-----------------------------------+-----------------------------------+
|                                   | To distinguish flavors from       |
|                                   | options, which are always         |
|                                   | uppercase letters, flavor names   |
|                                   | can only contain lowercase        |
|                                   | letters, numbers, and the         |
|                                   | underscore _.                     |
+-----------------------------------+-----------------------------------+

Example 1. Basic Flavors Usage

If a port has a "lite" slave port, the slave port can be removed, and
the port can be converted to flavors with:

    FLAVORS=    default lite
    lite_PKGNAMESUFFIX= -lite
    [...]
    .if ${FLAVOR:U} != lite
    [enable non lite features]
    .endif

Example 2. Another Basic Flavors Usage

If a port has a -nox11 slave port, the slave port can be removed, and
the port can be converted to flavors with:

    FLAVORS=   x11 nox11
    FLAVOR?=    ${FLAVORS:[1]}
    nox11_PKGNAMESUFFIX=    -nox11
    [...]
    .if ${FLAVOR} == x11
    [enable x11 features]
    .endif

Example 3. More Complex Flavors Usage

Here is a slightly edited excerpt of what is present in devel/libpeas, a
port that uses the Python flavors. With the default Python 2 and 3
versions being 2.7 and 3.6, it will automatically get FLAVORS=py27 py36

    USES=        gnome python
    USE_PYTHON= flavors

    .if ${FLAVOR:Upy27:Mpy2*}
    USE_GNOME=  pygobject3

    CONFIGURE_ARGS+=    --enable-python2 --disable-python3

    BUILD_WRKSRC=   ${WRKSRC}/loaders/python
    INSTALL_WRKSRC= ${WRKSRC}/loaders/python
    .else # py3*
    USE_GNOME+= py3gobject3

    CONFIGURE_ARGS+=    --disable-python2 --enable-python3 \
                ac_cv_path_PYTHON3_CONFIG=${LOCALBASE}/bin/python${PYTHON_VER}-config

    BUILD_WRKSRC=   ${WRKSRC}/loaders/python3
    INSTALL_WRKSRC= ${WRKSRC}/loaders/python3
    .endif

    py34_PLIST= ${.CURDIR}/pkg-plist-py3
    py35_PLIST= ${.CURDIR}/pkg-plist-py3
    py36_PLIST= ${.CURDIR}/pkg-plist-py3

This port does not use USE_PYTHON=distutils but needs Python flavors
anyway. To guard against FLAVOR being empty, which would cause a make(1)
error, use ${FLAVOR:U} in string comparisons instead of ${FLAVOR}. The
Gnome Python gobject3 bindings have two different names, one for Python
2, pygobject3 and one for Python 3, py3gobject3. The configure script
has to run in ${WRKSRC}, but we are only interested in building and
installing the Python 2 or Python 3 parts of the software, so set the
build and install base directories appropriately. Hint about the correct
Python 3 config script path name. The packing list is different when the
built with Python 3. As there are three possible Python 3 versions, set
PLIST for all three using the helper.

7.2.1. Flavors Helpers

To make the Makefile easier to write, a few flavors helpers exist.

This list of helpers will set their variable:

-   flavor_PKGNAMEPREFIX

-   flavor_PKGNAMESUFFIX

-   flavor_PLIST

-   flavor_DESCR

This list of helpers will append to their variable:

-   flavor_CONFLICTS

-   flavor_CONFLICTS_BUILD

-   flavor_CONFLICTS_INSTALL

-   flavor_PKG_DEPENDS

-   flavor_EXTRACT_DEPENDS

-   flavor_PATCH_DEPENDS

-   flavor_FETCH_DEPENDS

-   flavor_BUILD_DEPENDS

-   flavor_LIB_DEPENDS

-   flavor_RUN_DEPENDS

-   flavor_TEST_DEPENDS

Example 4. Flavor Specific PKGNAME

As all packages must have a different package name, flavors must change
theirs, using flavor_PKGNAMEPREFIX and flavor_PKGNAMESUFFIX makes this
easy:

    FLAVORS=   normal lite
    lite_PKGNAMESUFFIX= -lite

7.3. USES=php and Flavors

When using php with one of these arguments, phpize, ext, zend, or pecl,
the port will automatically have FLAVORS filled in with the PHP versions
it supports.

Example 5. Simple USES=php Extension

This will generate package for all the supported versions:

    PORTNAME=   some-ext
    PORTVERSION=    0.0.1
    PKGNAMEPREFIX=  ${PHP_PKGNAMEPREFIX}

    USES=       php:ext

This will generate package for all the supported versions but 7.2:

    PORTNAME= some-ext
    PORTVERSION=    0.0.1
    PKGNAMEPREFIX=  ${PHP_PKGNAMEPREFIX}

    USES=       php:ext
    IGNORE_WITH_PHP=    72

7.3.1. PHP Flavors with PHP Applications

PHP applications can also be flavorized.

This allows generating packages for all PHP versions, so that users can
use them with whatever version they need on their servers.

+-----------------------------------+-----------------------------------+
|                                   | PHP applications that are         |
|                                   | flavorized must append            |
|                                   | PHP_PKGNAMESUFFIX to their        |
|                                   | package names.                    |
+-----------------------------------+-----------------------------------+

Example 6. Flavorizing a PHP Application

Adding Flavors support to a PHP application is straightforward:

    PKGNAMESUFFIX= ${PHP_PKGNAMESUFFIX}

    USES=   php:flavors

+-----------------------------------+-----------------------------------+
|                                   | When adding a dependency on a PHP |
|                                   | flavored port, use                |
|                                   | @${PHP_FLAVOR}. Never use FLAVOR  |
|                                   | directly.                         |
+-----------------------------------+-----------------------------------+

7.4. USES=python and Flavors

When using python and USE_PYTHON=distutils, the port will automatically
have FLAVORS filled in with the Python versions it supports.

Example 7. Simple USES=python

Supposing the current Python supported versions are 2.7, 3.4, 3.5, and
3.6, and the default Python 2 and 3 versions are 2.7 and 3.6, a port
with:

    USES= python
    USE_PYTHON= distutils

Will get these flavors: py27, and py36.

    USES=    python
    USE_PYTHON= distutils allflavors

Will get these flavors: py27, py34, py35 and py36.

Example 8. USES=python with Version Requirements

Supposing the current Python supported versions are 2.7, 3.4, 3.5, and
3.6, and the default Python 2 and 3 versions are 2.7 and 3.6, a port
with:

    USES=   python:-3.5
    USE_PYTHON= distutils

Will get this flavor: py27.

    USES= python:-3.5
    USE_PYTHON= distutils allflavors

Will get these flavors: py27, py34, and py35.

    USES=  python:3.4+
    USE_PYTHON= distutils

Will get this flavor: py36.

    USES= python:3.4+
    USE_PYTHON= distutils allflavors

Will get these flavors: py34, py35, and py36.

PY_FLAVOR is available to depend on the correct version of Python
modules. All dependencies on flavored Python ports should use PY_FLAVOR,
and not FLAVOR directly..

Example 9. For a Port Not Using distutils

If the default Python 3 version is 3.6, the following will set PY_FLAVOR
to py36:

    RUN_DEPENDS=  ${PYTHON_PKGNAMEPREFIX}mutagen>0:audio/py-mutagen@${PY_FLAVOR}

    USES=   python:3.5+

7.5. USES=lua and Flavors

When using lua:module or lua:flavors, the port will automatically have
FLAVORS filled in with the Lua versions it supports. However, it is not
expected that ordinary applications (rather than Lua modules) should use
this feature; most applications that embed or otherwise use Lua should
simply use USES=lua.

LUA_FLAVOR is available (and must be used) to depend on the correct
version of dependencies regardless of whether the port used the flavors
or module parameters.

See Using Lua for further information.

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: April 10, 2023 by Sergio Carlavilla Delgado

Prev

Home

Next

Table of Contents

-   7.1. An Introduction to Flavors
-   7.2. Using FLAVORS
-   7.3. USES=php and Flavors
-   7.4. USES=python and Flavors
-   7.5. USES=lua and Flavors

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

