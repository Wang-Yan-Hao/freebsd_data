
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 8. Advanced pkg-plist Practices

Table of Contents

-   8.1. Changing pkg-plist Based on Make Variables
-   8.2. Empty Directories
-   8.3. Configuration Files
-   8.4. Dynamic Versus Static Package List
-   8.5. Automated Package List Creation
-   8.6. Expanding Package List with Keywords

8.1. Changing pkg-plist Based on Make Variables

Some ports, particularly the p5- ports, need to change their pkg-plist
depending on what options they are configured with (or version of perl,
in the case of p5- ports). To make this easy, any instances in pkg-plist
of %%OSREL%%, %%PERL_VER%%, and %%PERL_VERSION%% will be substituted
appropriately. The value of %%OSREL%% is the numeric revision of the
operating system (for example, 4.9). %%PERL_VERSION%% and %%PERL_VER%%
is the full version number of perl (for example, 5.8.9). Several other
%%VARS%% related to portâ€™s documentation files are described in the
relevant section.

To make other substitutions, set PLIST_SUB with a list of VAR=VALUE
pairs and instances of %%VAR%% will be substituted with VALUE in
pkg-plist.

For instance, if a port installs many files in a version-specific
subdirectory, use a placeholder for the version so that pkg-plist does
not have to be regenerated every time the port is updated. For example,
set:

    OCTAVE_VERSION= ${PORTREVISION}
    PLIST_SUB=  OCTAVE_VERSION=${OCTAVE_VERSION}

in the Makefile and use %%OCTAVE_VERSION%% wherever the version shows up
in pkg-plist. When the port is upgraded, it will not be necessary to
edit dozens (or in some cases, hundreds) of lines in pkg-plist.

If files are installed conditionally on the options set in the port, the
usual way of handling it is prefixing pkg-plist lines with a %%OPT%% for
lines needed when the option is enabled, or %%NO_OPT%% when the option
is disabled, and adding OPTIONS_SUB=yes to the Makefile. See OPTIONS_SUB
for more information.

For instance, if there are files that are only installed when the X11
option is enabled, and Makefile has:

    OPTIONS_DEFINE= X11
    OPTIONS_SUB=    yes

In pkg-plist, put %%X11%% in front of the lines only being installed
when the option is enabled, like this :

    %%X11%%bin/foo-gui

This substitution will be done between the pre-install and do-install
targets, by reading from PLIST and writing to TMPPLIST (default:
WRKDIR/.PLIST.mktmp). So if the port builds PLIST on the fly, do so in
or before pre-install. Also, if the port needs to edit the resulting
file, do so in post-install to a file named TMPPLIST.

Another way of modifying a portâ€™s packing list is based on setting the
variables PLIST_FILES and PLIST_DIRS. The value of each variable is
regarded as a list of pathnames to write to TMPPLIST along with PLIST
contents. While names listed in PLIST_FILES and PLIST_DIRS are subject
to %%VAR%% substitution as described above, it is better to use the
${VAR} directly. Except for that, names from PLIST_FILES will appear in
the final packing list unchanged, while @dir will be prepended to names
from PLIST_DIRS. To take effect, PLIST_FILES and PLIST_DIRS must be set
before TMPPLIST is written, that is, in pre-install or earlier.

From time to time, using OPTIONS_SUB is not enough. In those cases,
adding a specific TAG to PLIST_SUB inside the Makefile with a special
value of @comment, makes package tools to ignore the line. For instance,
if some files are only installed when the X11 option is on and the
architecture is i386:

    .include <bsd.port.pre.mk>

    .if ${PORT_OPTIONS:MX11} && ${ARCH} == "i386"
    PLIST_SUB+= X11I386=""
    .else
    PLIST_SUB+= X11I386="@comment "
    .endif

8.2. Empty Directories

8.2.1. Cleaning Up Empty Directories

When being de-installed, a port has to remove empty directories it
created. Most of these directories are removed automatically by pkg(8),
but for directories created outside of ${PREFIX}, or empty directories,
some more work needs to be done. This is usually accomplished by adding
@dir lines for those directories. Subdirectories must be deleted before
deleting parent directories.

    [...]
    @dir /var/games/oneko/saved-games
    @dir /var/games/oneko

8.2.2. Creating Empty Directories

Empty directories created during port installation need special
attention. They must be present when the package is created. If they are
not created by the port code, create them in the Makefile:

    post-install:
        ${MKDIR} ${STAGEDIR}${PREFIX}/some/directory

Add the directory to pkg-plist like any other. For example:

    @dir some/directory

8.3. Configuration Files

If the port installs configuration files to PREFIX/etc (or elsewhere) do
not list them in pkg-plist. That will cause pkg delete to remove files
that have been carefully edited by the user, and a re-installation will
wipe them out.

Instead, install sample files with a filename.sample extension. The
@sample macro automates this, see @sample file [file] for what it does
exactly. For each sample file, add a line to pkg-plist:

    @sample etc/orbit.conf.sample

If there is a very good reason not to install a working configuration
file by default, only list the sample filename in pkg-plist, without the
@sample followed by a space part, and add a message pointing out that
the user must copy and edit the file before the software will work.

+-----------------------------------+-----------------------------------+
|                                   | When a port installs its          |
|                                   | configuration in a subdirectory   |
|                                   | of ${PREFIX}/etc, use ETCDIR,     |
|                                   | which defaults to                 |
|                                   | ${PREFIX}/etc/${PORTNAME}, it can |
|                                   | be overridden in the ports        |
|                                   | Makefile if there is a convention |
|                                   | for the port to use some other    |
|                                   | directory. The %%ETCDIR%% macro   |
|                                   | will be used in its stead in      |
|                                   | pkg-plist.                        |
+-----------------------------------+-----------------------------------+

+-----------------------------------+-----------------------------------+
|                                   | The sample configuration files    |
|                                   | should always have the .sample    |
|                                   | suffix. If for some historical    |
|                                   | reason using the standard suffix  |
|                                   | is not possible, or if the sample |
|                                   | files come from some other        |
|                                   | directory, use this construct:    |
|                                   |                                   |
|                                   |     @sample e                     |
|                                   | tc/orbit.conf-dist etc/orbit.conf |
|                                   |                                   |
|                                   | or                                |
|                                   |                                   |
|                                   |     @sample %%EXAMPL              |
|                                   | ESDIR%%/orbit.conf etc/orbit.conf |
|                                   |                                   |
|                                   | The format is                     |
|                                   | @sampl                            |
|                                   | e sample-file actual-config-file. |
+-----------------------------------+-----------------------------------+

8.4. Dynamic Versus Static Package List

A static package list is a package list which is available in the Ports
Collection either as pkg-plist (with or without variable substitution),
or embedded into the Makefile via PLIST_FILES and PLIST_DIRS. Even if
the contents are auto-generated by a tool or a target in the Makefile
before the inclusion into the Ports Collection by a committer (for
example, using make makeplist), this is still considered a static list,
since it is possible to examine it without having to download or compile
the distfile.

A dynamic package list is a package list which is generated at the time
the port is compiled based upon the files and directories which are
installed. It is not possible to examine it before the source code of
the ported application is downloaded and compiled, or after running a
make clean.

While the use of dynamic package lists is not forbidden, maintainers
should use static package lists wherever possible, as it enables users
to grep(1) through available ports to discover, for example, which port
installs a certain file. Dynamic lists should be primarily used for
complex ports where the package list changes drastically based upon
optional features of the port (and thus maintaining a static package
list is infeasible), or ports which change the package list based upon
the version of dependent software used. For example, ports which
generate docs with Javadoc.

8.5. Automated Package List Creation

First, make sure the port is almost complete, with only pkg-plist
missing. Running make makeplist will show an example for pkg-plist. The
output of makeplist must be double checked for correctness as it tries
to automatically guess a few things, and can get it wrong.

User configuration files should be installed as filename.sample, as it
is described in Configuration Files. info/dir must not be listed and
appropriate install-info lines must be added as noted in the info files
section. Any libraries installed by the port must be listed as specified
in the shared libraries section.

8.5.1. Expanding PLIST_SUB with Regular Expressions

Strings to be replaced sometimes need to be very specific to avoid
undesired replacements. This is a common problem with shorter values.

To address this problem, for each PLACEHOLDER=value, a
PLACEHOLDER_regex=regex can be set, with the regex part matching value
more precisely.

Example 1. Using PLIST_SUB with Regular Expressions

Perl ports can install architecture dependent files in a specific tree.
On FreeBSD to ease porting, this tree is called mach. For example, a
port that installs a file whose path contains mach could have that part
of the path string replaced with the wrong values. Consider this
Makefile:

    PORTNAME= Machine-Build
    DISTVERSION=    1
    CATEGORIES= devel perl5
    MASTER_SITES=   CPAN
    PKGNAMEPREFIX=  p5-

    MAINTAINER= perl@FreeBSD.org
    COMMENT=    Building machine
    WWW=        https://search.cpan.org/dist/Machine-Build

    USES=       perl5
    USE_PERL5=  configure

    PLIST_SUB=  PERL_ARCH=mach

The files installed by the port are:

    /usr/local/bin/machine-build
    /usr/local/lib/perl5/site_perl/man/man1/machine-build.1.gz
    /usr/local/lib/perl5/site_perl/man/man3/Machine::Build.3.gz
    /usr/local/lib/perl5/site_perl/Machine/Build.pm
    /usr/local/lib/perl5/site_perl/mach/5.20/Machine/Build/Build.so

Running make makeplist wrongly generates:

    bin/%%PERL_ARCH%%ine-build
    %%PERL5_MAN1%%/%%PERL_ARCH%%ine-build.1.gz
    %%PERL5_MAN3%%/Machine::Build.3.gz
    %%SITE_PERL%%/Machine/Build.pm
    %%SITE_PERL%%/%%PERL_ARCH%%/%%PERL_VER%%/Machine/Build/Build.so

Change the PLIST_SUB line from the Makefile to:

    PLIST_SUB=  PERL_ARCH=mach \
            PERL_ARCH_regex=\bmach\b

Now make makeplist correctly generates:

    bin/machine-build
    %%PERL5_MAN1%%/machine-build.1.gz
    %%PERL5_MAN3%%/Machine::Build.3.gz
    %%SITE_PERL%%/Machine/Build.pm
    %%SITE_PERL%%/%%PERL_ARCH%%/%%PERL_VER%%/Machine/Build/Build.so

8.6. Expanding Package List with Keywords

All keywords can also take optional arguments in parentheses. The
arguments are owner, group, and mode. This argument is used on the file
or directory referenced. To change the owner, group, and mode of a
configuration file, use:

    @sample(games,games,640) etc/config.sample

The arguments are optional. If only the group and mode need to be
changed, use:

    @sample(,games,660) etc/config.sample

+-----------------------------------+-----------------------------------+
|                                   | If a keyword is used on an        |
|                                   | optional entry, it must to be     |
|                                   | added after the helper:           |
|                                   |                                   |
|                                   |     %%F                           |
|                                   | OO%%@sample etc/orbit.conf.sample |
|                                   |                                   |
|                                   | This is because the options plist |
|                                   | helpers are used to comment out   |
|                                   | the line, so they need to be put  |
|                                   | first. See OPTIONS_SUB for more   |
|                                   | information.                      |
+-----------------------------------+-----------------------------------+

8.6.1. @desktop-file-utils

Will run update-desktop-database -q after installation and
deinstallation. Never use directly, add USES=desktop-file-utils to the
Makefile.

8.6.2. @fc directory

Add a @dir entry for the directory passed as an argument, and run
fc-cache -fs on that directory after installation and deinstallation.

8.6.3. @fontsdir directory

Add a @dir entry for the directory passed as an argument, and run
mkfontscale and mkfontdir on that directory after installation and
deinstallation. Additionally, on deinstallation, it removes the
fonts.scale and fonts.dir cache files if they are empty.

8.6.4. @info file

Add the file passed as argument to the plist, and updates the info
document index on installation and deinstallation. Additionally, it
removes the index if empty on deinstallation. This should never be used
manually, but always through INFO. See Info Files for more information.

8.6.5. @kld directory

Runs kldxref on the directory on installation and deinstallation.
Additionally, on deinstallation, it will remove the directory if empty.

8.6.6. @rmtry file

Will remove the file on deinstallation, and not give an error if the
file is not there.

8.6.7. @sample file [file]

This is used to handle installation of configuration files, through
example files bundled with the package. The "actual", non-sample, file
is either the second filename, if present, or the first filename without
the .sample extension.

This does three things. First, add the first file passed as argument,
the sample file, to the plist. Then, on installation, if the actual file
is not found, copy the sample file to the actual file. And finally, on
deinstallation, remove the actual file if it has not been modified. See
Configuration Files for more information.

8.6.8. @shared-mime-info directory

Runs update-mime-database on the directory on installation and
deinstallation.

8.6.9. @shell file

Add the file passed as argument to the plist.

On installation, add the full path to file to /etc/shells, while making
sure it is not added twice. On deinstallation, remove it from
/etc/shells.

8.6.10. @terminfo

Do not use by itself. If the port installs *.terminfo files, add to its
Makefile.

On installation and deinstallation, if tic is present, refresh
${PREFIX}/shared/misc/terminfo.db from the *.terminfo files in
${PREFIX}/shared/misc.

8.6.11. Base Keywords

There are a few keywords that are hardcoded, and documented in
pkg-create(8). For the sake of completeness, they are also documented
here.

8.6.11.1. @ [file]

The empty keyword is a placeholder to use when the fileâ€™s owner, group,
or mode need to be changed. For example, to set the group of the file to
games and add the setgid bit, add:

    @(,games,2755) sbin/daemon

8.6.11.2. @preexec command, @postexec command, @preunexec command, @postunexec command

Execute command as part of the package installation or deinstallation
process.

@preexec command

    Execute command as part of the pre-install scripts.

@postexec command

    Execute command as part of the post-install scripts.

@preunexec command

    Execute command as part of the pre-deinstall scripts.

@postunexec command

    Execute command as part of the post-deinstall scripts.

If command contains any of these sequences somewhere in it, they are
expanded inline. For these examples, assume that @cwd is set to
/usr/local and the last extracted file was bin/emacs.

%F

    Expand to the last filename extracted (as specified). In the example
    case bin/emacs.

%D

    Expand to the current directory prefix, as set with @cwd. In the
    example case /usr/local.

%B

    Expand to the basename of the fully qualified filename, that is, the
    current directory prefix plus the last filespec, minus the trailing
    filename. In the example case, that would be /usr/local/bin.

%f

    Expand to the filename part of the fully qualified name, or the
    converse of %B. In the example case, emacs.

+-----------------------------------+-----------------------------------+
|                                   | These keywords are here to help   |
|                                   | you set up the package so that it |
|                                   | is as ready to use as possible.   |
|                                   | They must not be abused to start  |
|                                   | services, stop services, or run   |
|                                   | any other commands that will      |
|                                   | modify the currently running      |
|                                   | system.                           |
+-----------------------------------+-----------------------------------+

8.6.11.3. @mode mode

Set default permission for all subsequently extracted files to mode.
Format is the same as that used by chmod(1). Use without an arg to set
back to default permissions (mode of the file while being packed).

+-----------------------------------+-----------------------------------+
|                                   | This must be a numeric mode, like |
|                                   | 644, 4755, or 600. It cannot be a |
|                                   | relative mode like u+s.           |
+-----------------------------------+-----------------------------------+

8.6.11.4. @owner user

Set default ownership for all subsequent files to user. Use without an
argument to set back to default ownership (root).

8.6.11.5. @group group

Set default group ownership for all subsequent files to group. Use
without an arg to set back to default group ownership (wheel).

8.6.11.6. @comment string

This line is ignored when packing.

8.6.11.7. @dir directory

Declare directory name. By default, directories created under PREFIX by
a package installation are automatically removed. Use this when an empty
directory under PREFIX needs to be created, or when the directory needs
to have non default owner, group, or mode. Directories outside of PREFIX
need to be registered. For example, /var/db/${PORTNAME} needs to have a
@dir entry whereas ${PREFIX}/shared/${PORTNAME} does not if it contains
files or uses the default owner, group, and mode.

8.6.11.8. @exec command, @unexec command (Deprecated)

Execute command as part of the installation or deinstallation process.
Please use @preexec command, @postexec command, @preunexec command,
@postunexec command instead.

8.6.11.9. @dirrm directory (Deprecated)

Declare directory name to be deleted at deinstall time. By default,
directories created under PREFIX by a package installation are deleted
when the package is deinstalled.

8.6.11.10. @dirrmtry directory (Deprecated)

Declare directory name to be removed, as for @dirrm, but does not issue
a warning if the directory cannot be removed.

8.6.12. Creating New Keywords

Package list files can be extended by keywords that are defined in the
${PORTSDIR}/Keywords directory. The settings for each keyword are stored
in a UCL file named keyword.ucl. The file must contain at least one of
these sections:

-   attributes

-   action

-   pre-install

-   post-install

-   pre-deinstall

-   post-deinstall

-   pre-upgrade

-   post-upgrade

8.6.12.1. attributes

Changes the owner, group, or mode used by the keyword. Contains an
associative array where the possible keys are owner, group, and mode.
The values are, respectively, a user name, a group name, and a file
mode. For example:

    attributes: { owner: "games", group: "games", mode: 0555 }

8.6.12.2. action

Defines what happens to the keywordâ€™s parameter. Contains an array where
the possible values are:

setprefix

    Set the prefix for the next plist entries.

dir

    Register a directory to be created on install and removed on
    deinstall.

dirrm

    Register a directory to be deleted on deinstall. Deprecated.

dirrmtry

    Register a directory to try and deleted on deinstall. Deprecated.

file

    Register a file.

setmode

    Set the mode for the next plist entries.

setowner

    Set the owner for the next plist entries.

setgroup

    Set the group for the next plist entries.

comment

    Does not do anything, equivalent to not entering an action section.

ignore_next

    Ignore the next entry in the plist.

8.6.12.3. arguments

If set to true, adds argument handling, splitting the whole line, %@,
into numbered arguments, %1, %2, and so on. For example, for this line:

    @foo some.content other.content

%1 and %2 will contain:

    some.content
    other.content

It also affects how the action entry works. When there is more than one
argument, the argument number must be specified. For example:

    actions: [file(1)]

8.6.12.4. pre-install, post-install, pre-deinstall, post-deinstall, pre-upgrade, post-upgrade

These keywords contains a sh(1) script to be executed before or after
installation, deinstallation, or upgrade of the package. In addition to
the usual @exec %foo placeholders described in @preexec command,
@postexec command, @preunexec command, @postunexec command, there is a
new one, %@, which represents the argument of the keyword.

8.6.12.5. Custom Keyword Examples

Example 2. Example of a @dirrmtryecho Keyword

This keyword does two things, it adds a @dirrmtry directory line to the
packing list, and echoes the fact that the directory is removed when
deinstalling the package.

    actions: [dirrmtry]
    post-deinstall: <<EOD
      echo "Directory %D/%@ removed."
    EOD

Example 3. Real Life Example, How @sample is Implemented

This keyword does three things. It adds the first filename passed as an
argument to @sample to the packing list, it adds to the post-install
script instructions to copy the sample to the actual configuration file
if it does not already exist, and it adds to the post-deinstall
instructions to remove the configuration file if it has not been
modified.

    actions: [file(1)]
    arguments: true
    post-install: <<EOD
      case "%1" in
      /*) sample_file="%1" ;;
      *) sample_file="%D/%1" ;;
      esac
      target_file="${sample_file%.sample}"
      set -- %@
      if [ $# -eq 2 ]; then
          target_file=${2}
      fi
      case "${target_file}" in
      /*) target_file="${target_file}" ;;
      *) target_file="%D/${target_file}" ;;
      esac
      if ! [ -f "${target_file}" ]; then
        /bin/cp -p "${sample_file}" "${target_file}" && \
          /bin/chmod u+w "${target_file}"
      fi
    EOD
    pre-deinstall: <<EOD
      case "%1" in
      /*) sample_file="%1" ;;
      *) sample_file="%D/%1" ;;
      esac
      target_file="${sample_file%.sample}"
      set -- %@
      if [ $# -eq 2 ]; then
          set -- %@
          target_file=${2}
      fi
      case "${target_file}" in
      /*) target_file="${target_file}" ;;
      *) target_file="%D/${target_file}" ;;
      esac
      if cmp -s "${target_file}" "${sample_file}"; then
        rm -f "${target_file}"
      else
        echo "You may need to manually remove ${target_file} if it is no longer needed."
      fi
    EOD

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: September 7, 2022 by Stefan EÃŸer

Prev

Home

Next

Table of Contents

-   8.1. Changing pkg-plist Based on Make Variables
-   8.2. Empty Directories
-   8.3. Configuration Files
-   8.4. Dynamic Versus Static Package List
-   8.5. Automated Package List Creation
-   8.6. Expanding Package List with Keywords

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

