
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 12. Security

Table of Contents

-   12.1. Why Security is So Important
-   12.2. Fixing Security Vulnerabilities
-   12.3. Keeping the Community Informed

12.1. Why Security is So Important

Bugs are occasionally introduced to the software. Arguably, the most
dangerous of them are those opening security vulnerabilities. From the
technical viewpoint, such vulnerabilities are to be closed by
exterminating the bugs that caused them. However, the policies for
handling mere bugs and security vulnerabilities are very different.

A typical small bug affects only those users who have enabled some
combination of options triggering the bug. The developer will eventually
release a patch followed by a new version of the software, free of the
bug, but the majority of users will not take the trouble of upgrading
immediately because the bug has never vexed them. A critical bug that
may cause data loss represents a graver issue. Nevertheless, prudent
users know that a lot of possible accidents, besides software bugs, are
likely to lead to data loss, and so they make backups of important data;
in addition, a critical bug will be discovered really soon.

A security vulnerability is all different. First, it may remain
unnoticed for years because often it does not cause software
malfunction. Second, a malicious party can use it to gain unauthorized
access to a vulnerable system, to destroy or alter sensitive data; and
in the worst case the user will not even notice the harm caused. Third,
exposing a vulnerable system often assists attackers to break into other
systems that could not be compromised otherwise. Therefore closing a
vulnerability alone is not enough: notify the audience of it in the most
clear and comprehensive manner, which will allow them to evaluate the
danger and take appropriate action.

12.2. Fixing Security Vulnerabilities

While on the subject of ports and packages, a security vulnerability may
initially appear in the original distribution or in the port files. In
the former case, the original software developer is likely to release a
patch or a new version instantly. Update the port promptly with respect
to the author’s fix. If the fix is delayed for some reason, either mark
the port as FORBIDDEN or introduce a patch file to the port. In the case
of a vulnerable port, just fix the port as soon as possible. In either
case, follow the standard procedure for submitting changes unless having
rights to commit it directly to the ports tree.

+-----------------------------------+-----------------------------------+
|                                   | Being a ports committer is not    |
|                                   | enough to commit to an arbitrary  |
|                                   | port. Remember that ports usually |
|                                   | have maintainers, must be         |
|                                   | respected.                        |
+-----------------------------------+-----------------------------------+

Please make sure that the port’s revision is bumped as soon as the
vulnerability has been closed. That is how the users who upgrade
installed packages on a regular basis will see they need to run an
update. Besides, a new package will be built and distributed over FTP
and WWW mirrors, replacing the vulnerable one. Bump PORTREVISION unless
DISTVERSION has changed in the course of correcting the vulnerability.
That is, bump PORTREVISION if adding a patch file to the port, but do
not bump it if updating the port to the latest software version and thus
already touched DISTVERSION. Please refer to the corresponding section
for more information.

12.3. Keeping the Community Informed

12.3.1. The VuXML Database

A very important and urgent step to take as early after a security
vulnerability is discovered as possible is to notify the community of
port users about the jeopardy. Such notification serves two purposes.
First, if the danger is really severe it will be wise to apply an
instant workaround. For example, stop the affected network service or
even deinstall the port completely until the vulnerability is closed.
Second, a lot of users tend to upgrade installed packages only
occasionally. They will know from the notification that they must update
the package without delay as soon as a corrected version is available.

Given the huge number of ports in the tree, a security advisory cannot
be issued on each incident without creating a flood and losing the
attention of the audience when it comes to really serious matters.
Therefore security vulnerabilities found in ports are recorded in the
FreeBSD VuXML database. The Security Officer Team members also monitor
it for issues requiring their intervention.

Committers can update the VuXML database themselves, assisting the
Security Officer Team and delivering crucial information to the
community more quickly. Those who are not committers or have discovered
an exceptionally severe vulnerability should not hesitate to contact the
Security Officer Team directly, as described on the FreeBSD Security
Information page.

The VuXML database is an XML document. Its source file vuln.xml is kept
right inside the port security/vuxml. Therefore the file’s full pathname
will be PORTSDIR/security/vuxml/vuln.xml. Each time a security
vulnerability is discovered in a port, please add an entry for it to
that file. Until familiar with VuXML, the best thing to do is to find an
existing entry fitting the case at hand, then copy it and use it as a
template.

12.3.2. A Short Introduction to VuXML

The full-blown XML format is complex, and far beyond the scope of this
book. However, to gain basic insight on the structure of a VuXML entry
only the notion of tags is needed. XML tag names are enclosed in angle
brackets. Each opening <tag> must have a matching closing </tag>. Tags
may be nested. If nesting, the inner tags must be closed before the
outer ones. There is a hierarchy of tags, that is, more complex rules of
nesting them. This is similar to HTML. The major difference is that XML
is eXtensible, that is, based on defining custom tags. Due to its
intrinsic structure XML puts otherwise amorphous data into shape. VuXML
is particularly tailored to mark up descriptions of security
vulnerabilities.

Now consider a realistic VuXML entry:

    <vuln vid="f4bc80f4-da62-11d8-90ea-0004ac98a7b9"> (1)
      <topic>Several vulnerabilities found in Foo</topic> (2)
      <affects>
        <package>
          <name>foo</name> (3)
          <name>foo-devel</name>
          <name>ja-foo</name>
          <range><ge>1.6</ge><lt>1.9</lt></range> (4)
          <range><ge>2.*</ge><lt>2.4_1</lt></range>
          <range><eq>3.0b1</eq></range>
        </package>
        <package>
          <name>openfoo</name> (5)
          <range><lt>1.10_7</lt></range> (6)
          <range><ge>1.2,1</ge><lt>1.3_1,1</lt></range>
        </package>
      </affects>
      <description>
        <body xmlns="http://www.w3.org/1999/xhtml">
          <p>J. Random Hacker reports:</p> (7)
          <blockquote
            cite="http://j.r.hacker.com/advisories/1">
            <p>Several issues in the Foo software may be exploited
              via carefully crafted QUUX requests.  These requests will
              permit the injection of Bar code, mumble theft, and the
              readability of the Foo administrator account.</p>
          </blockquote>
        </body>
      </description>
      <references> (8)
        <freebsdsa>SA-10:75.foo</freebsdsa> (9)
        <freebsdpr>ports/987654</freebsdpr> (10)
        <cvename>CAN-2010-0201</cvename> (11)
        <cvename>CAN-2010-0466</cvename>
        <bid>96298</bid> (12)
        <certsa>CA-2010-99</certsa> (13)
        <certvu>740169</certvu> (14)
        <uscertsa>SA10-99A</uscertsa> (15)
        <uscertta>SA10-99A</uscertta> (16)
        <mlist msgid="201075606@hacker.com">http://marc.theaimsgroup.com/?l=bugtraq&amp;m=203886607825605</mlist> (17)
        <url>http://j.r.hacker.com/advisories/1</url> (18)
      </references>
      <dates>
        <discovery>2010-05-25</discovery> (19)
        <entry>2010-07-13</entry> (20)
        <modified>2010-09-17</modified> (21)
      </dates>
    </vuln>

The tag names are supposed to be self-explanatory so we shall take a
closer look only at fields which needs to be filled in:

  ----------------------------------- -----------------------------------
  1                                   This is the top-level tag of a
                                      VuXML entry. It has a mandatory
                                      attribute, vid, specifying a
                                      universally unique identifier
                                      (UUID) for this entry (in quotes).
                                      Generate a UUID for each new VuXML
                                      entry (and do not forget to
                                      substitute it for the template UUID
                                      unless writing the entry from
                                      scratch). Use uuidgen(1) to
                                      generate a VuXML UUID.

  2                                   This is a one-line description of
                                      the issue found.

  3                                   The names of packages affected are
                                      listed there. Multiple names can be
                                      given since several packages may be
                                      based on a single master port or
                                      software product. This may include
                                      stable and development branches,
                                      localized versions, and slave ports
                                      featuring different choices of
                                      important build-time configuration
                                      options.

  4                                   Affected versions of the package(s)
                                      are specified there as one or more
                                      ranges using a combination of <lt>,
                                      <le>, <eq>, <ge>, and <gt>
                                      elements. Check that the version
                                      ranges given do not overlap.
                                      In a range specification, *
                                      (asterisk) denotes the smallest
                                      version number. In particular, 2.*
                                      is less than 2.a. Therefore an
                                      asterisk may be used for a range to
                                      match all possible alpha, beta, and
                                      RC versions. For instance,
                                      <ge>2.</ge><lt>3.</lt> will
                                      selectively match every 2.x version
                                      while <ge>2.0</ge><lt>3.0</lt> will
                                      not since the latter misses 2.r3
                                      and matches 3.b.
                                      The above example specifies that
                                      affected are versions 1.6 and up to
                                      but not including 1.9, versions 2.x
                                      before 2.4_1, and version 3.0b1.

  5                                   Several related package groups
                                      (essentially, ports) can be listed
                                      in the <affected> section. This can
                                      be used if several software
                                      products (say FooBar, FreeBar and
                                      OpenBar) grow from the same code
                                      base and still share its bugs and
                                      vulnerabilities. Note the
                                      difference from listing multiple
                                      names within a single <package>
                                      section.

  6                                   The version ranges have to allow
                                      for PORTEPOCH and PORTREVISION if
                                      applicable. Please remember that
                                      according to the collation rules, a
                                      version with a non-zero PORTEPOCH
                                      is greater than any version without
                                      PORTEPOCH, for example, 3.0,1 is
                                      greater than 3.1 or even than 8.9.

  7                                   This is a summary of the issue.
                                      XHTML is used in this field. At
                                      least enclosing <p> and </p> has to
                                      appear. More complex mark-up may be
                                      used, but only for the sake of
                                      accuracy and clarity: No eye candy
                                      please.

  8                                   This section contains references to
                                      relevant documents. As many
                                      references as apply are encouraged.

  9                                   This is a FreeBSD security
                                      advisory.

  10                                  This is a FreeBSD problem report.

  11                                  This is a MITRE CVE identifier.

  12                                  This is a SecurityFocus Bug ID.

  13                                  This is a US-CERT security
                                      advisory.

  14                                  This is a US-CERT vulnerability
                                      note.

  15                                  This is a US-CERT Cyber Security
                                      Alert.

  16                                  This is a US-CERT Technical Cyber
                                      Security Alert.

  17                                  This is a URL to an archived
                                      posting in a mailing list. The
                                      attribute msgid is optional and may
                                      specify the message ID of the
                                      posting.

  18                                  This is a generic URL. Only it if
                                      none of the other reference
                                      categories apply.

  19                                  This is the date when the issue was
                                      disclosed (YYYY-MM-DD).

  20                                  This is the date when the entry was
                                      added (YYYY-MM-DD).

  21                                  This is the date when any
                                      information in the entry was last
                                      modified (YYYY-MM-DD). New entries
                                      must not include this field. Add it
                                      when editing an existing entry.
  ----------------------------------- -----------------------------------

12.3.3. Testing Changes to the VuXML Database

This example describes a new entry for a vulnerability in the package
dropbear that has been fixed in version dropbear-2013.59.

As a prerequisite, install a fresh version of security/vuxml port.

First, check whether there already is an entry for this vulnerability.
If there were such an entry, it would match the previous version of the
package, 2013.58:

    % pkg audit dropbear-2013.58

If there is none found, add a new entry for this vulnerability.

    % cd ${PORTSDIR}/security/vuxml
    % make newentry

If the vulnerability has a MITRE CVE identifier, the following command
can be used instead:

    % cd ${PORTSDIR}/security/vuxml
    % make newentry CVE_ID=CVE-YYYY-XXXXX

where CVE-YYYYY-XXXX is a valid CVE identifier.

Verify its syntax and formatting:

    % make validate

The previous command generates the vuln-flat.xml file. It can also be
generated with:

    % make vuln-flat.xml

+-----------------------------------+-----------------------------------+
|                                   | At least one of these packages    |
|                                   | needs to be installed:            |
|                                   | textproc/libxml2, textproc/jade.  |
+-----------------------------------+-----------------------------------+

Verify that the <affected> section of the entry will match the correct
packages:

    % pkg audit -f ${PORTSDIR}/security/vuxml/vuln-flat.xml dropbear-2013.58

Make sure that the entry produces no spurious matches in the output.

Now check whether the right package versions are matched by the entry:

    % pkg audit -f ${PORTSDIR}/security/vuxml/vuln-flat.xml dropbear-2013.58 dropbear-2013.59
    dropbear-2012.58 is vulnerable:
    dropbear -- exposure of sensitive information, DoS
    CVE: CVE-2013-4434
    CVE: CVE-2013-4421
    WWW: https://portaudit.FreeBSD.org/8c9b48d1-3715-11e3-a624-00262d8b701d.html

    1 problem(s) in the installed packages found.

The former version matches while the latter one does not.

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: March 12, 2023 by Fernando Apesteguía

Prev

Home

Next

Table of Contents

-   12.1. Why Security is So Important
-   12.2. Fixing Security Vulnerabilities
-   12.3. Keeping the Community Informed

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

