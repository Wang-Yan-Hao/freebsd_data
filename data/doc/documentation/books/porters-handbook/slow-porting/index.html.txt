
-    Chapter 1. Introduction
-    Chapter 2. Making a New Port
-    Chapter 3. Quick Porting
    -   3.1. Writing the Makefile
    -   3.2. Writing the Description Files
    -   3.3. Creating the Checksum File
    -   3.4. Testing the Port
    -   3.5. Checking the Port with portlint
    -   3.6. Submitting the New Port
-    Chapter 4. Slow Porting
    -   4.1. How Things Work
    -   4.2. Getting the Original Sources
    -   4.3. Modifying the Port
    -   4.4. Patching
    -   4.5. Configuring
    -   4.6. Handling User Input
-    Chapter 5. Configuring the Makefile
    -   5.1. The Original Source
    -   5.2. Naming
    -   5.3. Categorization
    -   5.4. The Distribution Files
    -   5.5. MAINTAINER
    -   5.6. COMMENT
    -   5.7. Project website
    -   5.8. Licenses
    -   5.9. PORTSCOUT
    -   5.10. Dependencies
    -   5.11. Slave Ports and MASTERDIR
    -   5.12. Man Pages
    -   5.13. Info Files
    -   5.14. Makefile Options
    -   5.15. Specifying the Working Directory
    -   5.16. Conflict Handling
    -   5.17. Installing Files
    -   5.18. Use BINARY_ALIAS to Rename Commands Instead of Patching
        the Build
-    Chapter 6. Special Considerations
    -   6.1. Staging
    -   6.2. Bundled Libraries
    -   6.3. Shared Libraries
    -   6.4. Ports with Distribution Restrictions or Legal Concerns
    -   6.5. Building Mechanisms
    -   6.6. Using GNU Autotools
    -   6.7. Using GNU gettext
    -   6.8. Using Perl
    -   6.9. Using X11
    -   6.10. Using GNOME
    -   6.11. GNOME Components
    -   6.12. Using Qt
    -   6.13. Using KDE
    -   6.14. Using LXQt
    -   6.15. Using Java
    -   6.16. Web Applications, Apache and PHP
    -   6.17. Using Python
    -   6.18. Using Tcl/Tk
    -   6.19. Using SDL
    -   6.20. Using wxWidgets
    -   6.21. Using Lua
    -   6.22. Using iconv
    -   6.23. Using Xfce
    -   6.24. Using Budgie
    -   6.25. Using Databases
    -   6.26. Starting and Stopping Services (rc Scripts)
    -   6.27. Adding Users and Groups
    -   6.28. Ports That Rely on Kernel Sources
    -   6.29. Go Libraries
    -   6.30. Haskell Libraries
    -   6.31. Shell Completion Files
-    Chapter 7. Flavors
    -   7.1. An Introduction to Flavors
    -   7.2. Using FLAVORS
    -   7.3. USES=php and Flavors
    -   7.4. USES=python and Flavors
    -   7.5. USES=lua and Flavors
-    Chapter 8. Advanced pkg-plist Practices
    -   8.1. Changing pkg-plist Based on Make Variables
    -   8.2. Empty Directories
    -   8.3. Configuration Files
    -   8.4. Dynamic Versus Static Package List
    -   8.5. Automated Package List Creation
    -   8.6. Expanding Package List with Keywords
-    Chapter 9. pkg-*
    -   9.1. pkg-message
    -   9.2. pkg-install, pkg-pre-install, and pkg-post-install
    -   9.3. pkg-deinstall, pkg-pre-deinstall, and pkg-post-deinstall
    -   9.4. Changing the Names of pkg-*
    -   9.5. Making Use of SUB_FILES and SUB_LIST
-    Chapter 10. Testing the Port
    -   10.1. Running make describe
    -   10.2. Portclippy / Portfmt
    -   10.3. Portlint
    -   10.4. Port Tools
    -   10.5. PREFIX and DESTDIR
    -   10.6. poudriere
-    Chapter 11. Upgrading a Port
    -   11.1. Using Git to Make Patches
    -   11.2. UPDATING and MOVED
-    Chapter 12. Security
    -   12.1. Why Security is So Important
    -   12.2. Fixing Security Vulnerabilities
    -   12.3. Keeping the Community Informed
-    Chapter 13. Dos and Don'ts
    -   13.1. Introduction
    -   13.2. WRKDIR
    -   13.3. WRKDIRPREFIX
    -   13.4. Differentiating Operating Systems and OS Versions
    -   13.5. Writing Something After bsd.port.mk
    -   13.6. Use the exec Statement in Wrapper Scripts
    -   13.7. Do Things Rationally
    -   13.8. Respect Both CC and CXX
    -   13.9. Respect CFLAGS
    -   13.10. Verbose Build Logs
    -   13.11. Feedback
    -   13.12. README.html
    -   13.13. Marking a Port Not Installable with BROKEN, FORBIDDEN, or
        IGNORE
    -   13.14. Architectural Considerations
    -   13.15. Marking a Port for Removal with DEPRECATED or
        EXPIRATION_DATE
    -   13.16. Avoid Use of the .error Construct
    -   13.17. Usage of sysctl
    -   13.18. Rerolling Distfiles
    -   13.19. Use POSIX Standards
    -   13.20. Miscellanea
-    Chapter 14. A Sample Makefile
-    Chapter 15. Order of Variables in Port Makefiles
    -   15.1. PORTNAME Block
    -   15.2. PATCHFILES Block
    -   15.3. MAINTAINER Block
    -   15.4. LICENSE Block
    -   15.5. Generic BROKEN/IGNORE/DEPRECATED Messages
    -   15.6. The Dependencies Block
    -   15.7. Flavors
    -   15.8. USES and USE_x
    -   15.9. Standard bsd.port.mk Variables
    -   15.10. Options and Helpers
    -   15.11. The Rest of the Variables
    -   15.12. The Targets
-    Chapter 16. Keeping Up
    -   16.1. FreshPorts
    -   16.2. The Web Interface to the Source Repository
    -   16.3. The FreeBSD Ports Mailing List
    -   16.4. The FreeBSD Port Building Cluster
    -   16.5. Portscout: the FreeBSD Ports Distfile Scanner
-    Chapter 17. Using USES Macros
    -   17.1. An Introduction to USES
    -   17.2. 7z
    -   17.3. ada
    -   17.4. autoreconf
    -   17.5. blaslapack
    -   17.6. bdb
    -   17.7. bison
    -   17.8. budgie
    -   17.9. cabal
    -   17.10. cargo
    -   17.11. charsetfix
    -   17.12. cmake
    -   17.13. compiler
    -   17.14. cpe
    -   17.15. cran
    -   17.16. desktop-file-utils
    -   17.17. desthack
    -   17.18. display
    -   17.19. dos2unix
    -   17.20. drupal
    -   17.21. eigen
    -   17.22. elfctl
    -   17.23. erlang
    -   17.24. fakeroot
    -   17.25. fam
    -   17.26. firebird
    -   17.27. fonts
    -   17.28. fortran
    -   17.29. fuse
    -   17.30. gem
    -   17.31. gettext
    -   17.32. gettext-runtime
    -   17.33. gettext-tools
    -   17.34. ghostscript
    -   17.35. gl
    -   17.36. gmake
    -   17.37. gnome
    -   17.38. go
    -   17.39. gperf
    -   17.40. grantlee
    -   17.41. groff
    -   17.42. gssapi
    -   17.43. gstreamer
    -   17.44. horde
    -   17.45. iconv
    -   17.46. imake
    -   17.47. kde
    -   17.48. kmod
    -   17.49. ldap
    -   17.50. lha
    -   17.51. libarchive
    -   17.52. libedit
    -   17.53. libtool
    -   17.54. linux
    -   17.55. llvm
    -   17.56. localbase
    -   17.57. lua
    -   17.58. luajit
    -   17.59. lxqt
    -   17.60. magick
    -   17.61. makeinfo
    -   17.62. makeself
    -   17.63. mate
    -   17.64. meson
    -   17.65. metaport
    -   17.66. minizip
    -   17.67. mysql
    -   17.68. mono
    -   17.69. motif
    -   17.70. ncurses
    -   17.71. nextcloud
    -   17.72. ninja
    -   17.73. nodejs
    -   17.74. objc
    -   17.75. octave
    -   17.76. openal
    -   17.77. pathfix
    -   17.78. pear
    -   17.79. perl5
    -   17.80. pgsql
    -   17.81. php
    -   17.82. pkgconfig
    -   17.83. pure
    -   17.84. pyqt
    -   17.85. pytest
    -   17.86. python
    -   17.87. qmail
    -   17.88. qmake
    -   17.89. qt
    -   17.90. qt-dist
    -   17.91. readline
    -   17.92. ruby
    -   17.93. samba
    -   17.94. scons
    -   17.95. shared-mime-info
    -   17.96. shebangfix
    -   17.97. sqlite
    -   17.98. ssl
    -   17.99. tar
    -   17.100. tcl
    -   17.101. terminfo
    -   17.102. tex
    -   17.103. tk
    -   17.104. uidfix
    -   17.105. uniquefiles
    -   17.106. vala
    -   17.107. varnish
    -   17.108. webplugin
    -   17.109. xfce
    -   17.110. xorg
    -   17.111. xorg-cat
    -   17.112. zip
-    Chapter 18. __FreeBSD_version Values
    -   18.1. FreeBSD 14 Versions
    -   18.2. FreeBSD 13 Versions
    -   18.3. FreeBSD 12 Versions
    -   18.4. FreeBSD 11 Versions
    -   18.5. FreeBSD 10 Versions
    -   18.6. FreeBSD 9 Versions
    -   18.7. FreeBSD 8 Versions
    -   18.8. FreeBSD 7 Versions
    -   18.9. FreeBSD 6 Versions
    -   18.10. FreeBSD 5 Versions
    -   18.11. FreeBSD 4 Versions
    -   18.12. FreeBSD 3 Versions
    -   18.13. FreeBSD 2.2 Versions
    -   18.14. FreeBSD 2 Before 2.2-RELEASE Versions
-   

Book menu

Chapter 4. Slow Porting

Table of Contents

-   4.1. How Things Work
-   4.2. Getting the Original Sources
-   4.3. Modifying the Port
-   4.4. Patching
-   4.5. Configuring
-   4.6. Handling User Input

Okay, so it was not that simple, and the port required some
modifications to get it to work. In this section, we will explain, step
by step, how to modify it to get it to work with the ports paradigm.

4.1. How Things Work

First, this is the sequence of events which occurs when the user first
types make in the port’s directory. Having bsd.port.mk in another window
while reading this really helps to understand it.

But do not worry, not many people understand exactly how bsd.port.mk is
working…​ :-)

1.  The fetch target is run. The fetch target is responsible for making
    sure that the tarball exists locally in DISTDIR. If fetch cannot
    find the required files in DISTDIR it will look up the URL
    MASTER_SITES, which is set in the Makefile, as well as our FTP
    mirrors where we put distfiles as backup. It will then attempt to
    fetch the named distribution file with FETCH, assuming that the
    requesting site has direct access to the Internet. If that succeeds,
    it will save the file in DISTDIR for future use and proceed.

2.  The extract target is run. It looks for the port’s distribution file
    (typically a compressed tarball) in DISTDIR and unpacks it into a
    temporary subdirectory specified by WRKDIR (defaults to work).

3.  The patch target is run. First, any patches defined in PATCHFILES
    are applied. Second, if any patch files named patch-* are found in
    PATCHDIR (defaults to the files subdirectory), they are applied at
    this time in alphabetical order.

4.  The configure target is run. This can do any one of many different
    things.

    a.  If it exists, scripts/configure is run.

    b.  If HAS_CONFIGURE or GNU_CONFIGURE is set, WRKSRC/configure is
        run.

5.  The build target is run. This is responsible for descending into the
    port’s private working directory (WRKSRC) and building it.

6.  The stage target is run. This puts the final set of built files into
    a temporary directory (STAGEDIR, see Staging). The hierarchy of this
    directory mirrors that of the system on which the package will be
    installed.

7.  The package target is run. This creates a package using the files
    from the temporary directory created during the stage target and the
    port’s pkg-plist.

8.  The install target is run. This installs the package created during
    the package target into the host system.

The above are the default actions. In addition, define targets
pre-something or post-something, or put scripts with those names, in the
scripts subdirectory, and they will be run before or after the default
actions are done.

For example, if there is a post-extract target defined in the Makefile,
and a file pre-build in the scripts subdirectory, the post-extract
target will be called after the regular extraction actions, and
pre-build will be executed before the default build rules are done. It
is recommended to use Makefile targets if the actions are simple enough,
because it will be easier for someone to figure out what kind of
non-default action the port requires.

The default actions are done by the do-something targets from
bsd.port.mk. For example, the commands to extract a port are in the
target do-extract. If the default target does not do the job right,
redefine the do-something target in the Makefile.

+-----------------------------------+-----------------------------------+
|                                   | The "main" targets (for example,  |
|                                   | extract, configure, etc.) do      |
|                                   | nothing more than make sure all   |
|                                   | the stages up to that one are     |
|                                   | completed and call the real       |
|                                   | targets or scripts, and they are  |
|                                   | not intended to be changed. To    |
|                                   | fix the extraction, fix           |
|                                   | do-extract, but never ever change |
|                                   | the way extract operates!         |
|                                   | Additionally, the target          |
|                                   | post-deinstall is invalid and is  |
|                                   | not run by the ports              |
|                                   | infrastructure.                   |
+-----------------------------------+-----------------------------------+

Now that what goes on when the user types make install is better
understood, let us go through the recommended steps to create the
perfect port.

4.2. Getting the Original Sources

Get the original sources (normally) as a compressed tarball (foo.tar.gz
or foo.tar.bz2) and copy it into DISTDIR. Always use mainstream sources
when and where possible.

Set the variable MASTER_SITES to reflect where the original tarball
resides. Shorthand definitions exist for most mainstream sites in
bsd.sites.mk. Please use these sites-and the associated definitions-if
at all possible, to help avoid the problem of having the same
information repeated over again many times in the source base. As these
sites tend to change over time, this becomes a maintenance nightmare for
everyone involved. See MASTER_SITES for details.

If there is no FTP/HTTP site that is well-connected to the net, or can
only find sites that have irritatingly non-standard formats, put a copy
on a reliable FTP or HTTP server (for example, a home page).

If a convenient and reliable place to put the distfile cannot be found,
we can "house" it ourselves on ftp.FreeBSD.org; however, this is the
least-preferred solution. The distfile must be placed into
~/public_distfiles/ of someone’s freefall account. Ask the person who
commits the port to do this. This person will also set MASTER_SITES to
LOCAL/username where username is their FreeBSD cluster login.

If the port’s distfile changes all the time without any kind of version
update by the author, consider putting the distfile on a home page and
listing it as the first MASTER_SITES. Try to talk the port author out of
doing this; it really does help to establish some kind of source code
control. Hosting a specific version will prevent users from getting
checksum mismatch errors, and also reduce the workload of maintainers of
our FTP site. Also, if there is only one master site for the port, it is
recommended to house a backup on a home page and list it as the second
MASTER_SITES.

If the port requires additional patches that are available on the
Internet, fetch them too and put them in DISTDIR. Do not worry if they
come from a site other than where the main source tarball comes, we have
a way to handle these situations (see the description of PATCHFILES
below).

4.3. Modifying the Port

Unpack a copy of the tarball in a private directory and make whatever
changes are necessary to get the port to compile properly under the
current version of FreeBSD. Keep careful track of steps, as they will be
needed to automate the process shortly. Everything, including the
deletion, addition, or modification of files has to be doable using an
automated script or patch file when the port is finished.

If the port requires significant user interaction/customization to
compile or install, take a look at one of Larry Wall’s classic Configure
scripts and perhaps do something similar. The goal of the new ports
collection is to make each port as "plug-and-play" as possible for the
end-user while using a minimum of disk space.

+-----------------------------------+-----------------------------------+
|                                   | Unless explicitly stated, patch   |
|                                   | files, scripts, and other files   |
|                                   | created and contributed to the    |
|                                   | FreeBSD ports collection are      |
|                                   | assumed to be covered by the      |
|                                   | standard BSD copyright            |
|                                   | conditions.                       |
+-----------------------------------+-----------------------------------+

4.4. Patching

In the preparation of the port, files that have been added or changed
can be recorded with diff(1) for later feeding to patch(1). Doing this
with a typical file involves saving a copy of the original file before
making any changes using a .orig suffix.

    % cp file file.orig

After all changes have been made, cd back to the port directory. Use
make makepatch to generate updated patch files in the files directory.

+-----------------------------------+-----------------------------------+
|                                   | Use BINARY_ALIAS to substitute    |
|                                   | hardcoded commands during the     |
|                                   | build and avoid patching build    |
|                                   | files. See Use BINARY_ALIAS to    |
|                                   | Rename Commands Instead of        |
|                                   | Patching the Build for more       |
|                                   | information.                      |
+-----------------------------------+-----------------------------------+

4.4.1. General Rules for Patching

Patch files are stored in PATCHDIR, usually files/, from where they will
be automatically applied. All patches must be relative to WRKSRC.
Typically WRKSRC is a subdirectory of WRKDIR, the directory where the
distfile is extracted. Use make -V WRKSRC to see the actual path. The
patch names are to follow these rules:

-   Avoid having more than one patch modify the same file. For example,
    having both patch-foobar.c and patch-foobar.c2 making changes to
    ${WRKSRC}/foobar.c makes them fragile and difficult to debug.

-   When creating names for patch files, replace each underscore (_)
    with two underscores (__) and each slash (/) with one underscore
    (_). For example, to patch a file named src/freeglut_joystick.c,
    name the corresponding patch patch-src_freeglut__joystick.c. Do not
    name patches like patch-aa or patch-ab. Always use the path and file
    name in patch names. Using make makepatch automatically generates
    the correct names.

-   A patch may modify multiple files if the changes are related and the
    patch is named appropriately. For example,
    patch-add-missing-stdlib.h.

-   Only use characters [-+._a-zA-Z0-9] for naming patches. In
    particular, do not use :: as a path separator, use _ instead.

Minimize the amount of non-functional whitespace changes in patches. It
is common in the Open Source world for projects to share large amounts
of a code base, but obey different style and indenting rules. When
taking a working piece of functionality from one project to fix similar
areas in another, please be careful: the resulting patch may be full of
non-functional changes. It not only increases the size of the ports
repository but makes it hard to find out what exactly caused the problem
and what was changed at all.

If a file must be deleted, do it in the post-extract target rather than
as part of the patch.

4.4.2. Manual Patch Generation

+-----------------------------------+-----------------------------------+
|                                   | Manual patch creation is usually  |
|                                   | not necessary. Automatic patch    |
|                                   | generation as described earlier   |
|                                   | in this section is the preferred  |
|                                   | method. However, manual patching  |
|                                   | may be required occasionally.     |
+-----------------------------------+-----------------------------------+

Patches are saved into files named patch-* where * indicates the
pathname of the file that is patched, such as patch-Imakefile or
patch-src-config.h. Patches with file names which do not start with
patch- will not be applied automatically.

After the file has been modified, diff(1) is used to record the
differences between the original and the modified version. -u causes
diff(1) to produce "unified" diffs, the preferred form.

    % diff -u file.orig file > patch-pathname-file

When generating patches for new, added files, -N is used to tell diff(1)
to treat the non-existent original file as if it existed but was empty:

    % diff -u -N newfile.orig newfile > patch-pathname-newfile

Using the recurse (-r) option to diff(1) to generate patches is fine,
but please look at the resulting patches to make sure there is no
unnecessary junk in there. In particular, diffs between two backup
files, Makefiles when the port uses Imake or GNU configure, etc., are
unnecessary and have to be deleted. If it was necessary to edit
configure.in and run autoconf to regenerate configure, do not take the
diffs of configure (it often grows to a few thousand lines!). Instead,
define USES=autoreconf and take the diffs of configure.in.

4.4.3. Simple Automatic Replacements

Simple replacements can be performed directly from the port Makefile
using the in-place mode of sed(1). This is useful when changes use the
value of a variable:

    post-patch:
        @${REINPLACE_CMD} -e 's|/usr/local|${PREFIX}|g' ${WRKSRC}/Makefile

+-----------------------------------+-----------------------------------+
|                                   | Only use sed(1) to replace        |
|                                   | variable content. You must use    |
|                                   | patch files instead of sed(1) to  |
|                                   | replace static content.           |
+-----------------------------------+-----------------------------------+

Quite often, software being ported uses the CR/LF convention in source
files. This may cause problems with further patching, compiler warnings,
or script execution (like /bin/sh^M not found.) To quickly convert all
files from CR/LF to just LF, add this entry to the port Makefile:

    USES=    dos2unix

A list of specific files to convert can be given:

    USES= dos2unix
    DOS2UNIX_FILES= util.c util.h

Use DOS2UNIX_REGEX to convert a group of files across subdirectories.
Its argument is a find(1)-compatible regular expression. More on the
format is in re_format(7). This option is useful for converting all
files of a given extension. For example, convert all source code files,
leaving binary files intact:

    USES=    dos2unix
    DOS2UNIX_REGEX= .*\.([ch]|cpp)

A similar option is DOS2UNIX_GLOB, which runs find for each element
listed in it.

    USES= dos2unix
    DOS2UNIX_GLOB=  *.c *.cpp *.h

The base directory for the conversion can be set. This is useful when
there are multiple distfiles and several contain files which require
line-ending conversion.

    USES=    dos2unix
    DOS2UNIX_WRKSRC=    ${WRKDIR}

4.4.4. Patching Conditionally

Some ports need patches that are only applied for specific FreeBSD
versions or when a particular option is enabled or disabled. Conditional
patches are specified by placing the full paths to the patch files in
EXTRA_PATCHES. Conditional patch file names usually start with extra-
although this is not necessary. However, their file names must not start
with patch-. If they do, they are applied unconditionally by the
framework which is undesired for conditional patches.

Example 1. Applying a Patch for a Specific FreeBSD Version

    .include <bsd.port.options.mk>

    # Patch in the iconv const qualifier before this
    .if ${OPSYS} == FreeBSD && ${OSVERSION} < 1100069
    EXTRA_PATCHES=  ${PATCHDIR}/extra-patch-fbsd10
    .endif

    .include <bsd.port.mk>

Example 2. Optionally Applying a Patch

When an option requires a patch, use opt_EXTRA_PATCHES and
opt_EXTRA_PATCHES_OFF to make the patch conditional on the opt option.
See Generic Variables Replacement for more information.

    OPTIONS_DEFINE=     FOO BAR
    FOO_EXTRA_PATCHES=  ${PATCHDIR}/extra-patch-foo
    BAR_EXTRA_PATCHES_OFF=  ${PATCHDIR}/extra-patch-bar.c \
            ${PATCHDIR}/extra-patch-bar.h

Example 3. Using EXTRA_PATCHES With a Directory

Sometimes, there are many patches that are needed for a feature, in this
case, it is possible to point EXTRA_PATCHES to a directory, and it will
automatically apply all files named patch-* in it.

Create a subdirectory in ${PATCHDIR}, and move the patches in it. For
example:

    % ls -l files/foo-patches
    -rw-r--r--  1 root  wheel    350 Jan 16 01:27 patch-Makefile.in
    -rw-r--r--  1 root  wheel   3084 Jan 18 15:37 patch-configure

Then add this to the Makefile:

    OPTIONS_DEFINE=    FOO
    FOO_EXTRA_PATCHES=  ${PATCHDIR}/foo-patches

The framework will then use all the files named patch-* in that
directory.

4.5. Configuring

Include any additional customization commands in the configure script
and save it in the scripts subdirectory. As mentioned above, it is also
possible do this with Makefile targets and/or scripts with the name
pre-configure or post-configure.

4.6. Handling User Input

If the port requires user input to build, configure, or install, set
IS_INTERACTIVE in the Makefile. This will allow "overnight builds" to
skip it. If the user sets the variable BATCH in their environment (and
if the user sets the variable INTERACTIVE, then only those ports
requiring interaction are built). This will save a lot of wasted time on
the set of machines that continually build ports (see below).

It is also recommended that if there are reasonable default answers to
the questions, PACKAGE_BUILDING be used to turn off the interactive
script when it is set. This will allow us to build the packages for
CDROMs and FTP.

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: December 11, 2021 by Sergio Carlavilla Delgado

Prev

Home

Next

Table of Contents

-   4.1. How Things Work
-   4.2. Getting the Original Sources
-   4.3. Modifying the Port
-   4.4. Patching
-   4.5. Configuring
-   4.6. Handling User Input

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

