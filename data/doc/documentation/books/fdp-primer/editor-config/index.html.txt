
-    Preface
    -   Shell Prompts
    -   Typographic Conventions
    -   Notes, Tips, Important Information, Warnings, and Examples
    -   Acknowledgments
-    Chapter 1. Overview
    -   1.1. Documentation in the FreeBSD Ecosystem
    -   1.2. Quick Start
    -   1.3. The FreeBSD Documentation Set
-    Chapter 2. Tools
    -   2.1. Required Tools
    -   2.2. Optional Tools
-    Chapter 3. The Working Copy
    -   3.1. Documentation and Manual Pages
    -   3.2. Choosing a Directory
    -   3.3. Checking Out a Copy
    -   3.4. Updating a Working Copy
    -   3.5. Reverting Changes
    -   3.6. Making a Diff
    -   3.7. Git References
-    Chapter 4. Documentation Directory Structure
    -   4.1. The Top Level, doc/
    -   4.2. The Directories
    -   4.3. Document-Specific Information
    -   4.4. The Books: books/
    -   4.5. The Articles: articles/
-    Chapter 5. The FreeBSD Documentation Build Process
    -   5.1. Rendering AsciiDoc into Output
    -   5.2. The FreeBSD Documentation Build Toolset
    -   5.3. Understanding the Makefile in the Documentation Tree
-    Chapter 6. AsciiDoctor Primer
    -   6.1. Overview
    -   6.2. Headings
    -   6.3. Paragraphs
    -   6.4. Lists
    -   6.5. Links
    -   6.6. Conclusion
-    Chapter 7. Rosetta Stone
    -   7.1. Comparison between Docbook and AsciiDoc
-    Chapter 8. Translations
    -   8.1. What do i18n and l10n mean?
    -   8.2. Is there a mailing list for translators?
    -   8.3. Are more translators needed?
    -   8.4. What languages do I need to know?
    -   8.5. What software do I need to know?
    -   8.6. How do I find out who else might be translating to the same
        language?
    -   8.7. No one else is translating to my language. What do I do?
    -   8.8. I have translated some documentation, where do I send it?
    -   8.9. I am the only person working on translating to this
        language, how do I submit my translation?
    -   8.10. Can I include language or country specific text in my
        translation?
-    Chapter 9. PO Translations
    -   9.1. Introduction
    -   9.2. Quick Start
    -   9.3. Creating New Translations
    -   9.4. Translating
    -   9.5. Tips for Translators
    -   9.6. Building a Translated Document
    -   9.7. Submitting the New Translation
-    Chapter 10. Weblate Translations
    -   10.1. Introduction
    -   10.2. How to Become a FreeBSD Translator
    -   10.3. Introduce Yourself
    -   10.4. Login to Weblate
    -   10.5. Find a Language Team to Join In
    -   10.6. Translating Online on Weblate
    -   10.7. Translating Offline
    -   10.8. Translation based on Automatic Suggestions
    -   10.9. Proofreading and Weblate Quality Checks
    -   10.10. Building the Translated Document
    -   10.11. Submitting Translations
    -   10.12. FAQ (Frequently Asked Questions)
-    Chapter 11. Manual Pages
    -   11.1. Introduction
    -   11.2. Sections
    -   11.3. Markup
    -   11.4. Sample Manual Page Structures
    -   11.5. Testing
    -   11.6. Example Manual Pages to Use as Templates
<<<<<<< HEAD
=======
    -   11.7. Resources
-    Chapter 12. Writing Style
    -   12.1. Tips
    -   12.2. Guidelines
    -   12.3. Style Guide
    -   12.4. One sentence per line
    -   12.5. Acronyms
    -   12.6. Special Character List
    -   12.7. Linting with Vale
-    Chapter 13. Editor Configuration
    -   13.1. Vim
    -   13.2. Emacs
    -   13.3. nano
-    Chapter 14. Trademarks
    -   14.1. Trademark Symbols
    -   14.2. Trademark Citing
-    Chapter 15. See Also
    -   15.1. The FreeBSD Documentation Project
    -   15.2. Hugo
    -   15.3. AsciiDoctor
    -   15.4. HTML
-    Appendix A. Examples
    -   A.1. AsciiDoctor book
    -   A.2. AsciiDoctor article
-   

Book menu

Chapter 13. Editor Configuration

Table of Contents

-   13.1. Vim
-   13.2. Emacs
-   13.3. nano

Adjusting your text editor configuration can make working on document
files quicker and easier, and help documents conform to FDP guidelines.

13.1. Vim

Install from editors/vim, or editors/vim-console, then follow the
configuration instructions in Configuration. More advanced users can use
a proper linter like Ale which can also act as a Vim Language Server
Protocol client.

13.1.1. Use

Manual page writers can use the following keyboard shortcuts to
reformat:

-   Press P to reformat paragraphs or text that has been selected in
    Visual mode.

-   Press T to replace groups of eight spaces with a tab.

A linter named Vale has been introduced to check grammatical and
cosmetic errors on the documents. Vale has support for various editors
and IDEs.

Vale may already be installed as a dependency of the textproc/docproj
meta-port. If not, install textproc/vale with:

    $ pkg install vale

Install Ale to integrate into editors/vim, for using textproc/vale.

    % mkdir -p ~/.vim/pack/vendor/start
    % git clone --depth 1 https://github.com/dense-analysis/ale.git ~/.vim/pack/vendor/start/ale

Users who are using plugin managers for editors/vim do not need the
above and should follow the instructions of that plugin manager to
install Ale.

At this moment due to a bug in Vale it is necessary to copy the Vale
configuration to the home directory. Considering the repository was
cloned into ~/doc copy as following:

    % cp -R ~/doc/.vale* ~/

13.1.2. Configuration

Edit ~/.vimrc, adding these lines to the end of the file:

~/.vimrc

    if has("autocmd")
      au BufNewFile,BufRead *.adoc call Set_ADOC()
      au BufNewFile,BufRead *.[1-9] call Set_MAN()
    endif " has(autocmd)

    function Set_Highlights()
      "match ExtraWhitespace /^\s* \s*\|\s\+$/
      return 0
    endfunction " Set_Highlights_Adoc()

    function Set_Highlights_MAN()
      highlight default link OverLength ErrorMsg
      match OverLength /\%71v.\+/
      return 0
    endfunction " Set_Highlights_MAN()

    function ShowSpecial()
      setlocal list listchars=tab:>>,trail:*,eol:$
      hi def link nontext ErrorMsg
      return 0
    endfunction " ShowSpecial()

    function Set_COMMON()
      setlocal number
      setlocal shiftwidth=2
      setlocal tabstop=8
      setlocal softtabstop=2
      setlocal formatprg="fmt -p"
      setlocal autoindent
      setlocal smartindent
      call ShowSpecial()
      call Set_Highlights()
      return 0
    endfunction " Set_COMMON()

    function Set_ADOC()
      setlocal syntax=asciidoc
      setlocal filetype=asciidoc
      call Set_COMMON()
      return 0
    endfunction " Set_ADOC()

    function Set_MAN()
      setlocal syntax=man
      setlocal filetype=man
      setlocal textwidth=70
      " Rewrap paragraphs
      noremap P gqj
      " Replace spaces with tabs
      noremap T :s/        /\t/<CR>
      call Set_COMMON()
      call Set_Highlights_MAN()
      return 0
    endfunction " Set_Man()

    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \}
    let g:ale_linters = {
    \   'asciidoc': ['vale'],
    \}
    let g:ale_fix_on_save = 1

+-----------------------------------+-----------------------------------+
|                                   | Above configuration will          |
|                                   | automatically remove trailing     |
|                                   | line, trailing space and multiple |
|                                   | spaces which might display        |
|                                   | additional unwanted changes in    |
|                                   | git diff output. In such cases    |
|                                   | properly mention that in the      |
|                                   | commit log.                       |
+-----------------------------------+-----------------------------------+

13.2. Emacs

Install from editors/emacs or editors/emacs-devel.

13.2.1. Validation

Emacs’s nxml-mode uses compact relax NG schemas for validating XML. A
compact relax NG schema for FreeBSD’s extension to DocBook 5.0 is
included in the documentation repository. To configure nxml-mode to
validate using this schema, create ~/.emacs.d/schema/schemas.xml and add
these lines to the file:

~/.emacs.d/schema/schemas.xml

    <locatingRules xmlns="http://thaiopensource.com/ns/locating-rules/1.0">
      <documentElement localName="section" typeId="DocBook" />
      <documentElement localName="chapter" typeId="DocBook" />
      <documentElement localName="article" typeId="DocBook" />
      <documentElement localName="book" typeId="DocBook" />
      <typeId id="DocBook" uri="/usr/local/share/xml/docbook/5.0/rng/docbook.rnc" />
    </locatingRules>

13.2.2. Automated Proofreading with Flycheck and Igor

The Flycheck package is available from Milkypostman’s Emacs Lisp Package
Archive (MELPA). If MELPA is not already in Emacs’s packages-archives,
it can be added by evaluating

    (add-to-list 'package-archives '("melpa" . "http://stable.melpa.org/packages/") t)

Add the line to Emacs’s initialization file (one of ~/.emacs,
~/.emacs.el, or ~.emacs.d/init.el) to make this change permanent.

To install Flycheck, evaluate

    (package-install 'flycheck)

Create a Flycheck checker for textproc/igor by evaluating

    (flycheck-define-checker igor
      "FreeBSD Documentation Project sanity checker.

    See URLs https://www.freebsd.org/docproj/ and
    http://www.freshports.org/textproc/igor/."
      :command ("igor" "-X" source-inplace)
      :error-parser flycheck-parse-checkstyle
      :modes (nxml-mode)
      :standard-input t)

      (add-to-list 'flycheck-checkers 'igor 'append)

Again, add these lines to Emacs’s initialization file to make the
changes permanent.

13.2.3. FreeBSD Documentation Specific Settings

To apply settings specific to the FreeBSD documentation project, create
.dir-locals.el in the root directory of the documentation repository and
add these lines to the file:

    ;;; Directory Local Variables
    ;;; For more information see (info "(emacs) Directory Variables")

    ((nxml-mode
      (eval . (turn-on-auto-fill))
      (fill-column . 70)
      (eval . (require 'flycheck))
      (eval . (flycheck-mode 1))
      (flycheck-checker . igor)
      (eval . (add-to-list 'rng-schema-locating-files "~/.emacs.d/schema/schemas.xml"))))

13.3. nano

Install from editors/nano or editors/nano-devel.

13.3.1. Configuration

Currently there is no adoc/asciidoc syntax highlight file with nano
distribution. So let’s create one from scratch and use an editor to
create new file or add lines in the ~/.nanorc with these contents:

~/.nanorc

    syntax "asciidoc" "\.(adoc|asc|asciidoc)$"
    # main header
    color red "^====+$"
    # h1
    color red "^==[[:space:]].*$"
    color red "^----+$"
    # h2
    color magenta "^===[[:space:]].*$"
    color magenta "^~~~~+$"
    # h4
    color green "^====[[:space:]].*$"
    color green "^\^\^\^\^+$"
    # h5
    color brightblue "^=====[[:space:]].*$"
    color brightblue "^\+\+\+\++$"
    # attributes
    color brightgreen ":.*:"
    color brightred "\{[a-z0-9]*\}"
    color red "\\\{[a-z0-9]*\}"
    color red "\+\+\+\{[a-z0-9]*\}\+\+\+"
    # Paragraph Title
    color yellow "^\..*$"
    # source
    color magenta "^\[(source,.+|NOTE|TIP|IMPORTANT|WARNING|CAUTION)\]"
    # Other markup
    color yellow ".*[[:space:]]\+$"
    color yellow "_[^_]+_"
    color yellow "\*[^\*]+\*"
    color yellow "\+[^\+]+\+"
    color yellow "`[^`]+`"
    color yellow "\^[^\^]+\^"
    color yellow "~[^~]+~"
    color yellow "'[^']+'"
    color cyan "`{1,2}[^']+'{1,2}"
    # bullets
    color brightmagenta "^[[:space:]]*[\*\.-]{1,5}[[:space:]]"
    # anchors
    color brightwhite "\[\[.*\]\]"
    color brightwhite "<<.*>>"
    # trailing whitespace
    color ,blue "[[:space:]]+$"
    # multiples of eight spaces at the start a line
    # (after zero or more tabs) should be a tab
    color ,blue "^([TAB]*[ ]{8})+"
    # tabs after spaces
    color ,yellow "( )+TAB"
    # highlight indents that have an odd number of spaces
    color ,red "^(([ ]{2})+|(TAB+))*[ ]{1}[^ ]{1}"

Process the file to create embedded tabs:

    % perl -i'' -pe 's/TAB/\t/g' ~/.nanorc

13.3.2. Use

Specify additional helpful options when running the editor:

    % nano -AKipwz -T8 _index.adoc

Users of csh(1) can define an alias in ~/.cshrc to automate these
options:

    alias nano "nano -AKipwz -r 70 -T8"

After the alias is defined, the options will be added automatically:

    % nano _index.adoc

------------------------------------------------------------------------

Last modified on: June 19, 2023 by Danilo G. Baio

Prev

Home

Next

Table of Contents

-   13.1. Vim
-   13.2. Emacs
-   13.3. nano

------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

