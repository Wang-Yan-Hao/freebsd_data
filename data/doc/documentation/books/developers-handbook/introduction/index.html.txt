
-    Part I. Basics
-    Chapter 1. Introduction
    -   1.1. Developing on FreeBSD
    -   1.2. The BSD Vision
    -   1.3. Architectural Guidelines
    -   1.4. The Layout of /usr/src
-    Chapter 2. Programming Tools
    -   2.1. Synopsis
    -   2.2. Introduction
    -   2.3. Introduction to Programming
    -   2.4. Compiling with cc
    -   2.5. Make
    -   2.6. Debugging
    -   2.7. Using Emacs as a Development Environment
    -   2.8. Further Reading
-    Chapter 3. Secure Programming
    -   3.1. Synopsis
    -   3.2. Secure Design Methodology
    -   3.3. Buffer Overflows
    -   3.4. SetUID issues
    -   3.5. Limiting your program’s environment
    -   3.6. Trust
    -   3.7. Race Conditions
-    Chapter 4. Localization and Internationalization - L10N and I18N
    -   4.1. Programming I18N Compliant Applications
    -   4.2. Localized Messages with POSIX.1 Native Language Support
        (NLS)
-    Chapter 5. Source Tree Guidelines and Policies
    -   5.1. Style Guidelines
    -   5.2. MAINTAINER on Makefiles
    -   5.3. Contributed Software
    -   5.4. Encumbered Files
    -   5.5. Shared Libraries
-    Chapter 6. Regression and Performance Testing
    -   6.1. Micro Benchmark Checklist
    -   6.2. The FreeBSD Source Tinderbox
    -   6.3. The index.cgi Script
    -   6.4. Official Build Servers
    -   6.5. Official Summary Site
-    Part II. Interprocess Communication
-    Chapter 7. Sockets
    -   7.1. Synopsis
    -   7.2. Networking and Diversity
    -   7.3. Protocols
    -   7.4. The Sockets Model
    -   7.5. Essential Socket Functions
    -   7.6. Helper Functions
    -   7.7. Concurrent Servers
-    Chapter 8. IPv6 Internals
    -   8.1. IPv6/IPsec Implementation
-    Part III. Kernel
-    Chapter 9. Building and Installing a FreeBSD Kernel
    -   9.1. Building the Faster but Brittle Way
-    Chapter 10. Kernel Debugging
    -   10.1. Obtaining a Kernel Crash Dump
    -   10.2. Debugging a Kernel Crash Dump with kgdb
    -   10.3. On-Line Kernel Debugging Using DDB
    -   10.4. On-Line Kernel Debugging Using Remote GDB
    -   10.5. Debugging a Console Driver
    -   10.6. Debugging Deadlocks
    -   10.7. Kernel debugging with Dcons
    -   10.8. Glossary of Kernel Options for Debugging
-    Part IV. Architectures
-    Chapter 11. x86 Assembly Language Programming
    -   A.1. Synopsis
    -   A.2. The Tools
    -   A.3. System Calls
    -   A.4. Return Values
    -   A.5. Creating Portable Code
    -   A.6. Our First Program
    -   A.7. Writing UNIX® Filters
    -   A.8. Buffered Input and Output
    -   A.9. Command Line Arguments
    -   A.10. UNIX® Environment
    -   A.11. Working with Files
    -   A.12. One-Pointed Mind
    -   A.13. Using the FPU
    -   A.14. Caveats
    -   A.15. Acknowledgements
-    Part V. Appendices
-    Appendices
-   

Book menu

Chapter 1. Introduction

Table of Contents

-   1.1. Developing on FreeBSD
-   1.2. The BSD Vision
-   1.3. Architectural Guidelines
-   1.4. The Layout of /usr/src

1.1. Developing on FreeBSD

So here we are. System all installed and you are ready to start
programming. But where to start? What does FreeBSD provide? What can it
do for me, as a programmer?

These are some questions which this chapter tries to answer. Of course,
programming has different levels of proficiency like any other trade.
For some it is a hobby, for others it is their profession. The
information in this chapter might be aimed toward the beginning
programmer; indeed, it could serve useful for the programmer unfamiliar
with the FreeBSD platform.

1.2. The BSD Vision

To produce the best UNIX® like operating system package possible, with
due respect to the original software tools ideology as well as
usability, performance and stability.

1.3. Architectural Guidelines

Our ideology can be described by the following guidelines

-   Do not add new functionality unless an implementor cannot complete a
    real application without it.

-   It is as important to decide what a system is not as to decide what
    it is. Do not serve all the world’s needs; rather, make the system
    extensible so that additional needs can be met in an upwardly
    compatible fashion.

-   The only thing worse than generalizing from one example is
    generalizing from no examples at all.

-   If a problem is not completely understood, it is probably best to
    provide no solution at all.

-   If you can get 90 percent of the desired effect for 10 percent of
    the work, use the simpler solution.

-   Isolate complexity as much as possible.

-   Provide mechanism, rather than policy. In particular, place user
    interface policy in the client’s hands.

From Scheifler & Gettys: "X Window System"

1.4. The Layout of /usr/src

The complete source code for FreeBSD is available from our public Git
repository. The source code is normally installed in /usr/src. The
layout of the source tree is described by the top-level README.md file.

<<<<<<< HEAD
=======
------------------------------------------------------------------------
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

Last modified on: May 24, 2023 by Mitchell Horne

Prev

Home

Next

Table of Contents

-   1.1. Developing on FreeBSD
-   1.2. The BSD Vision
-   1.3. Architectural Guidelines
-   1.4. The Layout of /usr/src

<<<<<<< HEAD

=======
------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

