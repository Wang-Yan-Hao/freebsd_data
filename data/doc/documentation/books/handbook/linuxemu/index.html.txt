
-    Preface
    -   Intended Audience
    -   Fourth Edition
    -   Third Edition
    -   Second Edition (2004)
    -   First Edition (2001)
    -   Organization of This Book
    -   Conventions used in this book
    -   Acknowledgments
-    Part I. Getting Started
-    Chapter 1. Introduction
    -   1.1. Synopsis
    -   1.2. Welcome to FreeBSD!
    -   1.3. About the FreeBSD Project
-    Chapter 2. Installing FreeBSD
    -   2.1. Synopsis
    -   2.2. Minimum Hardware Requirements
    -   2.3. Pre-Installation Tasks
    -   2.4. Starting the Installation
    -   2.5. Using bsdinstall
    -   2.6. Allocating Disk Space
    -   2.7. Fetching Distribution Files
    -   2.8. Network Interfaces, Accounts, Time Zone, Services and
        Hardening
    -   2.9. Troubleshooting
    -   2.10. Using the Live CD
-    Chapter 3. FreeBSD Basics
    -   3.1. Synopsis
    -   3.2. Virtual Consoles and Terminals
    -   3.3. Users and Basic Account Management
    -   3.4. Permissions
    -   3.5. Directory Structure
    -   3.6. Disk Organization
    -   3.7. Mounting and Unmounting File Systems
    -   3.8. Processes and Daemons
    -   3.9. Shells
    -   3.10. Text Editors
    -   3.11. Devices and Device Nodes
    -   3.12. Manual Pages
-    Chapter 4. Installing Applications: Packages and Ports
    -   4.1. Synopsis
    -   4.2. Overview of Software Installation
    -   4.3. Finding Software
    -   4.4. Using pkg for Binary Package Management
    -   4.5. Using the Ports Collection
    -   4.6. Building Packages with Poudriere
    -   4.7. Post-Installation Considerations
    -   4.8. Dealing with Broken Ports
-    Chapter 5. The X Window System
    -   5.1. Synopsis
    -   5.2. Installing Xorg
    -   5.3. Graphic card drivers
    -   5.4. Xorg Configuration
    -   5.5. Using Fonts in Xorg
-    Chapter 6. Wayland
    -   6.1. Wayland Synopsis
    -   6.2. The Wayfire Compositor
    -   6.3. The Hikari Compositor
    -   6.4. The Sway Compositor
    -   6.5. Using Xwayland
    -   6.6. Remote Desktop Using VNC
    -   6.7. Wayland Login Manager
    -   6.8. Useful Utilities
-    Chapter 7. Network
    -   7.1. Synopsis
    -   7.2. Setting up the Network
    -   7.3. Wired Networks
    -   7.4. Wireless Networks
    -   7.5. Hostname
    -   7.6. DNS
    -   7.7. Troubleshooting
-    Part II. Common Tasks
-    Chapter 8. Desktop Environments
    -   8.1. Synopsis
    -   8.2. Desktop Environments
    -   8.3. Browsers
    -   8.4. Development tools
    -   8.5. Desktop office productivity
    -   8.6. Document Viewers
    -   8.7. Finance
-    Chapter 9. Multimedia
    -   9.1. Synopsis
    -   9.2. Setting Up the Sound Card
    -   9.3. Audio players
    -   9.4. Video players
    -   9.5. Conferencing and Meetings
    -   9.6. Image Scanners
-    Chapter 10. Configuring the FreeBSD Kernel
    -   10.1. Synopsis
    -   10.2. Why Build a Custom Kernel?
    -   10.3. Finding the System Hardware
    -   10.4. The Configuration File
    -   10.5. Building and Installing a Custom Kernel
    -   10.6. If Something Goes Wrong
-    Chapter 11. Printing
    -   11.1. Quick Start
    -   11.2. Printer Connections
    -   11.3. Common Page Description Languages
    -   11.4. Direct Printing
    -   11.5. LPD (Line Printer Daemon)
    -   11.6. Other Printing Systems
-    Chapter 12. Linux Binary Compatibility
    -   12.1. Synopsis
    -   12.2. Configuring Linux Binary Compatibility
    -   12.3. Linux userlands
    -   12.4. Advanced Topics
-    Chapter 13. WINE
    -   13.1. Synopsis
    -   13.2. WINE Overview & Concepts
    -   13.3. Installing WINE on FreeBSD
    -   13.4. Running a First WINE Program on FreeBSD
    -   13.5. Configuring WINE Installation
    -   13.6. WINE Management GUIs
    -   13.7. WINE in Multi-User FreeBSD Installations
    -   13.8. WINE on FreeBSD FAQ
-    Part III. System Administration
-    Chapter 14. Configuration and Tuning
    -   14.1. Synopsis
    -   14.2. Starting Services
    -   14.3. Configuring cron(8)
    -   14.4. Managing Services in FreeBSD
    -   14.5. Configuring System Logging
    -   14.6. Configuration Files
    -   14.7. Tuning with sysctl(8)
    -   14.8. Tuning Disks
    -   14.9. Tuning Kernel Limits
    -   14.10. Adding Swap Space
    -   14.11. Power and Resource Management
-    Chapter 15. The FreeBSD Booting Process
    -   15.1. Synopsis
    -   15.2. FreeBSD Boot Process
    -   15.3. Device Hints
    -   15.4. Shutdown Sequence
-    Chapter 16. Security
    -   16.1. Synopsis
    -   16.2. Introduction
    -   16.3. One-time Passwords
    -   16.4. TCP Wrapper
    -   16.5. Kerberos
    -   16.6. OpenSSL
    -   16.7. VPN over IPsec
    -   16.8. OpenSSH
    -   16.9. Access Control Lists
    -   16.10. Monitoring Third Party Security Issues
    -   16.11. FreeBSD Security Advisories
    -   16.12. Process Accounting
    -   16.13. Resource Limits
    -   16.14. Shared Administration with Sudo
    -   16.15. Using doas as an alternative to sudo
-    Chapter 17. Jails
    -   17.1. Synopsis
    -   17.2. Terms Related to Jails
    -   17.3. Creating and Controlling Jails
    -   17.4. Fine Tuning and Administration
    -   17.5. Updating Multiple Jails
    -   17.6. Managing Jails with ezjail
-    Chapter 18. Mandatory Access Control
    -   18.1. Synopsis
    -   18.2. Key Terms
    -   18.3. Understanding MAC Labels
    -   18.4. Planning the Security Configuration
    -   18.5. Available MAC Policies
    -   18.6. User Lock Down
    -   18.7. Nagios in a MAC Jail
    -   18.8. Troubleshooting the MAC Framework
-    Chapter 19. Security Event Auditing
    -   19.1. Synopsis
    -   19.2. Key Terms
    -   19.3. Audit Configuration
    -   19.4. Working with Audit Trails
-    Chapter 20. Storage
    -   20.1. Synopsis
    -   20.2. Adding Disks
    -   20.3. Resizing and Growing Disks
    -   20.4. USB Storage Devices
    -   20.5. Creating and Using CD Media
    -   20.6. Creating and Using DVD Media
    -   20.7. Creating and Using Floppy Disks
    -   20.8. Using NTFS Disks
    -   20.9. Backup Basics
    -   20.10. Memory Disks
    -   20.11. File System Snapshots
    -   20.12. Disk Quotas
    -   20.13. Encrypting Disk Partitions
    -   20.14. Encrypting Swap
    -   20.15. Highly Available Storage (HAST)
-    Chapter 21. GEOM: Modular Disk Transformation Framework
    -   21.1. Synopsis
    -   21.2. RAID0 - Striping
    -   21.3. RAID1 - Mirroring
    -   21.4. RAID3 - Byte-level Striping with Dedicated Parity
    -   21.5. Software RAID Devices
    -   21.6. GEOM Gate Network
    -   21.7. Labeling Disk Devices
    -   21.8. UFS Journaling Through GEOM
-    Chapter 22. The Z File System (ZFS)
    -   22.1. What Makes ZFS Different
    -   22.2. Quick Start Guide
    -   22.3. zpool Administration
    -   22.4. zfs Administration
    -   22.5. Delegated Administration
    -   22.6. Advanced Topics
<<<<<<< HEAD
=======
    -   22.7. Further Resources
    -   22.8. ZFS Features and Terminology
-    Chapter 23. Other File Systems
    -   23.1. Synopsis
    -   23.2. Linux® File Systems
-    Chapter 24. Virtualization
    -   24.1. Synopsis
    -   24.2. FreeBSD as a Guest on Parallels Desktop for macOS®
    -   24.3. FreeBSD as a Guest on VMware Fusion for macOS®
    -   24.4. FreeBSD as a Guest on VirtualBox™
    -   24.5. FreeBSD as a Host with VirtualBox™
    -   24.6. FreeBSD as a Host with bhyve
    -   24.7. FreeBSD as a Xen™-Host
-    Chapter 25. Localization - i18n/L10n Usage and Setup
    -   25.1. Synopsis
    -   25.2. Using Localization
    -   25.3. Finding i18n Applications
    -   25.4. Locale Configuration for Specific Languages
-    Chapter 26. Updating and Upgrading FreeBSD
    -   26.1. Synopsis
    -   26.2. FreeBSD Update
    -   26.3. Updating Bootcode
    -   26.4. Updating the Documentation Set
    -   26.5. Tracking a Development Branch
    -   26.6. Updating FreeBSD from Source
    -   26.7. Tracking for Multiple Machines
-    Chapter 27. DTrace
    -   27.1. Synopsis
    -   27.2. Implementation Differences
    -   27.3. Enabling DTrace Support
    -   27.4. Using DTrace
-    Chapter 28. USB Device Mode / USB OTG
    -   28.1. Synopsis
    -   28.2. USB Virtual Serial Ports
    -   28.3. USB Device Mode Network Interfaces
    -   28.4. USB Virtual Storage Device
-    Part IV. Network Communication
-    Chapter 29. Serial Communications
    -   29.1. Synopsis
    -   29.2. Serial Terminology and Hardware
    -   29.3. Terminals
    -   29.4. Dial-in Service
    -   29.5. Dial-out Service
    -   29.6. Setting Up the Serial Console
-    Chapter 30. PPP
    -   30.1. Synopsis
    -   30.2. Configuring PPP
    -   30.3. Troubleshooting PPP Connections
    -   30.4. Using PPP over Ethernet (PPPoE)
    -   30.5. Using PPP over ATM (PPPoA)
-    Chapter 31. Electronic Mail
    -   31.1. Synopsis
    -   31.2. Mail Components
    -   31.3. Sendmail Configuration Files
    -   31.4. Changing the Mail Transfer Agent
    -   31.5. Troubleshooting
    -   31.6. Advanced Topics
    -   31.7. Setting Up to Send Only
    -   31.8. Using Mail with a Dialup Connection
    -   31.9. SMTP Authentication
    -   31.10. Mail User Agents
    -   31.11. Using fetchmail
    -   31.12. Using procmail
-    Chapter 32. Network Servers
    -   32.1. Synopsis
    -   32.2. The inetd Super-Server
    -   32.3. Network File System (NFS)
    -   32.4. Network Information System (NIS)
    -   32.5. Lightweight Directory Access Protocol (LDAP)
    -   32.6. Dynamic Host Configuration Protocol (DHCP)
    -   32.7. Domain Name System (DNS)
    -   32.8. Apache HTTP Server
    -   32.9. File Transfer Protocol (FTP)
    -   32.10. File and Print Services for Microsoft® Windows® Clients
        (Samba)
    -   32.11. Clock Synchronization with NTP
    -   32.12. iSCSI Initiator and Target Configuration
-    Chapter 33. Firewalls
    -   33.1. Synopsis
    -   33.2. Firewall Concepts
    -   33.3. PF
    -   33.4. IPFW
    -   33.5. IPFILTER (IPF)
    -   33.6. Blacklistd
-    Chapter 34. Advanced Networking
    -   34.1. Synopsis
    -   34.2. Gateways and Routes
    -   34.3. Virtual Hosts
    -   34.4. Wireless Advanced Authentication
    -   34.5. Wireless Ad-hoc Mode
    -   34.6. USB Tethering
    -   34.7. Bluetooth
    -   34.8. Bridging
    -   34.9. Link Aggregation and Failover
    -   34.10. Diskless Operation with PXE
    -   34.11. Common Address Redundancy Protocol (CARP)
    -   34.12. VLANs
-    Part V. Appendices
-    Appendix A. Obtaining FreeBSD
    -   A.1. Mirrors
    -   A.2. Using Git
    -   A.3. Using Subversion
    -   A.4. CD and DVD Sets
-    Appendix B. Bibliography
    -   B.1. FreeBSD Bibliography
    -   B.2. Security Reference
    -   B.3. UNIX® History
    -   B.4. Periodicals, Journals, and Magazines
-    Appendix C. Resources on the Internet
    -   C.1. Websites
    -   C.2. Mailing Lists
    -   C.3. Usenet Newsgroups
-    Appendix D. OpenPGP Keys
    -   D.1. Officers
-    FreeBSD Glossary
-    Colophon
-   
-   

Book menu

Chapter 12. Linux Binary Compatibility

Table of Contents

-   12.1. Synopsis
-   12.2. Configuring Linux Binary Compatibility
-   12.3. Linux userlands
-   12.4. Advanced Topics

12.1. Synopsis

FreeBSD provides optional binary compatibility with Linux®, commonly
referred to as Linuxulator, allowing users to install and run unmodified
Linux binaries. It is available for the x86 (both 32 and 64 bit) and
AArch64 architectures. Some Linux-specific operating system features are
not yet supported; this mostly happens with functionality specific to
hardware or related to system management, such as cgroups or namespaces.

Before reading this chapter, you should:

-   Know how to install additional third-party software.

After reading this chapter, you will know:

-   How to enable Linux binary compatibility on a FreeBSD system.

-   How to install additional Linux shared libraries.

-   How to install Linux applications on a FreeBSD system.

-   The implementation details of Linux compatibility in FreeBSD.

12.2. Configuring Linux Binary Compatibility

By default, linux(4) binary compatibility is not enabled.

To enable the Linux ABI at boot time, execute the following command:

    # sysrc linux_enable="YES"

Once enabled, it can be started without rebooting executing the
following command:

    # service linux start

This is enough for statically linked Linux binaries to work.

The Linux service will load necessary kernel modules and mount
filesystems expected by Linux applications under /compat/linux. They can
be started in the same way native FreeBSD binaries can; they behave
almost exactly like native processes and can be traced and debugged the
usual way.

The current content of /compat/linux can be checked executing the
following command:

    # ls -l /compat/linux/

The output should be similar to the following:

    total 1
    dr-xr-xr-x  13 root  wheel  512 Apr 11 19:12 dev
    dr-xr-xr-x   1 root  wheel    0 Apr 11 21:03 proc
    dr-xr-xr-x   1 root  wheel    0 Apr 11 21:03 sys

12.3. Linux userlands

Linux software requires more than just an ABI to work. In order to run
Linux software a Linux userland must be installed first.

+-----------------------------------+-----------------------------------+
|                                   | If all that is wanted is to run   |
|                                   | some software already included in |
|                                   | the Ports tree, it can be         |
|                                   | installed via package manager and |
|                                   | pkg(8) will automatically setup   |
|                                   | the required Linux userland.      |
|                                   |                                   |
|                                   | For example, to install Sublime   |
|                                   | Text 4, along with all the Linux  |
|                                   | libraries it depends on, run this |
|                                   | command:                          |
|                                   |                                   |
|                                   |                                   |
|                                   | # pkg install linux-sublime-text4 |
+-----------------------------------+-----------------------------------+

12.3.1. CentOS Base System from FreeBSD Packages

To install the CentOS userland execute the following command:

    # pkg install linux_base-c7

emulators/linux_base-c7 will place the base system derived from CentOS 7
into /compat/linux.

After installing the package, the contents of /compat/linux can be
verified by running the following command to check that the CentOS
userland has been installed:

    # ls -l /compat/linux/

The output should be similar to the following:

    total 30
    lrwxr-xr-x   1 root  wheel    7 Apr 11  2018 bin -> usr/bin
    drwxr-xr-x  13 root  wheel  512 Apr 11 21:10 dev
    drwxr-xr-x  25 root  wheel   64 Apr 11 21:10 etc
    lrwxr-xr-x   1 root  wheel    7 Apr 11  2018 lib -> usr/lib
    lrwxr-xr-x   1 root  wheel    9 Apr 11  2018 lib64 -> usr/lib64
    drwxr-xr-x   2 root  wheel    2 Apr 11 21:10 opt
    dr-xr-xr-x   1 root  wheel    0 Apr 11 21:25 proc
    lrwxr-xr-x   1 root  wheel    8 Feb 18 02:10 run -> /var/run
    lrwxr-xr-x   1 root  wheel    8 Apr 11  2018 sbin -> usr/sbin
    drwxr-xr-x   2 root  wheel    2 Apr 11 21:10 srv
    dr-xr-xr-x   1 root  wheel    0 Apr 11 21:25 sys
    drwxr-xr-x   8 root  wheel    9 Apr 11 21:10 usr
    drwxr-xr-x  16 root  wheel   17 Apr 11 21:10 var

12.3.2. Debian / Ubuntu Base System with debootstrap

An alternative way of providing Linux shared libraries is by using
sysutils/debootstrap. This has the advantage of providing a full Debian
or Ubuntu distribution.

To install debootstrap execute the following command:

    # pkg install debootstrap

debootstrap(8) needs linux(4) ABI enabled. Once enabled, execute the
following command to install Ubuntu or Debian in /compat/ubuntu:

    # debootstrap focal /compat/ubuntu

+-----------------------------------+-----------------------------------+
|                                   | While it is technically possible  |
|                                   | to install into /compat/linux     |
|                                   | instead, it’s discouraged due to  |
|                                   | possible clashes with             |
|                                   | CentOS-based packages. Instead,   |
|                                   | derive the directory name from    |
|                                   | the distribution or version name, |
|                                   | e.g., /compat/ubuntu.             |
+-----------------------------------+-----------------------------------+

The output should be similar to the following:

    I: Retrieving InRelease
    I: Checking Release signature
    I: Valid Release signature (key id F6ECB3762474EDA9D21B7022871920D1991BC93C)
    I: Retrieving Packages
    I: Validating Packages
    I: Resolving dependencies of required packages...
    I: Resolving dependencies of base packages...
    I: Checking component main on http://archive.ubuntu.com/ubuntu...
    [...]
    I: Configuring console-setup...
    I: Configuring kbd...
    I: Configuring ubuntu-minimal...
    I: Configuring libc-bin...
    I: Configuring ca-certificates...
    I: Base system installed successfully.

Then set up mounts in /etc/fstab.

+-----------------------------------+-----------------------------------+
|                                   | If the contents of the home       |
|                                   | directory should be shared and to |
|                                   | be able to run X11 applications,  |
|                                   | /home and /tmp should be mounted  |
|                                   | in the linux compat area using    |
|                                   | nullfs(5) for loopback.           |
|                                   |                                   |
|                                   | The following example can be      |
|                                   | added to /etc/fstab:              |
|                                   |                                   |
|                                   |                                   |
|                                   |  # Device        Mountpoint       |
|                                   |         FStype          Options   |
|                                   |                     Dump    Pass# |
|                                   |     devfs           /compat/ubun  |
|                                   | tu/dev      devfs           rw,la |
|                                   | te                      0       0 |
|                                   |     tmpfs           /compat/ubun  |
|                                   | tu/dev/shm  tmpfs           rw,la |
|                                   | te,size=1g,mode=1777    0       0 |
|                                   |     fdescfs         /compat/ubun  |
|                                   | tu/dev/fd   fdescfs         rw,la |
|                                   | te,linrdlnk             0       0 |
|                                   |     linprocfs       /compat/ubun  |
|                                   | tu/proc     linprocfs       rw,la |
|                                   | te                      0       0 |
|                                   |     linsysfs        /compat/ubun  |
|                                   | tu/sys      linsysfs        rw,la |
|                                   | te                      0       0 |
|                                   |     /tmp            /compat/ubun  |
|                                   | tu/tmp      nullfs          rw,la |
|                                   | te                      0       0 |
|                                   |     /home           /compat/ubun  |
|                                   | tu/home     nullfs          rw,la |
|                                   | te                      0       0 |
|                                   |                                   |
|                                   | Then execute mount(8):            |
|                                   |                                   |
|                                   |     # mount -al                   |
+-----------------------------------+-----------------------------------+

To access the system using chroot(8) execute the following command:

    # chroot /compat/ubuntu /bin/bash

Then uname(1) can be executed to check the Linux environment:

    # uname -s -r -m

The output should be similar to the following:

    Linux 3.17.0 x86_64

Once inside the chroot, the system behaves as in a normal Ubuntu
installation While systemd doesn’t work, the service(8) command works as
usual.

+-----------------------------------+-----------------------------------+
|                                   | To add the package repositories   |
|                                   | missing from defaults edit the    |
|                                   | file                              |
|                                   | /co                               |
|                                   | mpat/ubuntu/etc/apt/sources.list. |
|                                   |                                   |
|                                   | For amd64 the following example   |
|                                   | can be used:                      |
|                                   |                                   |
|                                   |     deb http://a                  |
|                                   | rchive.ubuntu.com/ubuntu focal ma |
|                                   | in universe restricted multiverse |
|                                   |     deb http://security.ubu       |
|                                   | ntu.com/ubuntu/ focal-security un |
|                                   | iverse multiverse restricted main |
|                                   |     deb http://archive.ubu        |
|                                   | ntu.com/ubuntu focal-backports un |
|                                   | iverse multiverse restricted main |
|                                   |     deb http://archive.u          |
|                                   | buntu.com/ubuntu focal-updates un |
|                                   | iverse multiverse restricted main |
|                                   |                                   |
|                                   | For arm64 this other example can  |
|                                   | be used:                          |
|                                   |                                   |
|                                   |     deb http://ports.             |
|                                   | ubuntu.com/ubuntu-ports bionic ma |
|                                   | in universe restricted multiverse |
+-----------------------------------+-----------------------------------+

12.4. Advanced Topics

A list of all Linux-related sysctl(8) knobs can be found in linux(4).

Some applications require specific filesystems to be mounted.

This is normally handled by the /etc/rc.d/linux script but can be
disabled at boot executing the following command:

    sysrc linux_mounts_enable="NO"

Filesystems mounted by the rc script will not work for Linux processes
inside chroots or jails; if needed, configure them in /etc/fstab:

    devfs      /compat/linux/dev      devfs      rw,late                    0  0
    tmpfs      /compat/linux/dev/shm  tmpfs      rw,late,size=1g,mode=1777  0  0
    fdescfs    /compat/linux/dev/fd   fdescfs    rw,late,linrdlnk           0  0
    linprocfs  /compat/linux/proc     linprocfs  rw,late                    0  0
    linsysfs   /compat/linux/sys      linsysfs   rw,late                    0  0

Since the Linux binary compatibility layer has gained support for
running both 32- and 64-bit Linux binaries, it is no longer possible to
link the emulation functionality statically into a custom kernel.

12.4.1. Installing Additional Libraries Manually

+-----------------------------------+-----------------------------------+
|                                   | For base system subdirectories    |
|                                   | created with debootstrap(8), use  |
|                                   | the instructions above instead.   |
+-----------------------------------+-----------------------------------+

If a Linux application complains about missing shared libraries after
configuring Linux binary compatibility, determine which shared libraries
the Linux binary needs and install them manually.

From a Linux system using the same CPU architecture, ldd can be used to
determine which shared libraries the application needs.

For example, to check which shared libraries linuxdoom needs, run this
command from a Linux system that has Doom installed:

    % ldd linuxdoom

The output should be similar to the following:

    libXt.so.3 (DLL Jump 3.1) => /usr/X11/lib/libXt.so.3.1.0
    libX11.so.3 (DLL Jump 3.1) => /usr/X11/lib/libX11.so.3.1.0
    libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29

Then, copy all the files in the last column of the output from the Linux
system into /compat/linux on the FreeBSD system. Once copied, create
symbolic links to the names in the first column.

This example will result in the following files on the FreeBSD system:

    /compat/linux/usr/X11/lib/libXt.so.3.1.0
    /compat/linux/usr/X11/lib/libXt.so.3 -> libXt.so.3.1.0
    /compat/linux/usr/X11/lib/libX11.so.3.1.0
    /compat/linux/usr/X11/lib/libX11.so.3 -> libX11.so.3.1.0
    /compat/linux/lib/libc.so.4.6.29
    /compat/linux/lib/libc.so.4 -> libc.so.4.6.29

If a Linux shared library already exists with a matching major revision
number to the first column of the ldd output, it does not need to be
copied to the file named in the last column, as the existing library
should work. It is advisable to copy the shared library if it is a newer
version, though. The old one can be removed, as long as the symbolic
link points to the new one.

For example, these libraries already exist on the FreeBSD system:

    /compat/linux/lib/libc.so.4.6.27
    /compat/linux/lib/libc.so.4 -> libc.so.4.6.27

and ldd indicates that a binary requires a later version:

    libc.so.4 (DLL Jump 4.5pl26) -> libc.so.4.6.29

Since the existing library is only one or two versions out of date in
the last digit, the program should still work with the slightly older
version. However, it is safe to replace the existing libc.so with the
newer version:

    /compat/linux/lib/libc.so.4.6.29
    /compat/linux/lib/libc.so.4 -> libc.so.4.6.29

Generally, one will need to look for the shared libraries that Linux
binaries depend on only the first few times that a Linux program is
installed on FreeBSD. After a while, there will be a sufficient set of
Linux shared libraries on the system to be able to run newly installed
Linux binaries without any extra work.

12.4.2. Branding Linux ELF Binaries

The FreeBSD kernel uses several methods to determine if the binary to be
executed is a Linux one: it checks the brand in the ELF file header,
looks for known ELF interpreter paths and checks ELF notes; finally, by
default, unbranded ELF executables are assumed to be Linux anyway.

Should all those methods fail, an attempt to execute the binary might
result in error message:

    % ./my-linux-elf-binary

The output should be similar to the following:

    ELF binary type not known
    Abort

To help the FreeBSD kernel distinguish between a FreeBSD ELF binary and
a Linux binary, use brandelf(1):

    % brandelf -t Linux my-linux-elf-binary

12.4.3. Installing a Linux RPM Based Application

To install a Linux RPM-based application, first install the
archivers/rpm4 package or port. Once installed, root can use this
command to install a .rpm:

    # cd /compat/linux
    # rpm2cpio < /path/to/linux.archive.rpm | cpio -id

If necessary, brandelf the installed ELF binaries. Note that this will
prevent a clean uninstall.

12.4.4. Configuring the Hostname Resolver

If DNS does not work or this error appears:

    resolv+: "bind" is an invalid keyword resolv+:
    "hosts" is an invalid keyword

configure /compat/linux/etc/host.conf as follows:

    order hosts, bind
    multi on

This specifies that /etc/hosts is searched first and DNS is searched
second. When /compat/linux/etc/host.conf does not exist, Linux
applications use /etc/host.conf in the host system but they complain
since that file does not exist in FreeBSD. Remove bind if a name server
is not configured using /etc/resolv.conf.

12.4.5. Miscellaneous

More information on how binary compatibility works with Linux® can be
found in the article Linux emulation in FreeBSD.

------------------------------------------------------------------------

Last modified on: July 6, 2023 by Sergio Carlavilla Delgado

Prev

Home

Next

Table of Contents

-   12.1. Synopsis
-   12.2. Configuring Linux Binary Compatibility
-   12.3. Linux userlands
-   12.4. Advanced Topics

------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

