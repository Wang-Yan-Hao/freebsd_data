
-    Preface
    -   Intended Audience
    -   Fourth Edition
    -   Third Edition
    -   Second Edition (2004)
    -   First Edition (2001)
    -   Organization of This Book
    -   Conventions used in this book
    -   Acknowledgments
-    Part I. Getting Started
-    Chapter 1. Introduction
    -   1.1. Synopsis
    -   1.2. Welcome to FreeBSD!
    -   1.3. About the FreeBSD Project
-    Chapter 2. Installing FreeBSD
    -   2.1. Synopsis
    -   2.2. Minimum Hardware Requirements
    -   2.3. Pre-Installation Tasks
    -   2.4. Starting the Installation
    -   2.5. Using bsdinstall
    -   2.6. Allocating Disk Space
    -   2.7. Fetching Distribution Files
    -   2.8. Network Interfaces, Accounts, Time Zone, Services and
        Hardening
    -   2.9. Troubleshooting
    -   2.10. Using the Live CD
-    Chapter 3. FreeBSD Basics
    -   3.1. Synopsis
    -   3.2. Virtual Consoles and Terminals
    -   3.3. Users and Basic Account Management
    -   3.4. Permissions
    -   3.5. Directory Structure
    -   3.6. Disk Organization
    -   3.7. Mounting and Unmounting File Systems
    -   3.8. Processes and Daemons
    -   3.9. Shells
    -   3.10. Text Editors
    -   3.11. Devices and Device Nodes
    -   3.12. Manual Pages
-    Chapter 4. Installing Applications: Packages and Ports
    -   4.1. Synopsis
    -   4.2. Overview of Software Installation
    -   4.3. Finding Software
    -   4.4. Using pkg for Binary Package Management
    -   4.5. Using the Ports Collection
    -   4.6. Building Packages with Poudriere
    -   4.7. Post-Installation Considerations
    -   4.8. Dealing with Broken Ports
-    Chapter 5. The X Window System
    -   5.1. Synopsis
    -   5.2. Installing Xorg
    -   5.3. Graphic card drivers
    -   5.4. Xorg Configuration
    -   5.5. Using Fonts in Xorg
-    Chapter 6. Wayland
    -   6.1. Wayland Synopsis
    -   6.2. The Wayfire Compositor
    -   6.3. The Hikari Compositor
    -   6.4. The Sway Compositor
    -   6.5. Using Xwayland
    -   6.6. Remote Desktop Using VNC
    -   6.7. Wayland Login Manager
    -   6.8. Useful Utilities
-    Chapter 7. Network
    -   7.1. Synopsis
    -   7.2. Setting up the Network
    -   7.3. Wired Networks
    -   7.4. Wireless Networks
    -   7.5. Hostname
    -   7.6. DNS
    -   7.7. Troubleshooting
-    Part II. Common Tasks
-    Chapter 8. Desktop Environments
    -   8.1. Synopsis
    -   8.2. Desktop Environments
    -   8.3. Browsers
    -   8.4. Development tools
    -   8.5. Desktop office productivity
    -   8.6. Document Viewers
    -   8.7. Finance
-    Chapter 9. Multimedia
    -   9.1. Synopsis
    -   9.2. Setting Up the Sound Card
    -   9.3. Audio players
    -   9.4. Video players
    -   9.5. Conferencing and Meetings
    -   9.6. Image Scanners
-    Chapter 10. Configuring the FreeBSD Kernel
    -   10.1. Synopsis
    -   10.2. Why Build a Custom Kernel?
    -   10.3. Finding the System Hardware
    -   10.4. The Configuration File
    -   10.5. Building and Installing a Custom Kernel
    -   10.6. If Something Goes Wrong
-    Chapter 11. Printing
    -   11.1. Quick Start
    -   11.2. Printer Connections
    -   11.3. Common Page Description Languages
    -   11.4. Direct Printing
    -   11.5. LPD (Line Printer Daemon)
    -   11.6. Other Printing Systems
-    Chapter 12. Linux Binary Compatibility
    -   12.1. Synopsis
    -   12.2. Configuring Linux Binary Compatibility
    -   12.3. Linux userlands
    -   12.4. Advanced Topics
-    Chapter 13. WINE
    -   13.1. Synopsis
    -   13.2. WINE Overview & Concepts
    -   13.3. Installing WINE on FreeBSD
    -   13.4. Running a First WINE Program on FreeBSD
    -   13.5. Configuring WINE Installation
    -   13.6. WINE Management GUIs
    -   13.7. WINE in Multi-User FreeBSD Installations
    -   13.8. WINE on FreeBSD FAQ
-    Part III. System Administration
-    Chapter 14. Configuration and Tuning
    -   14.1. Synopsis
    -   14.2. Starting Services
    -   14.3. Configuring cron(8)
    -   14.4. Managing Services in FreeBSD
    -   14.5. Configuring System Logging
    -   14.6. Configuration Files
    -   14.7. Tuning with sysctl(8)
    -   14.8. Tuning Disks
    -   14.9. Tuning Kernel Limits
    -   14.10. Adding Swap Space
    -   14.11. Power and Resource Management
-    Chapter 15. The FreeBSD Booting Process
    -   15.1. Synopsis
    -   15.2. FreeBSD Boot Process
    -   15.3. Device Hints
    -   15.4. Shutdown Sequence
-    Chapter 16. Security
    -   16.1. Synopsis
    -   16.2. Introduction
    -   16.3. One-time Passwords
    -   16.4. TCP Wrapper
    -   16.5. Kerberos
    -   16.6. OpenSSL
    -   16.7. VPN over IPsec
    -   16.8. OpenSSH
    -   16.9. Access Control Lists
    -   16.10. Monitoring Third Party Security Issues
    -   16.11. FreeBSD Security Advisories
    -   16.12. Process Accounting
    -   16.13. Resource Limits
    -   16.14. Shared Administration with Sudo
    -   16.15. Using doas as an alternative to sudo
-    Chapter 17. Jails
    -   17.1. Synopsis
    -   17.2. Terms Related to Jails
    -   17.3. Creating and Controlling Jails
    -   17.4. Fine Tuning and Administration
    -   17.5. Updating Multiple Jails
    -   17.6. Managing Jails with ezjail
-    Chapter 18. Mandatory Access Control
    -   18.1. Synopsis
    -   18.2. Key Terms
    -   18.3. Understanding MAC Labels
    -   18.4. Planning the Security Configuration
    -   18.5. Available MAC Policies
    -   18.6. User Lock Down
    -   18.7. Nagios in a MAC Jail
    -   18.8. Troubleshooting the MAC Framework
-    Chapter 19. Security Event Auditing
    -   19.1. Synopsis
    -   19.2. Key Terms
    -   19.3. Audit Configuration
    -   19.4. Working with Audit Trails
-    Chapter 20. Storage
    -   20.1. Synopsis
    -   20.2. Adding Disks
    -   20.3. Resizing and Growing Disks
    -   20.4. USB Storage Devices
    -   20.5. Creating and Using CD Media
    -   20.6. Creating and Using DVD Media
    -   20.7. Creating and Using Floppy Disks
    -   20.8. Using NTFS Disks
    -   20.9. Backup Basics
    -   20.10. Memory Disks
    -   20.11. File System Snapshots
    -   20.12. Disk Quotas
    -   20.13. Encrypting Disk Partitions
    -   20.14. Encrypting Swap
    -   20.15. Highly Available Storage (HAST)
-    Chapter 21. GEOM: Modular Disk Transformation Framework
    -   21.1. Synopsis
    -   21.2. RAID0 - Striping
    -   21.3. RAID1 - Mirroring
    -   21.4. RAID3 - Byte-level Striping with Dedicated Parity
    -   21.5. Software RAID Devices
    -   21.6. GEOM Gate Network
    -   21.7. Labeling Disk Devices
    -   21.8. UFS Journaling Through GEOM
-    Chapter 22. The Z File System (ZFS)
    -   22.1. What Makes ZFS Different
    -   22.2. Quick Start Guide
    -   22.3. zpool Administration
    -   22.4. zfs Administration
    -   22.5. Delegated Administration
    -   22.6. Advanced Topics
<<<<<<< HEAD
=======
    -   22.7. Further Resources
    -   22.8. ZFS Features and Terminology
-    Chapter 23. Other File Systems
    -   23.1. Synopsis
    -   23.2. Linux® File Systems
-    Chapter 24. Virtualization
    -   24.1. Synopsis
    -   24.2. FreeBSD as a Guest on Parallels Desktop for macOS®
    -   24.3. FreeBSD as a Guest on VMware Fusion for macOS®
    -   24.4. FreeBSD as a Guest on VirtualBox™
    -   24.5. FreeBSD as a Host with VirtualBox™
    -   24.6. FreeBSD as a Host with bhyve
    -   24.7. FreeBSD as a Xen™-Host
-    Chapter 25. Localization - i18n/L10n Usage and Setup
    -   25.1. Synopsis
    -   25.2. Using Localization
    -   25.3. Finding i18n Applications
    -   25.4. Locale Configuration for Specific Languages
-    Chapter 26. Updating and Upgrading FreeBSD
    -   26.1. Synopsis
    -   26.2. FreeBSD Update
    -   26.3. Updating Bootcode
    -   26.4. Updating the Documentation Set
    -   26.5. Tracking a Development Branch
    -   26.6. Updating FreeBSD from Source
    -   26.7. Tracking for Multiple Machines
-    Chapter 27. DTrace
    -   27.1. Synopsis
    -   27.2. Implementation Differences
    -   27.3. Enabling DTrace Support
    -   27.4. Using DTrace
-    Chapter 28. USB Device Mode / USB OTG
    -   28.1. Synopsis
    -   28.2. USB Virtual Serial Ports
    -   28.3. USB Device Mode Network Interfaces
    -   28.4. USB Virtual Storage Device
-    Part IV. Network Communication
-    Chapter 29. Serial Communications
    -   29.1. Synopsis
    -   29.2. Serial Terminology and Hardware
    -   29.3. Terminals
    -   29.4. Dial-in Service
    -   29.5. Dial-out Service
    -   29.6. Setting Up the Serial Console
-    Chapter 30. PPP
    -   30.1. Synopsis
    -   30.2. Configuring PPP
    -   30.3. Troubleshooting PPP Connections
    -   30.4. Using PPP over Ethernet (PPPoE)
    -   30.5. Using PPP over ATM (PPPoA)
-    Chapter 31. Electronic Mail
    -   31.1. Synopsis
    -   31.2. Mail Components
    -   31.3. Sendmail Configuration Files
    -   31.4. Changing the Mail Transfer Agent
    -   31.5. Troubleshooting
    -   31.6. Advanced Topics
    -   31.7. Setting Up to Send Only
    -   31.8. Using Mail with a Dialup Connection
    -   31.9. SMTP Authentication
    -   31.10. Mail User Agents
    -   31.11. Using fetchmail
    -   31.12. Using procmail
-    Chapter 32. Network Servers
    -   32.1. Synopsis
    -   32.2. The inetd Super-Server
    -   32.3. Network File System (NFS)
    -   32.4. Network Information System (NIS)
    -   32.5. Lightweight Directory Access Protocol (LDAP)
    -   32.6. Dynamic Host Configuration Protocol (DHCP)
    -   32.7. Domain Name System (DNS)
    -   32.8. Apache HTTP Server
    -   32.9. File Transfer Protocol (FTP)
    -   32.10. File and Print Services for Microsoft® Windows® Clients
        (Samba)
    -   32.11. Clock Synchronization with NTP
    -   32.12. iSCSI Initiator and Target Configuration
-    Chapter 33. Firewalls
    -   33.1. Synopsis
    -   33.2. Firewall Concepts
    -   33.3. PF
    -   33.4. IPFW
    -   33.5. IPFILTER (IPF)
    -   33.6. Blacklistd
-    Chapter 34. Advanced Networking
    -   34.1. Synopsis
    -   34.2. Gateways and Routes
    -   34.3. Virtual Hosts
    -   34.4. Wireless Advanced Authentication
    -   34.5. Wireless Ad-hoc Mode
    -   34.6. USB Tethering
    -   34.7. Bluetooth
    -   34.8. Bridging
    -   34.9. Link Aggregation and Failover
    -   34.10. Diskless Operation with PXE
    -   34.11. Common Address Redundancy Protocol (CARP)
    -   34.12. VLANs
-    Part V. Appendices
-    Appendix A. Obtaining FreeBSD
    -   A.1. Mirrors
    -   A.2. Using Git
    -   A.3. Using Subversion
    -   A.4. CD and DVD Sets
-    Appendix B. Bibliography
    -   B.1. FreeBSD Bibliography
    -   B.2. Security Reference
    -   B.3. UNIX® History
    -   B.4. Periodicals, Journals, and Magazines
-    Appendix C. Resources on the Internet
    -   C.1. Websites
    -   C.2. Mailing Lists
    -   C.3. Usenet Newsgroups
-    Appendix D. OpenPGP Keys
    -   D.1. Officers
-    FreeBSD Glossary
-    Colophon
-   
-   

Book menu

Chapter 1. Introduction

Table of Contents

-   1.1. Synopsis
-   1.2. Welcome to FreeBSD!
-   1.3. About the FreeBSD Project

1.1. Synopsis

Thank you for your interest in FreeBSD! The following chapter covers
various aspects of the FreeBSD Project, such as its history, goals,
development model, and so on.

After reading this chapter you will know:

-   How FreeBSD relates to other computer operating systems.

-   The history of the FreeBSD Project.

-   The goals of the FreeBSD Project.

-   The basics of the FreeBSD open-source development model.

-   And of course: where the name "FreeBSD" comes from.

1.2. Welcome to FreeBSD\!

FreeBSD is an Open Source, standards-compliant Unix-like operating
system for x86 (both 32 and 64 bit), ARM®, AArch64, RISC-V®, MIPS®,
POWER®, PowerPC®, and Sun UltraSPARC® computers. It provides all the
features that are nowadays taken for granted, such as preemptive
multitasking, memory protection, virtual memory, multi-user facilities,
SMP support, all the Open Source development tools for different
languages and frameworks, and desktop features centered around X Window
System, KDE, or GNOME. Its particular strengths are:

-   Liberal Open Source license, which grants you rights to freely
    modify and extend its source code and incorporate it in both Open
    Source projects and closed products without imposing restrictions
    typical to copyleft licenses, as well as avoiding potential license
    incompatibility problems.

-   Strong TCP/IP networking - FreeBSD implements industry standard
    protocols with ever increasing performance and scalability. This
    makes it a good match in both server, and routing/firewalling
    roles - and indeed many companies and vendors use it precisely for
    that purpose.

-   Fully integrated OpenZFS support, including root-on-ZFS, ZFS Boot
    Environments, fault management, administrative delegation, support
    for jails, FreeBSD specific documentation, and system installer
    support.

-   Extensive security features, from the Mandatory Access Control
    framework to Capsicum capability and sandbox mechanisms.

-   Over 30 thousand prebuilt packages for all supported architectures,
    and the Ports Collection which makes it easy to build your own,
    customized ones.

-   Documentation - in addition to the Handbook and books from different
    authors that cover topics ranging from system administration to
    kernel internals, there are also the man(1) pages, not only for
    userspace daemons, utilities, and configuration files, but also for
    kernel driver APIs (section 9) and individual drivers (section 4).

-   Simple and consistent repository structure and build system -
    FreeBSD uses a single repository for all of its components, both
    kernel and userspace. This, along with a unified and easy to
    customize build system and a well thought-out development process
    makes it easy to integrate FreeBSD with build infrastructure for
    your own product.

-   Staying true to Unix philosophy, preferring composability instead of
    monolithic "all in one" daemons with hardcoded behavior.

-   Binary compatibility with Linux, which makes it possible to run many
    Linux binaries without the need for virtualisation.

FreeBSD is based on the 4.4BSD-Lite release from Computer Systems
Research Group (CSRG) at the University of California at Berkeley, and
carries on the distinguished tradition of BSD systems development. In
addition to the fine work provided by CSRG, the FreeBSD Project has put
in many thousands of man-hours into extending the functionality and
fine-tuning the system for maximum performance and reliability in
real-life load situations. FreeBSD offers performance and reliability on
par with other Open Source and commercial offerings, combined with
cutting-edge features not available anywhere else.

1.2.1. What Can FreeBSD Do?

The applications to which FreeBSD can be put are truly limited only by
your own imagination. From software development to factory automation,
inventory control to azimuth correction of remote satellite antenna; if
it can be done with a commercial UNIX® product then it is more than
likely that you can do it with FreeBSD too! FreeBSD also benefits
significantly from literally thousands of high quality applications
developed by research centers and universities around the world, often
available at little to no cost.

Because the source code for FreeBSD itself is freely available, the
system can also be customized to an almost unheard-of degree for special
applications or projects, and in ways not generally possible with
operating systems from most major commercial vendors. Here is just a
sampling of some of the applications in which people are currently using
FreeBSD:

-   Internet Services: The robust TCP/IP networking built into FreeBSD
    makes it an ideal platform for a variety of Internet services such
    as:

    -   Web servers

    -   IPv4 and IPv6 routing

    -   Firewalls and NAT ("IP masquerading") gateways

    -   FTP servers

    -   Email servers

    -   And more…​

-   Education: Are you a student of computer science or a related
    engineering field? There is no better way of learning about
    operating systems, computer architecture and networking than the
    hands-on, under-the-hood experience that FreeBSD can provide. A
    number of freely available CAD, mathematical and graphic design
    packages also make it highly useful to those whose primary interest
    in a computer is to get other work done!

-   Research: With source code for the entire system available, FreeBSD
    is an excellent platform for research in operating systems as well
    as other branches of computer science. FreeBSD’s freely available
    nature also makes it possible for remote groups to collaborate on
    ideas or shared development without having to worry about special
    licensing agreements or limitations on what may be discussed in open
    forums.

-   Networking: Need a new router? A name server (DNS)? A firewall to
    keep people out of your internal network? FreeBSD can easily turn
    that unused PC sitting in the corner into an advanced router with
    sophisticated packet-filtering capabilities.

-   Embedded: FreeBSD makes an excellent platform to build embedded
    systems upon. With support for the ARM®, MIPS® and PowerPC®
    platforms, coupled with a robust network stack, cutting edge
    features, and the permissive BSD license, FreeBSD makes an excellent
    foundation for building embedded routers, firewalls, and other
    devices.

-   Desktop: FreeBSD makes a fine choice for an inexpensive desktop
    solution using the freely available X11 server and Wayland display
    server. FreeBSD offers a choice from many open-source desktop
    environments, including the standard GNOME and KDE graphical user
    interfaces. FreeBSD can even boot "diskless" from a central server,
    making individual workstations even cheaper and easier to
    administer.

-   Software Development: The basic FreeBSD system comes with a full
    suite of development tools including a full C/C++ compiler and
    debugger suite. Support for many other languages are also available
    through the ports and packages collection.

FreeBSD is available to download free of charge, or can be obtained on
either CD-ROM or DVD. Please see Obtaining FreeBSD for more information
about obtaining FreeBSD.

1.2.2. Who Uses FreeBSD?

FreeBSD has been known for its web serving capabilities. A list of
testimonials from companies basing their products and services on
FreeBSD can be found at the FreeBSD Foundation website. Wikipedia also
maintains a list of products based on FreeBSD.

1.3. About the FreeBSD Project

The following section provides some background information on the
project, including a brief history, project goals, and the development
model of the project.

1.3.1. A Brief History of FreeBSD

The FreeBSD Project had its genesis in the early part of 1993, partially
as the brainchild of the Unofficial 386BSDPatchkit’s last 3
coordinators: Nate Williams, Rod Grimes and Jordan Hubbard.

The original goal was to produce an intermediate snapshot of 386BSD in
order to fix a number of problems that the patchkit mechanism was just
not capable of solving. The early working title for the project was
386BSD 0.5 or 386BSD Interim in reference to that fact.

386BSD was Bill Jolitz’s operating system, which had been up to that
point suffering rather severely from almost a year’s worth of neglect.
As the patchkit swelled ever more uncomfortably with each passing day,
they decided to assist Bill by providing this interim "cleanup"
snapshot. Those plans came to a rude halt when Bill Jolitz suddenly
decided to withdraw his sanction from the project without any clear
indication of what would be done instead.

The trio thought that the goal remained worthwhile, even without Bill’s
support, and so they adopted the name "FreeBSD" coined by David
Greenman. The initial objectives were set after consulting with the
system’s current users and, once it became clear that the project was on
the road to perhaps even becoming a reality, Jordan contacted Walnut
Creek CDROM with an eye toward improving FreeBSD’s distribution channels
for those many unfortunates without easy access to the Internet. Walnut
Creek CDROM not only supported the idea of distributing FreeBSD on CD
but also went so far as to provide the project with a machine to work on
and a fast Internet connection. Without Walnut Creek CDROM’s almost
unprecedented degree of faith in what was, at the time, a completely
unknown project, it is quite unlikely that FreeBSD would have gotten as
far, as fast, as it has today.

The first CD-ROM (and general net-wide) distribution was FreeBSD 1.0,
released in December of 1993. This was based on the 4.3BSD-Lite
("Net/2") tape from U.C. Berkeley, with many components also provided by
386BSD and the Free Software Foundation. It was a fairly reasonable
success for a first offering, and they followed it with the highly
successful FreeBSD 1.1 release in May of 1994.

Around this time, some rather unexpected storm clouds formed on the
horizon as Novell and U.C. Berkeley settled their long-running lawsuit
over the legal status of the Berkeley Net/2 tape. A condition of that
settlement was U.C. Berkeley’s concession that three files of Net/2 were
"encumbered" code and had to be removed as they were the property of
Novell, who had in turn acquired it from AT&T some time previously. What
Berkeley got in return was Novell’s "blessing" that the 4.4BSD-Lite
release, when it was finally released, would be declared unencumbered
and all existing Net/2 users would be strongly encouraged to switch.
This included FreeBSD, and the project was given until the end of July
1994 to stop shipping its own Net/2 based product. Under the terms of
that agreement, the project was allowed one last release before the
deadline, that release being FreeBSD 1.1.5.1.

FreeBSD then set about the arduous task of literally re-inventing itself
from a completely new and rather incomplete set of 4.4BSD-Lite bits.
Although only three files having to do with System V shared memory and
semaphores were removed, many other changes and bug fixes had been made
to the BSD distribution, so it was a huge task to merge all the FreeBSD
developments into 4.4BSD-Lite. It took the project until November of
1994 to make this transition, and in December it released FreeBSD 2.0 to
the world. Despite being still more than a little rough around the
edges, the release was a significant success and was followed by the
more robust and easier to install FreeBSD 2.0.5 release in June of 1995.

Since that time, FreeBSD has made a series of releases each time
improving the stability, speed, and feature set of the previous version.

For now, long-term development projects continue to take place in the
14.0-CURRENT (main) branch, and snapshot releases of 14.0 are
continually made available from the snapshot server as work progresses.

1.3.2. FreeBSD Project Goals

The goals of the FreeBSD Project are to provide software that may be
used for any purpose and without strings attached. Many of us have a
significant investment in the code (and project) and would certainly not
mind a little financial compensation now and then, but we are definitely
not prepared to insist on it. We believe that our first and foremost
"mission" is to provide code to any and all comers, and for whatever
purpose, so that the code gets the widest possible use and provides the
widest possible benefit. This is, I believe, one of the most fundamental
goals of Free Software and one that we enthusiastically support.

That code in our source tree which falls under the GNU General Public
License (GPL) or Library General Public License (LGPL) comes with
slightly more strings attached, though at least on the side of enforced
access rather than the usual opposite. Due to the additional
complexities that can evolve in the commercial use of GPL software we
do, however, prefer software submitted under the more relaxed BSD
license when it is a reasonable option to do so.

1.3.3. The FreeBSD Development Model

The development of FreeBSD is a very open and flexible process, being
literally built from the contributions of thousands of people around the
world, as can be seen from our list of contributors. FreeBSD’s
development infrastructure allows these thousands of contributors to
collaborate over the Internet. We are constantly on the lookout for new
volunteers, and those interested in becoming more closely involved
should consult the article on Contributing to FreeBSD.

Useful things to know about the FreeBSD Project and its development
process, whether working independently or in close cooperation:

The Git repositories

    For several years, the central source tree for FreeBSD was
    maintained by CVS (Concurrent Versions System), a freely available
    source code control tool. In June 2008, the Project switched to
    using SVN (Subversion). The switch was deemed necessary, as the
    technical limitations imposed by CVS were becoming obvious due to
    the rapid expansion of the source tree and the amount of history
    already stored. The Documentation Project and Ports Collection
    repositories also moved from CVS to SVN in May 2012 and July 2012,
    respectively. In December 2020, the Project migrated Source and
    Documentation repositories to Git, with Ports following suit in
    April 2021. Please refer to the Obtaining the Source section for
    more information on obtaining the FreeBSD src/ repository and Using
    the Ports Collection for details on obtaining the FreeBSD Ports
    Collection.

The committers list

    The committers are the people who have push access to the Git
    repository, and are authorized to make modifications to the FreeBSD
    source (the term "committer" comes from commit, the source control
    command which is used to bring new changes into the repository).
    Anyone can submit a bug to the Bug Database. Before submitting a bug
    report, the FreeBSD mailing lists, IRC channels, or forums can be
    used to help verify that an issue is actually a bug.

The FreeBSD core team

    The FreeBSD core team would be equivalent to the board of directors
    if the FreeBSD Project were a company. The primary task of the core
    team is to make sure the project, as a whole, is in good shape and
    is heading in the right directions. Inviting dedicated and
    responsible developers to join our group of committers is one of the
    functions of the core team, as is the recruitment of new core team
    members as others move on. The current core team was elected from a
    pool of committer candidates in May 2022. Elections are held every 2
    years.

    +-----------------------------------+-----------------------------------+
    |                                   | Like most developers, most        |
    |                                   | members of the core team are also |
    |                                   | volunteers when it comes to       |
    |                                   | FreeBSD development and do not    |
    |                                   | benefit from the project          |
    |                                   | financially, so "commitment"      |
    |                                   | should also not be misconstrued   |
    |                                   | as meaning "guaranteed support."  |
    |                                   | The "board of directors" analogy  |
    |                                   | above is not very accurate, and   |
    |                                   | it may be more suitable to say    |
    |                                   | that these are the people who     |
    |                                   | gave up their lives in favor of   |
    |                                   | FreeBSD against their better      |
    |                                   | judgement!                        |
    +-----------------------------------+-----------------------------------+

The FreeBSD Foundation

    The FreeBSD Foundation is a 501(c)(3), US-based, non-profit
    organization dedicated to supporting and promoting the FreeBSD
    Project and community worldwide. The Foundation funds software
    development via project grants and provides staff to immediately
    respond to urgent problems and implement new features and
    functionality. The Foundation purchases hardware to improve and
    maintain FreeBSD infrastructure, and funds staffing to improve test
    coverage, continuous integration and automation. The Foundation
    advocates for FreeBSD by promoting FreeBSD at technical conferences
    and events around the world. The Foundation also provides workshops,
    educational material, and presentations to recruit more users and
    contributors to FreeBSD. The Foundation also represents the FreeBSD
    Project in executing contracts, license agreements, and other legal
    arrangements that require a recognized legal entity.

Outside contributors

    Last, but definitely not least, the largest group of developers are
    the users themselves who provide feedback and bug fixes to us on an
    almost constant basis. The primary way of keeping in touch with the
    development of the FreeBSD base system is to subscribe to the
    FreeBSD technical discussions mailing list where such things are
    discussed. For porting third party applications, it would be the
    FreeBSD ports mailing list. For documentation - FreeBSD
    documentation project mailing list. See Resources on the Internet
    for more information about the various FreeBSD mailing lists.

    The FreeBSD Contributors List is a long and growing one, so why not
    join it by contributing something back to FreeBSD today? Providing
    code is not the only way!

In summary, our development model is organized as a loose set of
concentric circles. The centralized model is designed for the
convenience of the users of FreeBSD, who are provided with an easy way
of tracking one central code base, not to keep potential contributors
out! Our desire is to present a stable operating system with a large set
of coherent application programs that the users can easily install and
use - this model works very well in accomplishing that.

All we ask of those who would join us as FreeBSD developers is some of
the same dedication its current people have to its continued success!

1.3.4. Third Party Programs

In addition to the base distributions, FreeBSD offers a ported software
collection with thousands of commonly sought-after programs. The list of
ports ranges from HTTP servers to games, languages, editors, and almost
everything in between. There are about 36000 ports; the entire Ports
Collection requires approximately 3 GB. To compile a port, you simply
change to the directory of the program you wish to install, type
make install, and let the system do the rest. The full original
distribution for each port you build is retrieved dynamically so you
need only enough disk space to build the ports you want.

Almost every port is also provided as a pre-compiled "package", which
can be installed with a simple command (pkg install) by those who do not
wish to compile their own ports from source. More information on
packages and ports can be found in Installing Applications: Packages and
Ports.

1.3.5. Additional Documentation

All supported FreeBSD versions provide an option in the installer to
install additional documentation under /usr/local/share/doc/freebsd
during the initial system setup. Documentation may also be installed
later using packages:

    # pkg install en-freebsd-doc

For localized versions replace the "en" with the language prefix of
choice. Be aware that some of the localised versions might be out of
date and might contain information that is no longer correct or
relevant. You may view the locally installed manuals with a web browser
using the following URLs:

The FreeBSD Handbook

    /usr/local/share/doc/freebsd/en/books/handbook/handbook_en.pdf

The FreeBSD FAQ

    /usr/local/share/doc/freebsd/en/books/faq/faq_en.pdf

You can always find up to date documentation at The Documentation
Portal.

------------------------------------------------------------------------

Last modified on: April 8, 2023 by Minsoo Choo

Prev

Home

Next

Table of Contents

-   1.1. Synopsis
-   1.2. Welcome to FreeBSD!
-   1.3. About the FreeBSD Project

------------------------------------------------------------------------

Resources

-   Download PDF
-   Edit this page
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)

