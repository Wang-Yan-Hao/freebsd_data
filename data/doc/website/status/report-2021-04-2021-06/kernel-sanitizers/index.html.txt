[FreeBSD The Power to Serve]

Donate to FreeBSD

 

-   Home

-   About
    -   Introduction
    -   Features
    -   Advocacy
    -   Marketing
    -   Privacy Policy
    -   Projects
    -   Ports

-   Get FreeBSD
    -   Release Information
    -   Release Engineering

-   Documentation
    -   FAQ
    -   Handbook
    -   Porter's Handbook
    -   Developer's Handbook
    -   Committer's Guide
    -   Manual Pages
    -   Presentations and Papers
    -   Documentation Project Primer
    -   All Books and Articles

-   Community
    -   Mailing Lists
    -   Forums
    -   User Groups
    -   Events
    -   FreeBSD Journal
    -   Q&A (external)

-   Developers
    -   Project Ideas
    -   Git Repository
    -   Subversion Repository
    -   GitHub Mirror
    -   Code Review (Phabricator)
    -   Wiki
    -   Continuous Integration Service

-   Support
    -   Vendors
    -   Security Information
    -   Bug Reports
    -   Submitting Bug Reports
<<<<<<< HEAD
=======
    -   Web Resources

-   Foundation
    -   Monetary Donations
    -   Hardware Donations

-   About
-   Features
-   Applications
-   Advocacy
-   Marketing
-   Administration
-   News
-   Events
-   Press
-   Artwork
-   Logo
-   Donations
-   Legal Notices
-   Privacy Policy

Kernel Sanitizers

Contact: Mark Johnston <markj@FreeBSD.org>

Sanitizers are bug detection facilities which use a combination of
instrumentation inserted by the compiler (LLVM in this case) and runtime
state tracking to detect bugs in C code. They can automatically detect
many types of C programming bugs, such as use-after-frees and uses of
uninitialized variables, which may otherwise require substantial effort
to identify. They are particularly effective in combination with
regression testing suites or fuzzing tools such as syzkaller. Unlike
tools such as Valgrind, software must be recompiled to enable a given
sanitizer, but sanitizers can be used in the kernel. Kernels with
sanitizers enabled incur a significant performance overhead from the
runtime, in both CPU utilization and memory usage.

Work has been ongoing to port a pair of kernel sanitizers from NetBSD to
FreeBSD. These are the Kernel Address SANitizer (KASAN) and Kernel
Memory SANitizer (KMSAN). The KASAN port is complete and has been
committed to FreeBSD’s development branch, and a small LLVM patch to
enable KASAN and KMSAN on FreeBSD has also been committed. KMSAN
intercepts all memory accesses and verifies that they are valid using
some hidden state saved for each memory allocation in the kernel; see
kasan(9) for further details. It can be enabled in amd64 kernels by
compiling the GENERIC-KASAN kernel configuration. The FreeBSD regression
test suite currently passes with KASAN enabled.

The KMSAN port is currently in progress and is nearing completion. KMSAN
detects uses of uninitialized memory using the algorithms described in
the original MemorySanitizer paper. In particular, it can detect
instances of uninitialized kernel memory being copied out to userspace.
Kernel subsystems may additionally call into the KMSAN runtime to verify
the state of a given buffer. This can be used, for example, to add
checks in the network stack for uninitialized bytes in egress packets. A
number of bugs have been found using KMASN and the FreeBSD regression
test suite; many have already been fixed (search for "KMSAN" in src
commit logs for examples), and patches have been written for all others
found so far.

Future work includes:

-   Finishing the KMSAN port and committing it to the FreeBSD main
    branch.

-   Enabling CI jobs to run the test suite with KASAN and KMSAN enabled.

-   Adding syzbot configurations with KASAN and KMSAN enabled, and
    fixing bugs found it.

-   Reducing the scope of memory accesses which cannot be validated
    using KASAN or KMSAN today; this consists primarily of making use of
    the amd64 direct map optional in various parts of the kernel, and
    eliminating uses of UMA_ZONE_NOFREE.

Sponsor: The FreeBSD Foundation

------------------------------------------------------------------------

Last modified on: September 19, 2021 by Brad Davis

Legal Notices | © 1995-2023 The FreeBSD Project All rights reserved. The
mark FreeBSD is a registered trademark of The FreeBSD Foundation and is
used by The FreeBSD Project with the permission of The FreeBSD
Foundation. Contact
>>>>>>> b1bb5fd9 (Processing txt files in data/doc)
